                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _bank4_4000
                             14 	.globl _bank0123
                             15 	.globl _calque4000
                             16 	.globl _calqueC000
                             17 	.globl _vsync
                             18 	.globl _rupture
                             19 	.globl _restoreVBL
                             20 	.globl _killVBL
                             21 	.globl _scroll
                             22 	.globl _cpct_restoreState_mxor_u8
                             23 	.globl _cpct_setSeed_mxor
                             24 	.globl _cpct_getScreenPtr
                             25 	.globl _cpct_setVideoMemoryOffset
                             26 	.globl _cpct_setPALColour
                             27 	.globl _cpct_setPalette
                             28 	.globl _cpct_setVideoMode
                             29 	.globl _cpct_hflipSpriteM0
                             30 	.globl _cpct_drawSolidBox
                             31 	.globl _cpct_drawSpriteMasked
                             32 	.globl _cpct_drawSprite
                             33 	.globl _cpct_px2byteM0
                             34 	.globl _cpct_isKeyPressed
                             35 	.globl _cpct_scanKeyboard_f
                             36 	.globl _cpct_memset_f64
                             37 	.globl _cpct_memset
                             38 	.globl _cpct_setInterruptHandler
                             39 	.globl _hScroll
                             40 	.globl _intCounter
                             41 	.globl _g_items_0
                             42 ;--------------------------------------------------------
                             43 ; special function registers
                             44 ;--------------------------------------------------------
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _DATA
                             49 ;--------------------------------------------------------
                             50 ; ram data
                             51 ;--------------------------------------------------------
                             52 	.area _INITIALIZED
   0000                      53 _intCounter::
   0000                      54 	.ds 1
   0001                      55 _hScroll::
   0001                      56 	.ds 1
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area _DABS (ABS)
                             61 ;--------------------------------------------------------
                             62 ; global & static initialisations
                             63 ;--------------------------------------------------------
                             64 	.area _HOME
                             65 	.area _GSINIT
                             66 	.area _GSFINAL
                             67 	.area _GSINIT
                             68 ;--------------------------------------------------------
                             69 ; Home
                             70 ;--------------------------------------------------------
                             71 	.area _HOME
                             72 	.area _HOME
                             73 ;--------------------------------------------------------
                             74 ; code
                             75 ;--------------------------------------------------------
                             76 	.area _CODE
                             77 ;src/main.c:46: void myInterruptHandler() {
                             78 ;	---------------------------------
                             79 ; Function myInterruptHandler
                             80 ; ---------------------------------
   0000                      81 _myInterruptHandler::
                             82 ;src/main.c:47: intCounter=intCounter+1;
   0000 FD 21r00r00   [14]   83 	ld	iy, #_intCounter
   0004 FD 34 00      [23]   84 	inc	0 (iy)
                             85 ;src/main.c:48: if (intCounter == 6) intCounter=0;
   0007 FD 7E 00      [19]   86 	ld	a, 0 (iy)
   000A D6 06         [ 7]   87 	sub	a, #0x06
   000C 20 04         [12]   88 	jr	NZ,00102$
   000E FD 36 00 00   [19]   89 	ld	0 (iy), #0x00
   0012                      90 00102$:
                             91 ;src/main.c:50: if (intCounter == 2) {
   0012 3Ar00r00      [13]   92 	ld	a,(#_intCounter + 0)
   0015 D6 02         [ 7]   93 	sub	a, #0x02
   0017 20 09         [12]   94 	jr	NZ,00104$
                             95 ;src/main.c:51: cpct_setBorder(2);
   0019 21 10 02      [10]   96 	ld	hl, #0x0210
   001C E5            [11]   97 	push	hl
   001D CDr00r00      [17]   98 	call	_cpct_setPALColour
   0020 18 07         [12]   99 	jr	00105$
   0022                     100 00104$:
                            101 ;src/main.c:53: cpct_setBorder(3);
   0022 21 10 03      [10]  102 	ld	hl, #0x0310
   0025 E5            [11]  103 	push	hl
   0026 CDr00r00      [17]  104 	call	_cpct_setPALColour
   0029                     105 00105$:
                            106 ;src/main.c:62: if (intCounter==5) {
   0029 3Ar00r00      [13]  107 	ld	a,(#_intCounter + 0)
   002C D6 05         [ 7]  108 	sub	a, #0x05
   002E 20 2A         [12]  109 	jr	NZ,00109$
                            110 ;src/main.c:63: calque4000();
   0030 CDr00r00      [17]  111 	call	_calque4000
                            112 ;src/main.c:65: hScroll+=1;
   0033 FD 21r01r00   [14]  113 	ld	iy, #_hScroll
   0037 FD 34 00      [23]  114 	inc	0 (iy)
                            115 ;src/main.c:66: if (hScroll==160/2) {hScroll=0;}
   003A FD 7E 00      [19]  116 	ld	a, 0 (iy)
   003D D6 50         [ 7]  117 	sub	a, #0x50
   003F 20 04         [12]  118 	jr	NZ,00107$
   0041 FD 36 00 00   [19]  119 	ld	0 (iy), #0x00
   0045                     120 00107$:
                            121 ;src/main.c:67: cpct_setVideoMemoryOffset(hScroll);
   0045 FD 21r01r00   [14]  122 	ld	iy, #_hScroll
   0049 FD 6E 00      [19]  123 	ld	l, 0 (iy)
   004C CDr00r00      [17]  124 	call	_cpct_setVideoMemoryOffset
                            125 ;src/main.c:68: killVBL();
   004F CDr00r00      [17]  126 	call	_killVBL
                            127 ;src/main.c:69: rupture(19-1);
   0052 3E 12         [ 7]  128 	ld	a, #0x12
   0054 F5            [11]  129 	push	af
   0055 33            [ 6]  130 	inc	sp
   0056 CDr00r00      [17]  131 	call	_rupture
   0059 33            [ 6]  132 	inc	sp
   005A                     133 00109$:
                            134 ;src/main.c:72: if (intCounter==2) {
   005A 3Ar00r00      [13]  135 	ld	a,(#_intCounter + 0)
   005D D6 02         [ 7]  136 	sub	a, #0x02
   005F 20 10         [12]  137 	jr	NZ,00111$
                            138 ;src/main.c:73: calqueC000();
   0061 CDr00r00      [17]  139 	call	_calqueC000
                            140 ;src/main.c:74: cpct_setVideoMemoryOffset(0);
   0064 2E 00         [ 7]  141 	ld	l, #0x00
   0066 CDr00r00      [17]  142 	call	_cpct_setVideoMemoryOffset
                            143 ;src/main.c:75: rupture(7);
   0069 3E 07         [ 7]  144 	ld	a, #0x07
   006B F5            [11]  145 	push	af
   006C 33            [ 6]  146 	inc	sp
   006D CDr00r00      [17]  147 	call	_rupture
   0070 33            [ 6]  148 	inc	sp
   0071                     149 00111$:
                            150 ;src/main.c:78: if (intCounter==3) {
   0071 3Ar00r00      [13]  151 	ld	a,(#_intCounter + 0)
   0074 D6 03         [ 7]  152 	sub	a, #0x03
   0076 C0            [11]  153 	ret	NZ
                            154 ;src/main.c:79: calqueC000();
   0077 CDr00r00      [17]  155 	call	_calqueC000
                            156 ;src/main.c:80: cpct_setVideoMemoryOffset(0);
   007A 2E 00         [ 7]  157 	ld	l, #0x00
   007C CDr00r00      [17]  158 	call	_cpct_setVideoMemoryOffset
                            159 ;src/main.c:81: restoreVBL();
   007F CDr00r00      [17]  160 	call	_restoreVBL
                            161 ;src/main.c:82: rupture(39-19-7+1);
   0082 3E 0E         [ 7]  162 	ld	a, #0x0e
   0084 F5            [11]  163 	push	af
   0085 33            [ 6]  164 	inc	sp
   0086 CDr00r00      [17]  165 	call	_rupture
   0089 33            [ 6]  166 	inc	sp
   008A C9            [10]  167 	ret
   008B                     168 _g_items_0:
   008B 05                  169 	.db #0x05	; 5
   008C 0F                  170 	.db #0x0f	; 15
   008D 0F                  171 	.db #0x0f	; 15
   008E 00                  172 	.db #0x00	; 0
   008F 0F                  173 	.db #0x0f	; 15
   0090 0F                  174 	.db #0x0f	; 15
   0091 0F                  175 	.db #0x0f	; 15
   0092 0A                  176 	.db #0x0a	; 10
   0093 0F                  177 	.db #0x0f	; 15
   0094 0A                  178 	.db #0x0a	; 10
   0095 05                  179 	.db #0x05	; 5
   0096 00                  180 	.db #0x00	; 0
   0097 0F                  181 	.db #0x0f	; 15
   0098 0A                  182 	.db #0x0a	; 10
   0099 05                  183 	.db #0x05	; 5
   009A 00                  184 	.db #0x00	; 0
   009B 05                  185 	.db #0x05	; 5
   009C 0F                  186 	.db #0x0f	; 15
   009D 0A                  187 	.db #0x0a	; 10
   009E 0A                  188 	.db #0x0a	; 10
   009F 00                  189 	.db #0x00	; 0
   00A0 0F                  190 	.db #0x0f	; 15
   00A1 0F                  191 	.db #0x0f	; 15
   00A2 0A                  192 	.db #0x0a	; 10
   00A3 00                  193 	.db #0x00	; 0
   00A4 0A                  194 	.db #0x0a	; 10
   00A5 0A                  195 	.db #0x0a	; 10
   00A6 0A                  196 	.db #0x0a	; 10
   00A7 00                  197 	.db #0x00	; 0
   00A8 00                  198 	.db #0x00	; 0
   00A9 00                  199 	.db #0x00	; 0
   00AA 00                  200 	.db #0x00	; 0
                            201 ;src/main.c:87: void main(void) {
                            202 ;	---------------------------------
                            203 ; Function main
                            204 ; ---------------------------------
   00AB                     205 _main::
                            206 ;src/main.c:90: u8* sprite=g_items_0;
                            207 ;src/main.c:106: cpct_setInterruptHandler(myInterruptHandler);
   00AB 21r00r00      [10]  208 	ld	hl, #_myInterruptHandler
   00AE CDr00r00      [17]  209 	call	_cpct_setInterruptHandler
                            210 ;src/main.c:110: bank4_4000();
   00B1 CDr00r00      [17]  211 	call	_bank4_4000
                            212 ;src/main.c:111: bank0123();
   00B4 CDr00r00      [17]  213 	call	_bank0123
                            214 ;src/main.c:112: calqueC000();
   00B7 CDr00r00      [17]  215 	call	_calqueC000
                            216 ;src/main.c:115: cpct_setVideoMode(0);
   00BA 2E 00         [ 7]  217 	ld	l, #0x00
   00BC CDr00r00      [17]  218 	call	_cpct_setVideoMode
                            219 ;src/main.c:118: cpct_setBorder(HW_BLACK);
   00BF 21 10 14      [10]  220 	ld	hl, #0x1410
   00C2 E5            [11]  221 	push	hl
   00C3 CDr00r00      [17]  222 	call	_cpct_setPALColour
                            223 ;src/main.c:119: cpct_setPalette(g_tile_palette, 6);
   00C6 21 06 00      [10]  224 	ld	hl, #0x0006
   00C9 E5            [11]  225 	push	hl
   00CA 21r00r00      [10]  226 	ld	hl, #_g_tile_palette
   00CD E5            [11]  227 	push	hl
   00CE CDr00r00      [17]  228 	call	_cpct_setPalette
                            229 ;src/main.c:120: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   00D1 21 00 40      [10]  230 	ld	hl, #0x4000
   00D4 E5            [11]  231 	push	hl
   00D5 AF            [ 4]  232 	xor	a, a
   00D6 F5            [11]  233 	push	af
   00D7 33            [ 6]  234 	inc	sp
   00D8 26 C0         [ 7]  235 	ld	h, #0xc0
   00DA E5            [11]  236 	push	hl
   00DB CDr00r00      [17]  237 	call	_cpct_memset
                            238 ;src/main.c:125: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   00DE 21 0F 0F      [10]  239 	ld	hl, #0x0f0f
   00E1 E5            [11]  240 	push	hl
   00E2 21 00 C0      [10]  241 	ld	hl, #0xc000
   00E5 E5            [11]  242 	push	hl
   00E6 CDr00r00      [17]  243 	call	_cpct_getScreenPtr
                            244 ;src/main.c:126: cpct_drawSprite(sprite, p, 4, 8);
   00E9 E5            [11]  245 	push	hl
   00EA 01 04 08      [10]  246 	ld	bc, #0x0804
   00ED C5            [11]  247 	push	bc
   00EE E5            [11]  248 	push	hl
   00EF 01r8Br00      [10]  249 	ld	bc, #_g_items_0
   00F2 C5            [11]  250 	push	bc
   00F3 CDr00r00      [17]  251 	call	_cpct_drawSprite
   00F6 01 00 20      [10]  252 	ld	bc, #0x2000
   00F9 C5            [11]  253 	push	bc
   00FA 01 FF FF      [10]  254 	ld	bc, #0xffff
   00FD C5            [11]  255 	push	bc
   00FE 01 00 C0      [10]  256 	ld	bc, #0xc000
   0101 C5            [11]  257 	push	bc
   0102 CDr00r00      [17]  258 	call	_cpct_memset_f64
   0105 01r8Br00      [10]  259 	ld	bc, #_g_items_0
   0108 C5            [11]  260 	push	bc
   0109 01 04 08      [10]  261 	ld	bc, #0x0804
   010C C5            [11]  262 	push	bc
   010D CDr00r00      [17]  263 	call	_cpct_hflipSpriteM0
   0110 E1            [10]  264 	pop	hl
                            265 ;src/main.c:134: cpct_drawSprite(sprite, p, 4, 8);
   0111 01 04 08      [10]  266 	ld	bc, #0x0804
   0114 C5            [11]  267 	push	bc
   0115 E5            [11]  268 	push	hl
   0116 21r8Br00      [10]  269 	ld	hl, #_g_items_0
   0119 E5            [11]  270 	push	hl
   011A CDr00r00      [17]  271 	call	_cpct_drawSprite
                            272 ;src/main.c:136: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   011D 21 0F 1F      [10]  273 	ld	hl, #0x1f0f
   0120 E5            [11]  274 	push	hl
   0121 21 00 C0      [10]  275 	ld	hl, #0xc000
   0124 E5            [11]  276 	push	hl
   0125 CDr00r00      [17]  277 	call	_cpct_getScreenPtr
                            278 ;src/main.c:138: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   0128 E5            [11]  279 	push	hl
   0129 21 02 03      [10]  280 	ld	hl, #0x0302
   012C E5            [11]  281 	push	hl
   012D CDr00r00      [17]  282 	call	_cpct_px2byteM0
   0130 55            [ 4]  283 	ld	d, l
   0131 C1            [10]  284 	pop	bc
   0132 21 0A 14      [10]  285 	ld	hl, #0x140a
   0135 E5            [11]  286 	push	hl
   0136 D5            [11]  287 	push	de
   0137 33            [ 6]  288 	inc	sp
   0138 C5            [11]  289 	push	bc
   0139 CDr00r00      [17]  290 	call	_cpct_drawSolidBox
   013C F1            [10]  291 	pop	af
                            292 ;src/main.c:141: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   013D 33            [ 6]  293 	inc	sp
   013E 21 09 4F      [10]  294 	ld	hl,#0x4f09
   0141 E3            [19]  295 	ex	(sp),hl
   0142 21 00 C0      [10]  296 	ld	hl, #0xc000
   0145 E5            [11]  297 	push	hl
   0146 CDr00r00      [17]  298 	call	_cpct_getScreenPtr
                            299 ;src/main.c:142: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   0149 01r00r00      [10]  300 	ld	bc, #_g_tile_schtroumpf+0
   014C 11 10 20      [10]  301 	ld	de, #0x2010
   014F D5            [11]  302 	push	de
   0150 E5            [11]  303 	push	hl
   0151 C5            [11]  304 	push	bc
   0152 CDr00r00      [17]  305 	call	_cpct_drawSpriteMasked
                            306 ;src/main.c:156: cpct_srand(77);
   0155 21 4D 00      [10]  307 	ld	hl,#0x004d
   0158 11 00 00      [10]  308 	ld	de,#0x0000
   015B CDr00r00      [17]  309 	call	_cpct_setSeed_mxor
   015E CDr00r00      [17]  310 	call	_cpct_restoreState_mxor_u8
                            311 ;src/main.c:160: cpct_scanKeyboard_f();
   0161 CDr00r00      [17]  312 	call	_cpct_scanKeyboard_f
                            313 ;src/main.c:161: t=0;
   0164 01 00 00      [10]  314 	ld	bc, #0x0000
                            315 ;src/main.c:162: while (t%128!=0 || (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return))){
   0167                     316 00107$:
   0167 C5            [11]  317 	push	bc
   0168 21 80 00      [10]  318 	ld	hl, #0x0080
   016B E5            [11]  319 	push	hl
   016C C5            [11]  320 	push	bc
   016D CDr00r00      [17]  321 	call	__modsint
   0170 F1            [10]  322 	pop	af
   0171 F1            [10]  323 	pop	af
   0172 C1            [10]  324 	pop	bc
   0173 7C            [ 4]  325 	ld	a, h
   0174 B5            [ 4]  326 	or	a,l
   0175 20 18         [12]  327 	jr	NZ,00108$
   0177 C5            [11]  328 	push	bc
   0178 21 00 40      [10]  329 	ld	hl, #0x4000
   017B CDr00r00      [17]  330 	call	_cpct_isKeyPressed
   017E C1            [10]  331 	pop	bc
   017F 7D            [ 4]  332 	ld	a, l
   0180 B7            [ 4]  333 	or	a, a
   0181 20 48         [12]  334 	jr	NZ,00109$
   0183 C5            [11]  335 	push	bc
   0184 21 02 04      [10]  336 	ld	hl, #0x0402
   0187 CDr00r00      [17]  337 	call	_cpct_isKeyPressed
   018A C1            [10]  338 	pop	bc
   018B 7D            [ 4]  339 	ld	a, l
   018C B7            [ 4]  340 	or	a, a
   018D 20 3C         [12]  341 	jr	NZ,00109$
   018F                     342 00108$:
                            343 ;src/main.c:163: scroll("WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR", 110, t);
   018F C5            [11]  344 	push	bc
   0190 C5            [11]  345 	push	bc
   0191 21 6E 00      [10]  346 	ld	hl, #0x006e
   0194 E5            [11]  347 	push	hl
   0195 21rD8r01      [10]  348 	ld	hl, #___str_0
   0198 E5            [11]  349 	push	hl
   0199 CDr00r00      [17]  350 	call	_scroll
   019C 21 06 00      [10]  351 	ld	hl, #6
   019F 39            [11]  352 	add	hl, sp
   01A0 F9            [ 6]  353 	ld	sp, hl
   01A1 C1            [10]  354 	pop	bc
                            355 ;src/main.c:164: t=t+1;
   01A2 03            [ 6]  356 	inc	bc
                            357 ;src/main.c:165: if (t>110*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   01A3 3E EC         [ 7]  358 	ld	a, #0xec
   01A5 B9            [ 4]  359 	cp	a, c
   01A6 3E 04         [ 7]  360 	ld	a, #0x04
   01A8 98            [ 4]  361 	sbc	a, b
   01A9 E2rAEr01      [10]  362 	jp	PO, 00139$
   01AC EE 80         [ 7]  363 	xor	a, #0x80
   01AE                     364 00139$:
   01AE F2rB4r01      [10]  365 	jp	P, 00102$
   01B1 01 00 00      [10]  366 	ld	bc, #0x0000
   01B4                     367 00102$:
                            368 ;src/main.c:166: if (t%128==0) {
   01B4 C5            [11]  369 	push	bc
   01B5 21 80 00      [10]  370 	ld	hl, #0x0080
   01B8 E5            [11]  371 	push	hl
   01B9 C5            [11]  372 	push	bc
   01BA CDr00r00      [17]  373 	call	__modsint
   01BD F1            [10]  374 	pop	af
   01BE F1            [10]  375 	pop	af
   01BF C1            [10]  376 	pop	bc
   01C0 7C            [ 4]  377 	ld	a, h
   01C1 B5            [ 4]  378 	or	a,l
   01C2 20 A3         [12]  379 	jr	NZ,00107$
                            380 ;src/main.c:167: cpct_scanKeyboard_f();
   01C4 C5            [11]  381 	push	bc
   01C5 CDr00r00      [17]  382 	call	_cpct_scanKeyboard_f
   01C8 C1            [10]  383 	pop	bc
   01C9 18 9C         [12]  384 	jr	00107$
   01CB                     385 00109$:
                            386 ;src/main.c:173: cpct_setVideoMemoryOffset(0);
   01CB 2E 00         [ 7]  387 	ld	l, #0x00
   01CD CDr00r00      [17]  388 	call	_cpct_setVideoMemoryOffset
                            389 ;src/main.c:174: calque4000();
   01D0 CDr00r00      [17]  390 	call	_calque4000
                            391 ;src/main.c:176: while (1) {
   01D3                     392 00111$:
                            393 ;src/main.c:177: vsync();
   01D3 CDr00r00      [17]  394 	call	_vsync
   01D6 18 FB         [12]  395 	jr	00111$
   01D8                     396 ___str_0:
   01D8 57 45 20 57 49 53   397 	.ascii "WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS "
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        57 45 20 57 49 53
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
   0214 57 45 20 57 49 53   398 	.ascii "WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR"
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        41 4E 44 20 41 20
        48 41 50 50 59 20
        4E 45 57 20 59 45
        41 52
   0246 00                  399 	.db 0x00
                            400 	.area _CODE
                            401 	.area _INITIALIZER
   0000                     402 __xinit__intCounter:
   0000 00                  403 	.db #0x00	; 0
   0001                     404 __xinit__hScroll:
   0001 00                  405 	.db #0x00	; 0
                            406 	.area _CABS (ABS)

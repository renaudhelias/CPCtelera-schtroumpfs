                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _cpct_restoreState_mxor_u8
                             13 	.globl _cpct_setSeed_mxor
                             14 	.globl _cpct_getRandom_mxor_u8
                             15 	.globl _cpct_getScreenPtr
                             16 	.globl _cpct_setPALColour
                             17 	.globl _cpct_setPalette
                             18 	.globl _cpct_setVideoMode
                             19 	.globl _cpct_drawStringM0
                             20 	.globl _cpct_drawCharM0
                             21 	.globl _cpct_drawSolidBox
                             22 	.globl _cpct_drawSpriteMasked
                             23 	.globl _cpct_drawSprite
                             24 	.globl _cpct_px2byteM0
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_scanKeyboard_f
                             27 	.globl _cpct_memset
                             28 	.globl _cpct_disableFirmware
                             29 	.globl _g_items_0
                             30 ;--------------------------------------------------------
                             31 ; special function registers
                             32 ;--------------------------------------------------------
                             33 ;--------------------------------------------------------
                             34 ; ram data
                             35 ;--------------------------------------------------------
                             36 	.area _DATA
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _INITIALIZED
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DABS (ABS)
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _GSINIT
                             50 	.area _GSFINAL
                             51 	.area _GSINIT
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _HOME
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area _CODE
                             61 ;src/main.c:34: void main(void) {
                             62 ;	---------------------------------
                             63 ; Function main
                             64 ; ---------------------------------
   0000                      65 _main::
   0000 DD E5         [15]   66 	push	ix
   0002 DD 21 00 00   [14]   67 	ld	ix,#0
   0006 DD 39         [15]   68 	add	ix,sp
   0008 21 F5 FF      [10]   69 	ld	hl, #-11
   000B 39            [11]   70 	add	hl, sp
   000C F9            [ 6]   71 	ld	sp, hl
                             72 ;src/main.c:37: u8* sprite=g_items_0;
                             73 ;src/main.c:42: cpct_disableFirmware();
   000D CDr00r00      [17]   74 	call	_cpct_disableFirmware
                             75 ;src/main.c:43: cpct_setVideoMode(0);
   0010 2E 00         [ 7]   76 	ld	l, #0x00
   0012 CDr00r00      [17]   77 	call	_cpct_setVideoMode
                             78 ;src/main.c:44: cpct_setBorder(HW_BLACK);
   0015 21 10 14      [10]   79 	ld	hl, #0x1410
   0018 E5            [11]   80 	push	hl
   0019 CDr00r00      [17]   81 	call	_cpct_setPALColour
                             82 ;src/main.c:45: cpct_setPalette(g_tile_palette, 6);
   001C 21 06 00      [10]   83 	ld	hl, #0x0006
   001F E5            [11]   84 	push	hl
   0020 21r00r00      [10]   85 	ld	hl, #_g_tile_palette
   0023 E5            [11]   86 	push	hl
   0024 CDr00r00      [17]   87 	call	_cpct_setPalette
                             88 ;src/main.c:46: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   0027 21 00 40      [10]   89 	ld	hl, #0x4000
   002A E5            [11]   90 	push	hl
   002B AF            [ 4]   91 	xor	a, a
   002C F5            [11]   92 	push	af
   002D 33            [ 6]   93 	inc	sp
   002E 26 C0         [ 7]   94 	ld	h, #0xc0
   0030 E5            [11]   95 	push	hl
   0031 CDr00r00      [17]   96 	call	_cpct_memset
                             97 ;src/main.c:49: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 20, 88);
   0034 21 14 58      [10]   98 	ld	hl, #0x5814
   0037 E5            [11]   99 	push	hl
   0038 21 00 C0      [10]  100 	ld	hl, #0xc000
   003B E5            [11]  101 	push	hl
   003C CDr00r00      [17]  102 	call	_cpct_getScreenPtr
   003F DD 75 FA      [19]  103 	ld	-6 (ix), l
   0042 DD 74 FB      [19]  104 	ld	-5 (ix), h
                            105 ;src/main.c:59: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   0045 21 0F 0F      [10]  106 	ld	hl, #0x0f0f
   0048 E5            [11]  107 	push	hl
   0049 21 00 C0      [10]  108 	ld	hl, #0xc000
   004C E5            [11]  109 	push	hl
   004D CDr00r00      [17]  110 	call	_cpct_getScreenPtr
                            111 ;src/main.c:60: cpct_drawSprite(sprite, p, 4, 8);
   0050 01 04 08      [10]  112 	ld	bc, #0x0804
   0053 C5            [11]  113 	push	bc
   0054 E5            [11]  114 	push	hl
   0055 21r6Er01      [10]  115 	ld	hl, #_g_items_0
   0058 E5            [11]  116 	push	hl
   0059 CDr00r00      [17]  117 	call	_cpct_drawSprite
                            118 ;src/main.c:62: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   005C 21 0F 1F      [10]  119 	ld	hl, #0x1f0f
   005F E5            [11]  120 	push	hl
   0060 21 00 C0      [10]  121 	ld	hl, #0xc000
   0063 E5            [11]  122 	push	hl
   0064 CDr00r00      [17]  123 	call	_cpct_getScreenPtr
                            124 ;src/main.c:63: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   0067 E5            [11]  125 	push	hl
   0068 21 02 03      [10]  126 	ld	hl, #0x0302
   006B E5            [11]  127 	push	hl
   006C CDr00r00      [17]  128 	call	_cpct_px2byteM0
   006F 55            [ 4]  129 	ld	d, l
   0070 C1            [10]  130 	pop	bc
   0071 21 0A 14      [10]  131 	ld	hl, #0x140a
   0074 E5            [11]  132 	push	hl
   0075 D5            [11]  133 	push	de
   0076 33            [ 6]  134 	inc	sp
   0077 C5            [11]  135 	push	bc
   0078 CDr00r00      [17]  136 	call	_cpct_drawSolidBox
   007B F1            [10]  137 	pop	af
   007C F1            [10]  138 	pop	af
   007D 33            [ 6]  139 	inc	sp
                            140 ;src/main.c:67: cpct_drawStringM0("Welcome to you!", pvmem, 2, 0);
   007E DD 4E FA      [19]  141 	ld	c,-6 (ix)
   0081 DD 46 FB      [19]  142 	ld	b,-5 (ix)
   0084 21 02 00      [10]  143 	ld	hl, #0x0002
   0087 E5            [11]  144 	push	hl
   0088 C5            [11]  145 	push	bc
   0089 21r8Er01      [10]  146 	ld	hl, #___str_0
   008C E5            [11]  147 	push	hl
   008D CDr00r00      [17]  148 	call	_cpct_drawStringM0
   0090 21 06 00      [10]  149 	ld	hl, #6
   0093 39            [11]  150 	add	hl, sp
   0094 F9            [ 6]  151 	ld	sp, hl
                            152 ;src/main.c:71: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   0095 21 09 4F      [10]  153 	ld	hl, #0x4f09
   0098 E5            [11]  154 	push	hl
   0099 21 00 C0      [10]  155 	ld	hl, #0xc000
   009C E5            [11]  156 	push	hl
   009D CDr00r00      [17]  157 	call	_cpct_getScreenPtr
                            158 ;src/main.c:72: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   00A0 01r00r00      [10]  159 	ld	bc, #_g_tile_schtroumpf+0
   00A3 11 10 20      [10]  160 	ld	de, #0x2010
   00A6 D5            [11]  161 	push	de
   00A7 E5            [11]  162 	push	hl
   00A8 C5            [11]  163 	push	bc
   00A9 CDr00r00      [17]  164 	call	_cpct_drawSpriteMasked
                            165 ;src/main.c:75: while (1){
   00AC DD 77 FC      [19]  166 	ld	-4 (ix), a
   00AF DD 77 FD      [19]  167 	ld	-3 (ix), a
   00B2 DD 77 FE      [19]  168 	ld	-2 (ix), a
   00B5 DD 77 FF      [19]  169 	ld	-1 (ix), a
   00B8                     170 00116$:
                            171 ;src/main.c:76: seed++;
   00B8 DD 34 FC      [23]  172 	inc	-4 (ix)
   00BB 20 0D         [12]  173 	jr	NZ,00156$
   00BD DD 34 FD      [23]  174 	inc	-3 (ix)
   00C0 20 08         [12]  175 	jr	NZ,00156$
   00C2 DD 34 FE      [23]  176 	inc	-2 (ix)
   00C5 20 03         [12]  177 	jr	NZ,00156$
   00C7 DD 34 FF      [23]  178 	inc	-1 (ix)
   00CA                     179 00156$:
                            180 ;src/main.c:78: cpct_scanKeyboard_f();
   00CA CDr00r00      [17]  181 	call	_cpct_scanKeyboard_f
                            182 ;src/main.c:82: if      (cpct_isKeyPressed(Key_CursorRight) && pos < 0xFF ) ++pos; 
   00CD 21 00 02      [10]  183 	ld	hl, #0x0200
   00D0 CDr00r00      [17]  184 	call	_cpct_isKeyPressed
   00D3 7D            [ 4]  185 	ld	a, l
   00D4 B7            [ 4]  186 	or	a, a
   00D5 28 0C         [12]  187 	jr	Z,00105$
   00D7 DD 7E F9      [19]  188 	ld	a, -7 (ix)
   00DA D6 FF         [ 7]  189 	sub	a, #0xff
   00DC 30 05         [12]  190 	jr	NC,00105$
   00DE DD 34 F9      [23]  191 	inc	-7 (ix)
   00E1 18 13         [12]  192 	jr	00106$
   00E3                     193 00105$:
                            194 ;src/main.c:83: else if (cpct_isKeyPressed(Key_CursorLeft)  && pos > 0    ) --pos; 
   00E3 21 01 01      [10]  195 	ld	hl, #0x0101
   00E6 CDr00r00      [17]  196 	call	_cpct_isKeyPressed
   00E9 7D            [ 4]  197 	ld	a, l
   00EA B7            [ 4]  198 	or	a, a
   00EB 28 09         [12]  199 	jr	Z,00106$
   00ED DD 7E F9      [19]  200 	ld	a, -7 (ix)
   00F0 B7            [ 4]  201 	or	a, a
   00F1 28 03         [12]  202 	jr	Z,00106$
   00F3 DD 35 F9      [23]  203 	dec	-7 (ix)
   00F6                     204 00106$:
                            205 ;src/main.c:84: if      (cpct_isKeyPressed(Key_CursorUp)    && pos > 0    ) --pos;
   00F6 21 00 01      [10]  206 	ld	hl, #0x0100
   00F9 CDr00r00      [17]  207 	call	_cpct_isKeyPressed
   00FC 7D            [ 4]  208 	ld	a, l
   00FD B7            [ 4]  209 	or	a, a
   00FE 28 0B         [12]  210 	jr	Z,00112$
   0100 DD 7E F9      [19]  211 	ld	a, -7 (ix)
   0103 B7            [ 4]  212 	or	a, a
   0104 28 05         [12]  213 	jr	Z,00112$
   0106 DD 35 F9      [23]  214 	dec	-7 (ix)
   0109 18 14         [12]  215 	jr	00113$
   010B                     216 00112$:
                            217 ;src/main.c:85: else if (cpct_isKeyPressed(Key_CursorDown)  && pos < 0xFF ) ++pos;
   010B 21 00 04      [10]  218 	ld	hl, #0x0400
   010E CDr00r00      [17]  219 	call	_cpct_isKeyPressed
   0111 7D            [ 4]  220 	ld	a, l
   0112 B7            [ 4]  221 	or	a, a
   0113 28 0A         [12]  222 	jr	Z,00113$
   0115 DD 7E F9      [19]  223 	ld	a, -7 (ix)
   0118 D6 FF         [ 7]  224 	sub	a, #0xff
   011A 30 03         [12]  225 	jr	NC,00113$
   011C DD 34 F9      [23]  226 	inc	-7 (ix)
   011F                     227 00113$:
                            228 ;src/main.c:88: p = cpct_getScreenPtr(CPCT_VMEM_START, 32-1,16-1);
   011F 21 1F 0F      [10]  229 	ld	hl, #0x0f1f
   0122 E5            [11]  230 	push	hl
   0123 21 00 C0      [10]  231 	ld	hl, #0xc000
   0126 E5            [11]  232 	push	hl
   0127 CDr00r00      [17]  233 	call	_cpct_getScreenPtr
   012A 4D            [ 4]  234 	ld	c, l
   012B 44            [ 4]  235 	ld	b, h
                            236 ;src/main.c:89: cpct_drawCharM0(p, 2,0, pos);
   012C DD 7E F9      [19]  237 	ld	a, -7 (ix)
   012F F5            [11]  238 	push	af
   0130 33            [ 6]  239 	inc	sp
   0131 21 02 00      [10]  240 	ld	hl, #0x0002
   0134 E5            [11]  241 	push	hl
   0135 C5            [11]  242 	push	bc
   0136 CDr00r00      [17]  243 	call	_cpct_drawCharM0
   0139 F1            [10]  244 	pop	af
                            245 ;src/main.c:90: p  = cpct_getScreenPtr(CPCT_VMEM_START, 8-1, 94);
   013A 33            [ 6]  246 	inc	sp
   013B 21 07 5E      [10]  247 	ld	hl,#0x5e07
   013E E3            [19]  248 	ex	(sp),hl
   013F 21 00 C0      [10]  249 	ld	hl, #0xc000
   0142 E5            [11]  250 	push	hl
   0143 CDr00r00      [17]  251 	call	_cpct_getScreenPtr
                            252 ;src/main.c:91: cpct_srand(seed);
   0146 E5            [11]  253 	push	hl
   0147 DD 6E FC      [19]  254 	ld	l, -4 (ix)
   014A DD 66 FD      [19]  255 	ld	h, -3 (ix)
   014D DD 5E FE      [19]  256 	ld	e, -2 (ix)
   0150 DD 56 FF      [19]  257 	ld	d, -1 (ix)
   0153 CDr00r00      [17]  258 	call	_cpct_setSeed_mxor
   0156 CDr00r00      [17]  259 	call	_cpct_restoreState_mxor_u8
   0159 CDr00r00      [17]  260 	call	_cpct_getRandom_mxor_u8
   015C 55            [ 4]  261 	ld	d, l
   015D C1            [10]  262 	pop	bc
   015E D5            [11]  263 	push	de
   015F 33            [ 6]  264 	inc	sp
   0160 21 02 00      [10]  265 	ld	hl, #0x0002
   0163 E5            [11]  266 	push	hl
   0164 C5            [11]  267 	push	bc
   0165 CDr00r00      [17]  268 	call	_cpct_drawCharM0
   0168 F1            [10]  269 	pop	af
   0169 F1            [10]  270 	pop	af
   016A 33            [ 6]  271 	inc	sp
   016B C3rB8r00      [10]  272 	jp	00116$
   016E                     273 _g_items_0:
   016E 05                  274 	.db #0x05	; 5
   016F 0F                  275 	.db #0x0f	; 15
   0170 0F                  276 	.db #0x0f	; 15
   0171 00                  277 	.db #0x00	; 0
   0172 0F                  278 	.db #0x0f	; 15
   0173 0F                  279 	.db #0x0f	; 15
   0174 0F                  280 	.db #0x0f	; 15
   0175 0A                  281 	.db #0x0a	; 10
   0176 0F                  282 	.db #0x0f	; 15
   0177 0A                  283 	.db #0x0a	; 10
   0178 05                  284 	.db #0x05	; 5
   0179 00                  285 	.db #0x00	; 0
   017A 0F                  286 	.db #0x0f	; 15
   017B 0A                  287 	.db #0x0a	; 10
   017C 05                  288 	.db #0x05	; 5
   017D 00                  289 	.db #0x00	; 0
   017E 05                  290 	.db #0x05	; 5
   017F 0F                  291 	.db #0x0f	; 15
   0180 0A                  292 	.db #0x0a	; 10
   0181 0A                  293 	.db #0x0a	; 10
   0182 00                  294 	.db #0x00	; 0
   0183 0F                  295 	.db #0x0f	; 15
   0184 0F                  296 	.db #0x0f	; 15
   0185 0A                  297 	.db #0x0a	; 10
   0186 00                  298 	.db #0x00	; 0
   0187 0A                  299 	.db #0x0a	; 10
   0188 0A                  300 	.db #0x0a	; 10
   0189 0A                  301 	.db #0x0a	; 10
   018A 00                  302 	.db #0x00	; 0
   018B 00                  303 	.db #0x00	; 0
   018C 00                  304 	.db #0x00	; 0
   018D 00                  305 	.db #0x00	; 0
   018E                     306 ___str_0:
   018E 57 65 6C 63 6F 6D   307 	.ascii "Welcome to you!"
        65 20 74 6F 20 79
        6F 75 21
   019D 00                  308 	.db 0x00
                            309 	.area _CODE
                            310 	.area _INITIALIZER
                            311 	.area _CABS (ABS)

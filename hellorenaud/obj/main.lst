                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _crtc
                             14 	.globl _bank7_C000
                             15 	.globl _bank0123
                             16 	.globl _calque8000
                             17 	.globl _akp_musicPlay
                             18 	.globl _akp_musicInit
                             19 	.globl _scroll_hard
                             20 	.globl _rupture
                             21 	.globl _restoreVBL
                             22 	.globl _killVBL
                             23 	.globl _cpct_getScreenPtr
                             24 	.globl _cpct_setVideoMemoryOffset
                             25 	.globl _cpct_setVideoMemoryPage
                             26 	.globl _cpct_setPALColour
                             27 	.globl _cpct_setPalette
                             28 	.globl _cpct_waitVSYNC
                             29 	.globl _cpct_setVideoMode
                             30 	.globl _cpct_hflipSpriteM0
                             31 	.globl _cpct_drawSpriteMasked
                             32 	.globl _cpct_drawSprite
                             33 	.globl _cpct_isAnyKeyPressed_f
                             34 	.globl _cpct_scanKeyboard_f
                             35 	.globl _cpct_setStackLocation
                             36 	.globl _cpct_memcpy
                             37 	.globl _cpct_memset_f64
                             38 	.globl _cpct_disableFirmware
                             39 	.globl _intCounter
                             40 	.globl _screen_plot_address
                             41 	.globl _screen_location
                             42 	.globl _g_items_0
                             43 ;--------------------------------------------------------
                             44 ; special function registers
                             45 ;--------------------------------------------------------
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DATA
   0000                      50 _screen_location::
   0000                      51 	.ds 2
   0002                      52 _screen_plot_address::
   0002                      53 	.ds 2
                             54 ;--------------------------------------------------------
                             55 ; ram data
                             56 ;--------------------------------------------------------
                             57 	.area _INITIALIZED
   0000                      58 _intCounter::
   0000                      59 	.ds 1
                             60 ;--------------------------------------------------------
                             61 ; absolute external ram data
                             62 ;--------------------------------------------------------
                             63 	.area _DABS (ABS)
                             64 ;--------------------------------------------------------
                             65 ; global & static initialisations
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _GSINIT
                             69 	.area _GSFINAL
                             70 	.area _GSINIT
                             71 ;--------------------------------------------------------
                             72 ; Home
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _HOME
                             76 ;--------------------------------------------------------
                             77 ; code
                             78 ;--------------------------------------------------------
                             79 	.area _CODE
                             80 ;src/main.c:45: void crtc(u8* R12R13) {
                             81 ;	---------------------------------
                             82 ; Function crtc
                             83 ; ---------------------------------
   0000                      84 _crtc::
                             85 ;src/main.c:62: __endasm;
   0000 DD E5         [15]   86 	push	ix
   0002 DD 21 00 00   [14]   87 	ld	ix,#0
   0006 DD 39         [15]   88 	add	ix,sp
   0008 DD 66 05      [19]   89 	ld	h, 5 (ix)
   000B DD 6E 04      [19]   90 	ld	l, 4 (ix)
   000E 01 0C BC      [10]   91 	ld	bc,#0xbc00+12
   0011 ED 49         [12]   92 	out	(c),c
   0013 04            [ 4]   93 	inc	b
   0014 ED 61         [12]   94 	out	(c),h
   0016 05            [ 4]   95 	dec	b
   0017 0C            [ 4]   96 	inc	c
   0018 ED 49         [12]   97 	out	(c),c
   001A 04            [ 4]   98 	inc	b
   001B ED 69         [12]   99 	out	(c),l
   001D DD E1         [14]  100 	pop	ix
   001F C9            [10]  101 	ret
   0020                     102 _g_items_0:
   0020 05                  103 	.db #0x05	; 5
   0021 0F                  104 	.db #0x0f	; 15
   0022 0F                  105 	.db #0x0f	; 15
   0023 00                  106 	.db #0x00	; 0
   0024 0F                  107 	.db #0x0f	; 15
   0025 0F                  108 	.db #0x0f	; 15
   0026 0F                  109 	.db #0x0f	; 15
   0027 0A                  110 	.db #0x0a	; 10
   0028 0F                  111 	.db #0x0f	; 15
   0029 0A                  112 	.db #0x0a	; 10
   002A 05                  113 	.db #0x05	; 5
   002B 00                  114 	.db #0x00	; 0
   002C 0F                  115 	.db #0x0f	; 15
   002D 0A                  116 	.db #0x0a	; 10
   002E 05                  117 	.db #0x05	; 5
   002F 00                  118 	.db #0x00	; 0
   0030 05                  119 	.db #0x05	; 5
   0031 0F                  120 	.db #0x0f	; 15
   0032 0A                  121 	.db #0x0a	; 10
   0033 0A                  122 	.db #0x0a	; 10
   0034 00                  123 	.db #0x00	; 0
   0035 0F                  124 	.db #0x0f	; 15
   0036 0F                  125 	.db #0x0f	; 15
   0037 0A                  126 	.db #0x0a	; 10
   0038 00                  127 	.db #0x00	; 0
   0039 0A                  128 	.db #0x0a	; 10
   003A 0A                  129 	.db #0x0a	; 10
   003B 0A                  130 	.db #0x0a	; 10
   003C 00                  131 	.db #0x00	; 0
   003D 00                  132 	.db #0x00	; 0
   003E 00                  133 	.db #0x00	; 0
   003F 00                  134 	.db #0x00	; 0
                            135 ;src/main.c:73: void myInterruptHandler() {
                            136 ;	---------------------------------
                            137 ; Function myInterruptHandler
                            138 ; ---------------------------------
   0040                     139 _myInterruptHandler::
                            140 ;src/main.c:76: intCounter=intCounter+1;
   0040 FD 21r00r00   [14]  141 	ld	iy, #_intCounter
   0044 FD 34 00      [23]  142 	inc	0 (iy)
                            143 ;src/main.c:77: if (intCounter == 6) intCounter=0;
   0047 FD 7E 00      [19]  144 	ld	a, 0 (iy)
   004A D6 06         [ 7]  145 	sub	a, #0x06
   004C 20 04         [12]  146 	jr	NZ,00102$
   004E FD 36 00 00   [19]  147 	ld	0 (iy), #0x00
   0052                     148 00102$:
                            149 ;src/main.c:79: if (intCounter == 2) {
   0052 3Ar00r00      [13]  150 	ld	a,(#_intCounter + 0)
   0055 D6 02         [ 7]  151 	sub	a, #0x02
   0057 20 09         [12]  152 	jr	NZ,00104$
                            153 ;src/main.c:80: cpct_setBorder(2);
   0059 21 10 02      [10]  154 	ld	hl, #0x0210
   005C E5            [11]  155 	push	hl
   005D CDr00r00      [17]  156 	call	_cpct_setPALColour
   0060 18 07         [12]  157 	jr	00105$
   0062                     158 00104$:
                            159 ;src/main.c:82: cpct_setBorder(3);
   0062 21 10 03      [10]  160 	ld	hl, #0x0310
   0065 E5            [11]  161 	push	hl
   0066 CDr00r00      [17]  162 	call	_cpct_setPALColour
   0069                     163 00105$:
                            164 ;src/main.c:85: if (intCounter==5) {
   0069 FD 21r00r00   [14]  165 	ld	iy, #_intCounter
   006D FD 7E 00      [19]  166 	ld	a, 0 (iy)
   0070 D6 05         [ 7]  167 	sub	a, #0x05
   0072 20 1D         [12]  168 	jr	NZ,00107$
                            169 ;src/main.c:91: __endasm;
   0074 01 06 BC      [10]  170 	ld	bc,#0xbc06
   0077 ED 49         [12]  171 	out	(c),c
   0079 01 04 BD      [10]  172 	ld	bc,#0xbd04
   007C ED 49         [12]  173 	out	(c),c
                            174 ;src/main.c:93: crtc(screen_location);
   007E 2Ar00r00      [16]  175 	ld	hl, (_screen_location)
   0081 E5            [11]  176 	push	hl
   0082 CDr00r00      [17]  177 	call	_crtc
   0085 F1            [10]  178 	pop	af
                            179 ;src/main.c:95: killVBL();
   0086 CDr00r00      [17]  180 	call	_killVBL
                            181 ;src/main.c:96: rupture(19-1);
   0089 3E 12         [ 7]  182 	ld	a, #0x12
   008B F5            [11]  183 	push	af
   008C 33            [ 6]  184 	inc	sp
   008D CDr00r00      [17]  185 	call	_rupture
   0090 33            [ 6]  186 	inc	sp
   0091                     187 00107$:
                            188 ;src/main.c:100: if (intCounter==2) {
   0091 FD 21r00r00   [14]  189 	ld	iy, #_intCounter
   0095 FD 7E 00      [19]  190 	ld	a, 0 (iy)
   0098 D6 02         [ 7]  191 	sub	a, #0x02
   009A 20 1C         [12]  192 	jr	NZ,00109$
                            193 ;src/main.c:106: __endasm;
   009C 01 06 BC      [10]  194 	ld	bc,#0xbc06
   009F ED 49         [12]  195 	out	(c),c
   00A1 01 19 BD      [10]  196 	ld	bc,#0xbd19
   00A4 ED 49         [12]  197 	out	(c),c
                            198 ;src/main.c:107: cpct_setVideoMemoryPage(cpct_pageC0);
   00A6 2E 30         [ 7]  199 	ld	l, #0x30
   00A8 CDr00r00      [17]  200 	call	_cpct_setVideoMemoryPage
                            201 ;src/main.c:108: cpct_setVideoMemoryOffset(0);
   00AB 2E 00         [ 7]  202 	ld	l, #0x00
   00AD CDr00r00      [17]  203 	call	_cpct_setVideoMemoryOffset
                            204 ;src/main.c:109: rupture(7);
   00B0 3E 07         [ 7]  205 	ld	a, #0x07
   00B2 F5            [11]  206 	push	af
   00B3 33            [ 6]  207 	inc	sp
   00B4 CDr00r00      [17]  208 	call	_rupture
   00B7 33            [ 6]  209 	inc	sp
   00B8                     210 00109$:
                            211 ;src/main.c:112: if (intCounter==3) {
   00B8 3Ar00r00      [13]  212 	ld	a,(#_intCounter + 0)
   00BB D6 03         [ 7]  213 	sub	a, #0x03
   00BD 20 15         [12]  214 	jr	NZ,00111$
                            215 ;src/main.c:113: cpct_setVideoMemoryPage(cpct_pageC0);
   00BF 2E 30         [ 7]  216 	ld	l, #0x30
   00C1 CDr00r00      [17]  217 	call	_cpct_setVideoMemoryPage
                            218 ;src/main.c:114: cpct_setVideoMemoryOffset(0);
   00C4 2E 00         [ 7]  219 	ld	l, #0x00
   00C6 CDr00r00      [17]  220 	call	_cpct_setVideoMemoryOffset
                            221 ;src/main.c:115: restoreVBL();
   00C9 CDr00r00      [17]  222 	call	_restoreVBL
                            223 ;src/main.c:116: rupture(39-19-7+1);
   00CC 3E 0E         [ 7]  224 	ld	a, #0x0e
   00CE F5            [11]  225 	push	af
   00CF 33            [ 6]  226 	inc	sp
   00D0 CDr00r00      [17]  227 	call	_rupture
   00D3 33            [ 6]  228 	inc	sp
   00D4                     229 00111$:
                            230 ;src/main.c:120: if (intCounter==4) {
   00D4 3Ar00r00      [13]  231 	ld	a,(#_intCounter + 0)
   00D7 D6 04         [ 7]  232 	sub	a, #0x04
   00D9 C0            [11]  233 	ret	NZ
                            234 ;src/main.c:121: bank7_C000();
   00DA CDr00r00      [17]  235 	call	_bank7_C000
                            236 ;src/main.c:122: akp_musicPlay();
   00DD CDr00r00      [17]  237 	call	_akp_musicPlay
                            238 ;src/main.c:123: bank0123();
   00E0 CDr00r00      [17]  239 	call	_bank0123
   00E3 C9            [10]  240 	ret
                            241 ;src/main.c:130: void main(void) {
                            242 ;	---------------------------------
                            243 ; Function main
                            244 ; ---------------------------------
   00E4                     245 _main::
                            246 ;src/main.c:134: u8* sprite=g_items_0;
                            247 ;src/main.c:137: bank7_C000();
   00E4 CDr00r00      [17]  248 	call	_bank7_C000
                            249 ;src/main.c:138: akp_musicInit();
   00E7 CDr00r00      [17]  250 	call	_akp_musicInit
                            251 ;src/main.c:139: bank0123();
   00EA CDr00r00      [17]  252 	call	_bank0123
                            253 ;src/main.c:142: cpct_disableFirmware();
   00ED CDr00r00      [17]  254 	call	_cpct_disableFirmware
                            255 ;src/main.c:143: cpct_memcpy(0x6000,0x8000,0x2000);// la pile peut etre négative...
   00F0 21 00 20      [10]  256 	ld	hl, #0x2000
   00F3 E5            [11]  257 	push	hl
   00F4 26 80         [ 7]  258 	ld	h, #0x80
   00F6 E5            [11]  259 	push	hl
   00F7 26 60         [ 7]  260 	ld	h, #0x60
   00F9 E5            [11]  261 	push	hl
   00FA CDr00r00      [17]  262 	call	_cpct_memcpy
                            263 ;src/main.c:144: cpct_setStackLocation(0x6000);
   00FD 21 00 60      [10]  264 	ld	hl, #0x6000
   0100 CDr00r00      [17]  265 	call	_cpct_setStackLocation
                            266 ;src/main.c:145: cpct_memset_f64(0x8000, 0xFFFF, 0x4000);
   0103 21 00 40      [10]  267 	ld	hl, #0x4000
   0106 E5            [11]  268 	push	hl
   0107 21 FF FF      [10]  269 	ld	hl, #0xffff
   010A E5            [11]  270 	push	hl
   010B 21 00 80      [10]  271 	ld	hl, #0x8000
   010E E5            [11]  272 	push	hl
   010F CDr00r00      [17]  273 	call	_cpct_memset_f64
                            274 ;src/main.c:147: bank0123();
   0112 CDr00r00      [17]  275 	call	_bank0123
                            276 ;src/main.c:148: cpct_setVideoMode(0);
   0115 2E 00         [ 7]  277 	ld	l, #0x00
   0117 CDr00r00      [17]  278 	call	_cpct_setVideoMode
                            279 ;src/main.c:149: cpct_setBorder(HW_BLACK);
   011A 21 10 14      [10]  280 	ld	hl, #0x1410
   011D E5            [11]  281 	push	hl
   011E CDr00r00      [17]  282 	call	_cpct_setPALColour
                            283 ;src/main.c:150: cpct_setPalette(g_tile_palette, 6);
   0121 21 06 00      [10]  284 	ld	hl, #0x0006
   0124 E5            [11]  285 	push	hl
   0125 21r00r00      [10]  286 	ld	hl, #_g_tile_palette
   0128 E5            [11]  287 	push	hl
   0129 CDr00r00      [17]  288 	call	_cpct_setPalette
                            289 ;src/main.c:153: p = cpct_getScreenPtr(CPCT_VMEM_START, 9,110);
   012C 21 09 6E      [10]  290 	ld	hl, #0x6e09
   012F E5            [11]  291 	push	hl
   0130 21 00 C0      [10]  292 	ld	hl, #0xc000
   0133 E5            [11]  293 	push	hl
   0134 CDr00r00      [17]  294 	call	_cpct_getScreenPtr
                            295 ;src/main.c:154: cpct_hflipSpriteM0(4, 8, sprite);
   0137 01r20r00      [10]  296 	ld	bc, #_g_items_0
   013A E5            [11]  297 	push	hl
   013B C5            [11]  298 	push	bc
   013C C5            [11]  299 	push	bc
   013D 11 04 08      [10]  300 	ld	de, #0x0804
   0140 D5            [11]  301 	push	de
   0141 CDr00r00      [17]  302 	call	_cpct_hflipSpriteM0
   0144 C1            [10]  303 	pop	bc
   0145 E1            [10]  304 	pop	hl
                            305 ;src/main.c:155: cpct_drawSprite(sprite, p, 4, 8);
   0146 11 04 08      [10]  306 	ld	de, #0x0804
   0149 D5            [11]  307 	push	de
   014A E5            [11]  308 	push	hl
   014B C5            [11]  309 	push	bc
   014C CDr00r00      [17]  310 	call	_cpct_drawSprite
                            311 ;src/main.c:158: p = cpct_getScreenPtr(CPCT_VMEM_START, 10,96);
   014F 21 0A 60      [10]  312 	ld	hl, #0x600a
   0152 E5            [11]  313 	push	hl
   0153 21 00 C0      [10]  314 	ld	hl, #0xc000
   0156 E5            [11]  315 	push	hl
   0157 CDr00r00      [17]  316 	call	_cpct_getScreenPtr
                            317 ;src/main.c:159: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   015A 01r00r00      [10]  318 	ld	bc, #_g_tile_schtroumpf+0
   015D 11 10 20      [10]  319 	ld	de, #0x2010
   0160 D5            [11]  320 	push	de
   0161 E5            [11]  321 	push	hl
   0162 C5            [11]  322 	push	bc
   0163 CDr00r00      [17]  323 	call	_cpct_drawSpriteMasked
                            324 ;src/main.c:161: calque8000();
   0166 CDr00r00      [17]  325 	call	_calque8000
                            326 ;src/main.c:164: screen_location=(u8 *)(0x2000);
   0169 21 00 20      [10]  327 	ld	hl, #0x2000
   016C 22r00r00      [16]  328 	ld	(_screen_location), hl
                            329 ;src/main.c:165: screen_plot_address=(u8 *)(0x8000+80-2);
   016F 21 4E 80      [10]  330 	ld	hl, #0x804e
   0172 22r02r00      [16]  331 	ld	(_screen_plot_address), hl
                            332 ;src/main.c:169: while (1) {
   0175 01 00 00      [10]  333 	ld	bc, #0x0000
   0178                     334 00104$:
                            335 ;src/main.c:170: cpct_waitVSYNC();
   0178 C5            [11]  336 	push	bc
   0179 CDr00r00      [17]  337 	call	_cpct_waitVSYNC
   017C C1            [10]  338 	pop	bc
                            339 ;src/main.c:172: screen_location++;
   017D FD 21r00r00   [14]  340 	ld	iy, #_screen_location
   0181 FD 34 00      [23]  341 	inc	0 (iy)
   0184 20 03         [12]  342 	jr	NZ,00116$
   0186 FD 34 01      [23]  343 	inc	1 (iy)
   0189                     344 00116$:
                            345 ;src/main.c:173: screen_location=(u8 *)(((u16)screen_location) & 0x23FF);
   0189 2Ar00r00      [16]  346 	ld	hl, (_screen_location)
   018C 7C            [ 4]  347 	ld	a, h
   018D E6 23         [ 7]  348 	and	a, #0x23
   018F 67            [ 4]  349 	ld	h, a
   0190 22r00r00      [16]  350 	ld	(_screen_location), hl
                            351 ;src/main.c:175: crtc(screen_location);
   0193 C5            [11]  352 	push	bc
   0194 2Ar00r00      [16]  353 	ld	hl, (_screen_location)
   0197 E5            [11]  354 	push	hl
   0198 CDr00r00      [17]  355 	call	_crtc
   019B F1            [10]  356 	pop	af
   019C C1            [10]  357 	pop	bc
                            358 ;src/main.c:177: screen_plot_address+=2;
   019D 21r02r00      [10]  359 	ld	hl, #_screen_plot_address
   01A0 7E            [ 7]  360 	ld	a, (hl)
   01A1 C6 02         [ 7]  361 	add	a, #0x02
   01A3 77            [ 7]  362 	ld	(hl), a
   01A4 23            [ 6]  363 	inc	hl
   01A5 7E            [ 7]  364 	ld	a, (hl)
   01A6 CE 00         [ 7]  365 	adc	a, #0x00
   01A8 77            [ 7]  366 	ld	(hl), a
                            367 ;src/main.c:178: screen_plot_address=(u8 *)(((u16)screen_plot_address) & 0x87FF);
   01A9 2Ar02r00      [16]  368 	ld	hl, (_screen_plot_address)
   01AC 7C            [ 4]  369 	ld	a, h
   01AD E6 87         [ 7]  370 	and	a, #0x87
   01AF 67            [ 4]  371 	ld	h, a
   01B0 22r02r00      [16]  372 	ld	(_screen_plot_address), hl
                            373 ;src/main.c:184: scroll_hard(t,screen_plot_address);
   01B3 C5            [11]  374 	push	bc
   01B4 2Ar02r00      [16]  375 	ld	hl, (_screen_plot_address)
   01B7 E5            [11]  376 	push	hl
   01B8 C5            [11]  377 	push	bc
   01B9 CDr00r00      [17]  378 	call	_scroll_hard
   01BC F1            [10]  379 	pop	af
   01BD F1            [10]  380 	pop	af
   01BE C1            [10]  381 	pop	bc
                            382 ;src/main.c:186: t=t+1;
   01BF 03            [ 6]  383 	inc	bc
                            384 ;src/main.c:188: cpct_scanKeyboard_f();
   01C0 C5            [11]  385 	push	bc
   01C1 CDr00r00      [17]  386 	call	_cpct_scanKeyboard_f
   01C4 CDr00r00      [17]  387 	call	_cpct_isAnyKeyPressed_f
   01C7 C1            [10]  388 	pop	bc
   01C8 7D            [ 4]  389 	ld	a, l
   01C9 B7            [ 4]  390 	or	a, a
   01CA 28 AC         [12]  391 	jr	Z,00104$
                            392 ;src/main.c:190: cpct_memset_f64(0x8000, 0x0000, 0x4000);
   01CC C5            [11]  393 	push	bc
   01CD 21 00 40      [10]  394 	ld	hl, #0x4000
   01D0 E5            [11]  395 	push	hl
   01D1 26 00         [ 7]  396 	ld	h, #0x00
   01D3 E5            [11]  397 	push	hl
   01D4 26 80         [ 7]  398 	ld	h, #0x80
   01D6 E5            [11]  399 	push	hl
   01D7 CDr00r00      [17]  400 	call	_cpct_memset_f64
   01DA C1            [10]  401 	pop	bc
   01DB 18 9B         [12]  402 	jr	00104$
                            403 	.area _CODE
                            404 	.area _INITIALIZER
   0000                     405 __xinit__intCounter:
   0000 00                  406 	.db #0x00	; 0
                            407 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _bank4_4000
                             14 	.globl _bank0123
                             15 	.globl _calque4000
                             16 	.globl _calqueC000
                             17 	.globl _vsync
                             18 	.globl _akp_musicPlay
                             19 	.globl _akp_musicInit
                             20 	.globl _rupture
                             21 	.globl _restoreVBL
                             22 	.globl _killVBL
                             23 	.globl _scroll
                             24 	.globl _cpct_restoreState_mxor_u8
                             25 	.globl _cpct_setSeed_mxor
                             26 	.globl _cpct_getScreenPtr
                             27 	.globl _cpct_setVideoMemoryOffset
                             28 	.globl _cpct_setPALColour
                             29 	.globl _cpct_setPalette
                             30 	.globl _cpct_setVideoMode
                             31 	.globl _cpct_hflipSpriteM0
                             32 	.globl _cpct_drawSolidBox
                             33 	.globl _cpct_drawSpriteMasked
                             34 	.globl _cpct_drawSprite
                             35 	.globl _cpct_px2byteM0
                             36 	.globl _cpct_isKeyPressed
                             37 	.globl _cpct_scanKeyboard_f
                             38 	.globl _cpct_memset_f64
                             39 	.globl _cpct_memset
                             40 	.globl _cpct_setInterruptHandler
                             41 	.globl _intCounter
                             42 	.globl _g_items_0
                             43 ;--------------------------------------------------------
                             44 ; special function registers
                             45 ;--------------------------------------------------------
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DATA
                             50 ;--------------------------------------------------------
                             51 ; ram data
                             52 ;--------------------------------------------------------
                             53 	.area _INITIALIZED
   0000                      54 _intCounter::
   0000                      55 	.ds 1
                             56 ;--------------------------------------------------------
                             57 ; absolute external ram data
                             58 ;--------------------------------------------------------
                             59 	.area _DABS (ABS)
                             60 ;--------------------------------------------------------
                             61 ; global & static initialisations
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _GSINIT
                             65 	.area _GSFINAL
                             66 	.area _GSINIT
                             67 ;--------------------------------------------------------
                             68 ; Home
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _HOME
                             72 ;--------------------------------------------------------
                             73 ; code
                             74 ;--------------------------------------------------------
                             75 	.area _CODE
                             76 ;src/main.c:45: void myInterruptHandler() {
                             77 ;	---------------------------------
                             78 ; Function myInterruptHandler
                             79 ; ---------------------------------
   0000                      80 _myInterruptHandler::
                             81 ;src/main.c:46: intCounter=intCounter+1;
   0000 FD 21r00r00   [14]   82 	ld	iy, #_intCounter
   0004 FD 34 00      [23]   83 	inc	0 (iy)
                             84 ;src/main.c:47: if (intCounter == 6) intCounter=0;
   0007 FD 7E 00      [19]   85 	ld	a, 0 (iy)
   000A D6 06         [ 7]   86 	sub	a, #0x06
   000C 20 04         [12]   87 	jr	NZ,00102$
   000E FD 36 00 00   [19]   88 	ld	0 (iy), #0x00
   0012                      89 00102$:
                             90 ;src/main.c:49: if (intCounter == 2) {
   0012 3Ar00r00      [13]   91 	ld	a,(#_intCounter + 0)
   0015 D6 02         [ 7]   92 	sub	a, #0x02
   0017 20 09         [12]   93 	jr	NZ,00104$
                             94 ;src/main.c:50: cpct_setBorder(2);
   0019 21 10 02      [10]   95 	ld	hl, #0x0210
   001C E5            [11]   96 	push	hl
   001D CDr00r00      [17]   97 	call	_cpct_setPALColour
   0020 18 07         [12]   98 	jr	00105$
   0022                      99 00104$:
                            100 ;src/main.c:52: cpct_setBorder(3);
   0022 21 10 03      [10]  101 	ld	hl, #0x0310
   0025 E5            [11]  102 	push	hl
   0026 CDr00r00      [17]  103 	call	_cpct_setPALColour
   0029                     104 00105$:
                            105 ;src/main.c:56: if (intCounter==2) {
   0029 3Ar00r00      [13]  106 	ld	a,(#_intCounter + 0)
   002C D6 02         [ 7]  107 	sub	a, #0x02
   002E 20 03         [12]  108 	jr	NZ,00107$
                            109 ;src/main.c:57: akp_musicPlay();
   0030 CDr00r00      [17]  110 	call	_akp_musicPlay
   0033                     111 00107$:
                            112 ;src/main.c:61: if (intCounter==5) {
   0033 3Ar00r00      [13]  113 	ld	a,(#_intCounter + 0)
   0036 D6 05         [ 7]  114 	sub	a, #0x05
   0038 20 0B         [12]  115 	jr	NZ,00109$
                            116 ;src/main.c:62: killVBL();
   003A CDr00r00      [17]  117 	call	_killVBL
                            118 ;src/main.c:63: rupture(19);
   003D 3E 13         [ 7]  119 	ld	a, #0x13
   003F F5            [11]  120 	push	af
   0040 33            [ 6]  121 	inc	sp
   0041 CDr00r00      [17]  122 	call	_rupture
   0044 33            [ 6]  123 	inc	sp
   0045                     124 00109$:
                            125 ;src/main.c:66: if (intCounter==2) {
   0045 3Ar00r00      [13]  126 	ld	a,(#_intCounter + 0)
   0048 D6 02         [ 7]  127 	sub	a, #0x02
   004A C0            [11]  128 	ret	NZ
                            129 ;src/main.c:67: restoreVBL();
   004B CDr00r00      [17]  130 	call	_restoreVBL
                            131 ;src/main.c:68: rupture(39-19);
   004E 3E 14         [ 7]  132 	ld	a, #0x14
   0050 F5            [11]  133 	push	af
   0051 33            [ 6]  134 	inc	sp
   0052 CDr00r00      [17]  135 	call	_rupture
   0055 33            [ 6]  136 	inc	sp
   0056 C9            [10]  137 	ret
   0057                     138 _g_items_0:
   0057 05                  139 	.db #0x05	; 5
   0058 0F                  140 	.db #0x0f	; 15
   0059 0F                  141 	.db #0x0f	; 15
   005A 00                  142 	.db #0x00	; 0
   005B 0F                  143 	.db #0x0f	; 15
   005C 0F                  144 	.db #0x0f	; 15
   005D 0F                  145 	.db #0x0f	; 15
   005E 0A                  146 	.db #0x0a	; 10
   005F 0F                  147 	.db #0x0f	; 15
   0060 0A                  148 	.db #0x0a	; 10
   0061 05                  149 	.db #0x05	; 5
   0062 00                  150 	.db #0x00	; 0
   0063 0F                  151 	.db #0x0f	; 15
   0064 0A                  152 	.db #0x0a	; 10
   0065 05                  153 	.db #0x05	; 5
   0066 00                  154 	.db #0x00	; 0
   0067 05                  155 	.db #0x05	; 5
   0068 0F                  156 	.db #0x0f	; 15
   0069 0A                  157 	.db #0x0a	; 10
   006A 0A                  158 	.db #0x0a	; 10
   006B 00                  159 	.db #0x00	; 0
   006C 0F                  160 	.db #0x0f	; 15
   006D 0F                  161 	.db #0x0f	; 15
   006E 0A                  162 	.db #0x0a	; 10
   006F 00                  163 	.db #0x00	; 0
   0070 0A                  164 	.db #0x0a	; 10
   0071 0A                  165 	.db #0x0a	; 10
   0072 0A                  166 	.db #0x0a	; 10
   0073 00                  167 	.db #0x00	; 0
   0074 00                  168 	.db #0x00	; 0
   0075 00                  169 	.db #0x00	; 0
   0076 00                  170 	.db #0x00	; 0
                            171 ;src/main.c:73: void main(void) {
                            172 ;	---------------------------------
                            173 ; Function main
                            174 ; ---------------------------------
   0077                     175 _main::
                            176 ;src/main.c:76: u8* sprite=g_items_0;
                            177 ;src/main.c:87: akp_musicInit();
   0077 CDr00r00      [17]  178 	call	_akp_musicInit
                            179 ;src/main.c:92: cpct_setInterruptHandler(myInterruptHandler);
   007A 21r00r00      [10]  180 	ld	hl, #_myInterruptHandler
   007D CDr00r00      [17]  181 	call	_cpct_setInterruptHandler
                            182 ;src/main.c:96: bank4_4000();
   0080 CDr00r00      [17]  183 	call	_bank4_4000
                            184 ;src/main.c:97: bank0123();
   0083 CDr00r00      [17]  185 	call	_bank0123
                            186 ;src/main.c:98: calqueC000();
   0086 CDr00r00      [17]  187 	call	_calqueC000
                            188 ;src/main.c:101: cpct_setVideoMode(0);
   0089 2E 00         [ 7]  189 	ld	l, #0x00
   008B CDr00r00      [17]  190 	call	_cpct_setVideoMode
                            191 ;src/main.c:104: cpct_setBorder(HW_BLACK);
   008E 21 10 14      [10]  192 	ld	hl, #0x1410
   0091 E5            [11]  193 	push	hl
   0092 CDr00r00      [17]  194 	call	_cpct_setPALColour
                            195 ;src/main.c:105: cpct_setPalette(g_tile_palette, 6);
   0095 21 06 00      [10]  196 	ld	hl, #0x0006
   0098 E5            [11]  197 	push	hl
   0099 21r00r00      [10]  198 	ld	hl, #_g_tile_palette
   009C E5            [11]  199 	push	hl
   009D CDr00r00      [17]  200 	call	_cpct_setPalette
                            201 ;src/main.c:106: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   00A0 21 00 40      [10]  202 	ld	hl, #0x4000
   00A3 E5            [11]  203 	push	hl
   00A4 AF            [ 4]  204 	xor	a, a
   00A5 F5            [11]  205 	push	af
   00A6 33            [ 6]  206 	inc	sp
   00A7 26 C0         [ 7]  207 	ld	h, #0xc0
   00A9 E5            [11]  208 	push	hl
   00AA CDr00r00      [17]  209 	call	_cpct_memset
                            210 ;src/main.c:112: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   00AD 21 0F 0F      [10]  211 	ld	hl, #0x0f0f
   00B0 E5            [11]  212 	push	hl
   00B1 21 00 C0      [10]  213 	ld	hl, #0xc000
   00B4 E5            [11]  214 	push	hl
   00B5 CDr00r00      [17]  215 	call	_cpct_getScreenPtr
                            216 ;src/main.c:113: cpct_drawSprite(sprite, p, 4, 8);
   00B8 E5            [11]  217 	push	hl
   00B9 01 04 08      [10]  218 	ld	bc, #0x0804
   00BC C5            [11]  219 	push	bc
   00BD E5            [11]  220 	push	hl
   00BE 01r57r00      [10]  221 	ld	bc, #_g_items_0
   00C1 C5            [11]  222 	push	bc
   00C2 CDr00r00      [17]  223 	call	_cpct_drawSprite
   00C5 01 00 20      [10]  224 	ld	bc, #0x2000
   00C8 C5            [11]  225 	push	bc
   00C9 01 FF FF      [10]  226 	ld	bc, #0xffff
   00CC C5            [11]  227 	push	bc
   00CD 01 00 C0      [10]  228 	ld	bc, #0xc000
   00D0 C5            [11]  229 	push	bc
   00D1 CDr00r00      [17]  230 	call	_cpct_memset_f64
   00D4 01r57r00      [10]  231 	ld	bc, #_g_items_0
   00D7 C5            [11]  232 	push	bc
   00D8 01 04 08      [10]  233 	ld	bc, #0x0804
   00DB C5            [11]  234 	push	bc
   00DC CDr00r00      [17]  235 	call	_cpct_hflipSpriteM0
   00DF E1            [10]  236 	pop	hl
                            237 ;src/main.c:121: cpct_drawSprite(sprite, p, 4, 8);
   00E0 01 04 08      [10]  238 	ld	bc, #0x0804
   00E3 C5            [11]  239 	push	bc
   00E4 E5            [11]  240 	push	hl
   00E5 21r57r00      [10]  241 	ld	hl, #_g_items_0
   00E8 E5            [11]  242 	push	hl
   00E9 CDr00r00      [17]  243 	call	_cpct_drawSprite
                            244 ;src/main.c:123: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   00EC 21 0F 1F      [10]  245 	ld	hl, #0x1f0f
   00EF E5            [11]  246 	push	hl
   00F0 21 00 C0      [10]  247 	ld	hl, #0xc000
   00F3 E5            [11]  248 	push	hl
   00F4 CDr00r00      [17]  249 	call	_cpct_getScreenPtr
                            250 ;src/main.c:125: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   00F7 E5            [11]  251 	push	hl
   00F8 21 02 03      [10]  252 	ld	hl, #0x0302
   00FB E5            [11]  253 	push	hl
   00FC CDr00r00      [17]  254 	call	_cpct_px2byteM0
   00FF 55            [ 4]  255 	ld	d, l
   0100 C1            [10]  256 	pop	bc
   0101 21 0A 14      [10]  257 	ld	hl, #0x140a
   0104 E5            [11]  258 	push	hl
   0105 D5            [11]  259 	push	de
   0106 33            [ 6]  260 	inc	sp
   0107 C5            [11]  261 	push	bc
   0108 CDr00r00      [17]  262 	call	_cpct_drawSolidBox
   010B F1            [10]  263 	pop	af
                            264 ;src/main.c:128: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   010C 33            [ 6]  265 	inc	sp
   010D 21 09 4F      [10]  266 	ld	hl,#0x4f09
   0110 E3            [19]  267 	ex	(sp),hl
   0111 21 00 C0      [10]  268 	ld	hl, #0xc000
   0114 E5            [11]  269 	push	hl
   0115 CDr00r00      [17]  270 	call	_cpct_getScreenPtr
                            271 ;src/main.c:129: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   0118 01r00r00      [10]  272 	ld	bc, #_g_tile_schtroumpf+0
   011B 11 10 20      [10]  273 	ld	de, #0x2010
   011E D5            [11]  274 	push	de
   011F E5            [11]  275 	push	hl
   0120 C5            [11]  276 	push	bc
   0121 CDr00r00      [17]  277 	call	_cpct_drawSpriteMasked
                            278 ;src/main.c:143: cpct_srand(77);
   0124 21 4D 00      [10]  279 	ld	hl,#0x004d
   0127 11 00 00      [10]  280 	ld	de,#0x0000
   012A CDr00r00      [17]  281 	call	_cpct_setSeed_mxor
   012D CDr00r00      [17]  282 	call	_cpct_restoreState_mxor_u8
                            283 ;src/main.c:147: cpct_scanKeyboard_f();
   0130 CDr00r00      [17]  284 	call	_cpct_scanKeyboard_f
                            285 ;src/main.c:148: t=0;
   0133 01 00 00      [10]  286 	ld	bc, #0x0000
                            287 ;src/main.c:149: while (t%128!=0 || (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return))){
   0136                     288 00107$:
   0136 C5            [11]  289 	push	bc
   0137 21 80 00      [10]  290 	ld	hl, #0x0080
   013A E5            [11]  291 	push	hl
   013B C5            [11]  292 	push	bc
   013C CDr00r00      [17]  293 	call	__modsint
   013F F1            [10]  294 	pop	af
   0140 F1            [10]  295 	pop	af
   0141 C1            [10]  296 	pop	bc
   0142 7C            [ 4]  297 	ld	a, h
   0143 B5            [ 4]  298 	or	a,l
   0144 20 18         [12]  299 	jr	NZ,00108$
   0146 C5            [11]  300 	push	bc
   0147 21 00 40      [10]  301 	ld	hl, #0x4000
   014A CDr00r00      [17]  302 	call	_cpct_isKeyPressed
   014D C1            [10]  303 	pop	bc
   014E 7D            [ 4]  304 	ld	a, l
   014F B7            [ 4]  305 	or	a, a
   0150 20 48         [12]  306 	jr	NZ,00109$
   0152 C5            [11]  307 	push	bc
   0153 21 02 04      [10]  308 	ld	hl, #0x0402
   0156 CDr00r00      [17]  309 	call	_cpct_isKeyPressed
   0159 C1            [10]  310 	pop	bc
   015A 7D            [ 4]  311 	ld	a, l
   015B B7            [ 4]  312 	or	a, a
   015C 20 3C         [12]  313 	jr	NZ,00109$
   015E                     314 00108$:
                            315 ;src/main.c:150: scroll("WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR", 110, t);
   015E C5            [11]  316 	push	bc
   015F C5            [11]  317 	push	bc
   0160 21 6E 00      [10]  318 	ld	hl, #0x006e
   0163 E5            [11]  319 	push	hl
   0164 21rACr01      [10]  320 	ld	hl, #___str_0
   0167 E5            [11]  321 	push	hl
   0168 CDr00r00      [17]  322 	call	_scroll
   016B 21 06 00      [10]  323 	ld	hl, #6
   016E 39            [11]  324 	add	hl, sp
   016F F9            [ 6]  325 	ld	sp, hl
   0170 C1            [10]  326 	pop	bc
                            327 ;src/main.c:151: t=t+1;
   0171 03            [ 6]  328 	inc	bc
                            329 ;src/main.c:152: if (t>110*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   0172 3E EC         [ 7]  330 	ld	a, #0xec
   0174 B9            [ 4]  331 	cp	a, c
   0175 3E 04         [ 7]  332 	ld	a, #0x04
   0177 98            [ 4]  333 	sbc	a, b
   0178 E2r7Dr01      [10]  334 	jp	PO, 00139$
   017B EE 80         [ 7]  335 	xor	a, #0x80
   017D                     336 00139$:
   017D F2r83r01      [10]  337 	jp	P, 00102$
   0180 01 00 00      [10]  338 	ld	bc, #0x0000
   0183                     339 00102$:
                            340 ;src/main.c:153: if (t%128==0) {
   0183 C5            [11]  341 	push	bc
   0184 21 80 00      [10]  342 	ld	hl, #0x0080
   0187 E5            [11]  343 	push	hl
   0188 C5            [11]  344 	push	bc
   0189 CDr00r00      [17]  345 	call	__modsint
   018C F1            [10]  346 	pop	af
   018D F1            [10]  347 	pop	af
   018E C1            [10]  348 	pop	bc
   018F 7C            [ 4]  349 	ld	a, h
   0190 B5            [ 4]  350 	or	a,l
   0191 20 A3         [12]  351 	jr	NZ,00107$
                            352 ;src/main.c:154: cpct_scanKeyboard_f();
   0193 C5            [11]  353 	push	bc
   0194 CDr00r00      [17]  354 	call	_cpct_scanKeyboard_f
   0197 C1            [10]  355 	pop	bc
   0198 18 9C         [12]  356 	jr	00107$
   019A                     357 00109$:
                            358 ;src/main.c:160: cpct_setVideoMemoryOffset(0);
   019A 2E 00         [ 7]  359 	ld	l, #0x00
   019C CDr00r00      [17]  360 	call	_cpct_setVideoMemoryOffset
                            361 ;src/main.c:161: calque4000();
   019F CDr00r00      [17]  362 	call	_calque4000
                            363 ;src/main.c:163: while (1) {
   01A2                     364 00111$:
                            365 ;src/main.c:164: vsync();
   01A2 CDr00r00      [17]  366 	call	_vsync
                            367 ;src/main.c:165: intCounter=0;
   01A5 21r00r00      [10]  368 	ld	hl,#_intCounter + 0
   01A8 36 00         [10]  369 	ld	(hl), #0x00
   01AA 18 F6         [12]  370 	jr	00111$
   01AC                     371 ___str_0:
   01AC 57 45 20 57 49 53   372 	.ascii "WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS "
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        57 45 20 57 49 53
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
   01E8 57 45 20 57 49 53   373 	.ascii "WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR"
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        41 4E 44 20 41 20
        48 41 50 50 59 20
        4E 45 57 20 59 45
        41 52
   021A 00                  374 	.db 0x00
                            375 	.area _CODE
                            376 	.area _INITIALIZER
   0000                     377 __xinit__intCounter:
   0000 00                  378 	.db #0x00	; 0
                            379 	.area _CABS (ABS)

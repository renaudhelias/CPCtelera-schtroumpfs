                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _crtc
                             14 	.globl _bank7_C000
                             15 	.globl _bank0123
                             16 	.globl _calque8000
                             17 	.globl _calqueC000
                             18 	.globl _akp_musicPlay
                             19 	.globl _akp_musicInit
                             20 	.globl _scroll_hard
                             21 	.globl _rupture
                             22 	.globl _restoreVBL
                             23 	.globl _killVBL
                             24 	.globl _cpct_getScreenPtr
                             25 	.globl _cpct_setVideoMemoryOffset
                             26 	.globl _cpct_setPALColour
                             27 	.globl _cpct_setPalette
                             28 	.globl _cpct_waitVSYNC
                             29 	.globl _cpct_setVideoMode
                             30 	.globl _cpct_hflipSpriteM0
                             31 	.globl _cpct_drawSpriteMasked
                             32 	.globl _cpct_drawSprite
                             33 	.globl _cpct_setStackLocation
                             34 	.globl _cpct_memcpy
                             35 	.globl _cpct_memset_f64
                             36 	.globl _cpct_setInterruptHandler
                             37 	.globl _cpct_disableFirmware
                             38 	.globl _intCounter
                             39 	.globl _screen_plot_address
                             40 	.globl _screen_location
                             41 	.globl _g_items_0
                             42 ;--------------------------------------------------------
                             43 ; special function registers
                             44 ;--------------------------------------------------------
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _DATA
   0000                      49 _screen_location::
   0000                      50 	.ds 2
   0002                      51 _screen_plot_address::
   0002                      52 	.ds 2
                             53 ;--------------------------------------------------------
                             54 ; ram data
                             55 ;--------------------------------------------------------
                             56 	.area _INITIALIZED
   0000                      57 _intCounter::
   0000                      58 	.ds 1
                             59 ;--------------------------------------------------------
                             60 ; absolute external ram data
                             61 ;--------------------------------------------------------
                             62 	.area _DABS (ABS)
                             63 ;--------------------------------------------------------
                             64 ; global & static initialisations
                             65 ;--------------------------------------------------------
                             66 	.area _HOME
                             67 	.area _GSINIT
                             68 	.area _GSFINAL
                             69 	.area _GSINIT
                             70 ;--------------------------------------------------------
                             71 ; Home
                             72 ;--------------------------------------------------------
                             73 	.area _HOME
                             74 	.area _HOME
                             75 ;--------------------------------------------------------
                             76 ; code
                             77 ;--------------------------------------------------------
                             78 	.area _CODE
                             79 ;src/main.c:45: void crtc(u8* R12R13) {
                             80 ;	---------------------------------
                             81 ; Function crtc
                             82 ; ---------------------------------
   0000                      83 _crtc::
                             84 ;src/main.c:62: __endasm;
   0000 DD E5         [15]   85 	push	ix
   0002 DD 21 00 00   [14]   86 	ld	ix,#0
   0006 DD 39         [15]   87 	add	ix,sp
   0008 DD 66 05      [19]   88 	ld	h, 5 (ix)
   000B DD 6E 04      [19]   89 	ld	l, 4 (ix)
   000E 01 0C BC      [10]   90 	ld	bc,#0xbc00+12
   0011 ED 49         [12]   91 	out	(c),c
   0013 04            [ 4]   92 	inc	b
   0014 ED 61         [12]   93 	out	(c),h
   0016 05            [ 4]   94 	dec	b
   0017 0C            [ 4]   95 	inc	c
   0018 ED 49         [12]   96 	out	(c),c
   001A 04            [ 4]   97 	inc	b
   001B ED 69         [12]   98 	out	(c),l
   001D DD E1         [14]   99 	pop	ix
   001F C9            [10]  100 	ret
   0020                     101 _g_items_0:
   0020 05                  102 	.db #0x05	; 5
   0021 0F                  103 	.db #0x0f	; 15
   0022 0F                  104 	.db #0x0f	; 15
   0023 00                  105 	.db #0x00	; 0
   0024 0F                  106 	.db #0x0f	; 15
   0025 0F                  107 	.db #0x0f	; 15
   0026 0F                  108 	.db #0x0f	; 15
   0027 0A                  109 	.db #0x0a	; 10
   0028 0F                  110 	.db #0x0f	; 15
   0029 0A                  111 	.db #0x0a	; 10
   002A 05                  112 	.db #0x05	; 5
   002B 00                  113 	.db #0x00	; 0
   002C 0F                  114 	.db #0x0f	; 15
   002D 0A                  115 	.db #0x0a	; 10
   002E 05                  116 	.db #0x05	; 5
   002F 00                  117 	.db #0x00	; 0
   0030 05                  118 	.db #0x05	; 5
   0031 0F                  119 	.db #0x0f	; 15
   0032 0A                  120 	.db #0x0a	; 10
   0033 0A                  121 	.db #0x0a	; 10
   0034 00                  122 	.db #0x00	; 0
   0035 0F                  123 	.db #0x0f	; 15
   0036 0F                  124 	.db #0x0f	; 15
   0037 0A                  125 	.db #0x0a	; 10
   0038 00                  126 	.db #0x00	; 0
   0039 0A                  127 	.db #0x0a	; 10
   003A 0A                  128 	.db #0x0a	; 10
   003B 0A                  129 	.db #0x0a	; 10
   003C 00                  130 	.db #0x00	; 0
   003D 00                  131 	.db #0x00	; 0
   003E 00                  132 	.db #0x00	; 0
   003F 00                  133 	.db #0x00	; 0
                            134 ;src/main.c:72: void myInterruptHandler() {
                            135 ;	---------------------------------
                            136 ; Function myInterruptHandler
                            137 ; ---------------------------------
   0040                     138 _myInterruptHandler::
                            139 ;src/main.c:75: intCounter=intCounter+1;
   0040 FD 21r00r00   [14]  140 	ld	iy, #_intCounter
   0044 FD 34 00      [23]  141 	inc	0 (iy)
                            142 ;src/main.c:76: if (intCounter == 6) intCounter=0;
   0047 FD 7E 00      [19]  143 	ld	a, 0 (iy)
   004A D6 06         [ 7]  144 	sub	a, #0x06
   004C 20 04         [12]  145 	jr	NZ,00102$
   004E FD 36 00 00   [19]  146 	ld	0 (iy), #0x00
   0052                     147 00102$:
                            148 ;src/main.c:78: if (intCounter == 2) {
   0052 3Ar00r00      [13]  149 	ld	a,(#_intCounter + 0)
   0055 D6 02         [ 7]  150 	sub	a, #0x02
   0057 20 09         [12]  151 	jr	NZ,00104$
                            152 ;src/main.c:79: cpct_setBorder(2);
   0059 21 10 02      [10]  153 	ld	hl, #0x0210
   005C E5            [11]  154 	push	hl
   005D CDr00r00      [17]  155 	call	_cpct_setPALColour
   0060 18 07         [12]  156 	jr	00105$
   0062                     157 00104$:
                            158 ;src/main.c:81: cpct_setBorder(3);
   0062 21 10 03      [10]  159 	ld	hl, #0x0310
   0065 E5            [11]  160 	push	hl
   0066 CDr00r00      [17]  161 	call	_cpct_setPALColour
   0069                     162 00105$:
                            163 ;src/main.c:84: if (intCounter==5) {
   0069 FD 21r00r00   [14]  164 	ld	iy, #_intCounter
   006D FD 7E 00      [19]  165 	ld	a, 0 (iy)
   0070 D6 05         [ 7]  166 	sub	a, #0x05
   0072 20 5B         [12]  167 	jr	NZ,00107$
                            168 ;src/main.c:90: __endasm;
   0074 01 06 BC      [10]  169 	ld	bc,#0xbc06
   0077 ED 49         [12]  170 	out	(c),c
   0079 01 04 BD      [10]  171 	ld	bc,#0xbd04
   007C ED 49         [12]  172 	out	(c),c
                            173 ;src/main.c:92: screen_location++;
   007E FD 21r00r00   [14]  174 	ld	iy, #_screen_location
   0082 FD 34 00      [23]  175 	inc	0 (iy)
   0085 20 03         [12]  176 	jr	NZ,00146$
   0087 FD 34 01      [23]  177 	inc	1 (iy)
   008A                     178 00146$:
                            179 ;src/main.c:93: screen_location=(u8 *)(((unsigned int)screen_location) & 0x23FF);
   008A 2Ar00r00      [16]  180 	ld	hl, (_screen_location)
   008D 7C            [ 4]  181 	ld	a, h
   008E E6 23         [ 7]  182 	and	a, #0x23
   0090 67            [ 4]  183 	ld	h, a
   0091 22r00r00      [16]  184 	ld	(_screen_location), hl
                            185 ;src/main.c:94: crtc(screen_location);
   0094 2Ar00r00      [16]  186 	ld	hl, (_screen_location)
   0097 E5            [11]  187 	push	hl
   0098 CDr00r00      [17]  188 	call	_crtc
   009B F1            [10]  189 	pop	af
                            190 ;src/main.c:96: screen_plot_address++;
   009C FD 21r02r00   [14]  191 	ld	iy, #_screen_plot_address
   00A0 FD 34 00      [23]  192 	inc	0 (iy)
   00A3 20 03         [12]  193 	jr	NZ,00147$
   00A5 FD 34 01      [23]  194 	inc	1 (iy)
   00A8                     195 00147$:
                            196 ;src/main.c:97: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   00A8 2Ar02r00      [16]  197 	ld	hl, (_screen_plot_address)
   00AB 7C            [ 4]  198 	ld	a, h
   00AC E6 87         [ 7]  199 	and	a, #0x87
   00AE 67            [ 4]  200 	ld	h, a
   00AF 22r02r00      [16]  201 	ld	(_screen_plot_address), hl
                            202 ;src/main.c:98: screen_plot_address++;
   00B2 FD 34 00      [23]  203 	inc	0 (iy)
   00B5 20 03         [12]  204 	jr	NZ,00148$
   00B7 FD 34 01      [23]  205 	inc	1 (iy)
   00BA                     206 00148$:
                            207 ;src/main.c:99: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   00BA 2Ar02r00      [16]  208 	ld	hl, (_screen_plot_address)
   00BD 7C            [ 4]  209 	ld	a, h
   00BE E6 87         [ 7]  210 	and	a, #0x87
   00C0 67            [ 4]  211 	ld	h, a
   00C1 22r02r00      [16]  212 	ld	(_screen_plot_address), hl
                            213 ;src/main.c:102: killVBL();
   00C4 CDr00r00      [17]  214 	call	_killVBL
                            215 ;src/main.c:103: rupture(19-1);
   00C7 3E 12         [ 7]  216 	ld	a, #0x12
   00C9 F5            [11]  217 	push	af
   00CA 33            [ 6]  218 	inc	sp
   00CB CDr00r00      [17]  219 	call	_rupture
   00CE 33            [ 6]  220 	inc	sp
   00CF                     221 00107$:
                            222 ;src/main.c:108: if (intCounter==2) {
   00CF FD 21r00r00   [14]  223 	ld	iy, #_intCounter
   00D3 FD 7E 00      [19]  224 	ld	a, 0 (iy)
   00D6 D6 02         [ 7]  225 	sub	a, #0x02
   00D8 20 1A         [12]  226 	jr	NZ,00109$
                            227 ;src/main.c:114: __endasm;
   00DA 01 06 BC      [10]  228 	ld	bc,#0xbc06
   00DD ED 49         [12]  229 	out	(c),c
   00DF 01 19 BD      [10]  230 	ld	bc,#0xbd19
   00E2 ED 49         [12]  231 	out	(c),c
                            232 ;src/main.c:115: calqueC000();
   00E4 CDr00r00      [17]  233 	call	_calqueC000
                            234 ;src/main.c:116: cpct_setVideoMemoryOffset(0);
   00E7 2E 00         [ 7]  235 	ld	l, #0x00
   00E9 CDr00r00      [17]  236 	call	_cpct_setVideoMemoryOffset
                            237 ;src/main.c:117: rupture(7);
   00EC 3E 07         [ 7]  238 	ld	a, #0x07
   00EE F5            [11]  239 	push	af
   00EF 33            [ 6]  240 	inc	sp
   00F0 CDr00r00      [17]  241 	call	_rupture
   00F3 33            [ 6]  242 	inc	sp
   00F4                     243 00109$:
                            244 ;src/main.c:120: if (intCounter==3) {
   00F4 3Ar00r00      [13]  245 	ld	a,(#_intCounter + 0)
   00F7 D6 03         [ 7]  246 	sub	a, #0x03
   00F9 20 13         [12]  247 	jr	NZ,00111$
                            248 ;src/main.c:121: calqueC000();
   00FB CDr00r00      [17]  249 	call	_calqueC000
                            250 ;src/main.c:122: cpct_setVideoMemoryOffset(0);
   00FE 2E 00         [ 7]  251 	ld	l, #0x00
   0100 CDr00r00      [17]  252 	call	_cpct_setVideoMemoryOffset
                            253 ;src/main.c:123: restoreVBL();
   0103 CDr00r00      [17]  254 	call	_restoreVBL
                            255 ;src/main.c:124: rupture(39-19-7+1);
   0106 3E 0E         [ 7]  256 	ld	a, #0x0e
   0108 F5            [11]  257 	push	af
   0109 33            [ 6]  258 	inc	sp
   010A CDr00r00      [17]  259 	call	_rupture
   010D 33            [ 6]  260 	inc	sp
   010E                     261 00111$:
                            262 ;src/main.c:128: if (intCounter==4) {
   010E 3Ar00r00      [13]  263 	ld	a,(#_intCounter + 0)
   0111 D6 04         [ 7]  264 	sub	a, #0x04
   0113 C0            [11]  265 	ret	NZ
                            266 ;src/main.c:129: bank7_C000();
   0114 CDr00r00      [17]  267 	call	_bank7_C000
                            268 ;src/main.c:130: akp_musicPlay();
   0117 CDr00r00      [17]  269 	call	_akp_musicPlay
                            270 ;src/main.c:131: bank0123();
   011A CDr00r00      [17]  271 	call	_bank0123
   011D C9            [10]  272 	ret
                            273 ;src/main.c:138: void main(void) {
                            274 ;	---------------------------------
                            275 ; Function main
                            276 ; ---------------------------------
   011E                     277 _main::
                            278 ;src/main.c:142: u8* sprite=g_items_0;
                            279 ;src/main.c:147: bank7_C000();
   011E CDr00r00      [17]  280 	call	_bank7_C000
                            281 ;src/main.c:148: akp_musicInit();
   0121 CDr00r00      [17]  282 	call	_akp_musicInit
                            283 ;src/main.c:149: bank0123();
   0124 CDr00r00      [17]  284 	call	_bank0123
                            285 ;src/main.c:152: cpct_disableFirmware();
   0127 CDr00r00      [17]  286 	call	_cpct_disableFirmware
                            287 ;src/main.c:153: cpct_memcpy(0x6000,0x8000,0x2000);
   012A 21 00 20      [10]  288 	ld	hl, #0x2000
   012D E5            [11]  289 	push	hl
   012E 26 80         [ 7]  290 	ld	h, #0x80
   0130 E5            [11]  291 	push	hl
   0131 26 60         [ 7]  292 	ld	h, #0x60
   0133 E5            [11]  293 	push	hl
   0134 CDr00r00      [17]  294 	call	_cpct_memcpy
                            295 ;src/main.c:154: cpct_setStackLocation(0x6000);
   0137 21 00 60      [10]  296 	ld	hl, #0x6000
   013A CDr00r00      [17]  297 	call	_cpct_setStackLocation
                            298 ;src/main.c:155: cpct_memset_f64(0x8000, 0x0000, 0x4000);
   013D 21 00 40      [10]  299 	ld	hl, #0x4000
   0140 E5            [11]  300 	push	hl
   0141 26 00         [ 7]  301 	ld	h, #0x00
   0143 E5            [11]  302 	push	hl
   0144 26 80         [ 7]  303 	ld	h, #0x80
   0146 E5            [11]  304 	push	hl
   0147 CDr00r00      [17]  305 	call	_cpct_memset_f64
                            306 ;src/main.c:156: cpct_setInterruptHandler(myInterruptHandler);
   014A 21r40r00      [10]  307 	ld	hl, #_myInterruptHandler
   014D CDr00r00      [17]  308 	call	_cpct_setInterruptHandler
                            309 ;src/main.c:158: bank0123();
   0150 CDr00r00      [17]  310 	call	_bank0123
                            311 ;src/main.c:159: cpct_setVideoMode(0);
   0153 2E 00         [ 7]  312 	ld	l, #0x00
   0155 CDr00r00      [17]  313 	call	_cpct_setVideoMode
                            314 ;src/main.c:160: cpct_setBorder(HW_BLACK);
   0158 21 10 14      [10]  315 	ld	hl, #0x1410
   015B E5            [11]  316 	push	hl
   015C CDr00r00      [17]  317 	call	_cpct_setPALColour
                            318 ;src/main.c:161: cpct_setPalette(g_tile_palette, 6);
   015F 21 06 00      [10]  319 	ld	hl, #0x0006
   0162 E5            [11]  320 	push	hl
   0163 21r00r00      [10]  321 	ld	hl, #_g_tile_palette
   0166 E5            [11]  322 	push	hl
   0167 CDr00r00      [17]  323 	call	_cpct_setPalette
                            324 ;src/main.c:164: p = cpct_getScreenPtr(CPCT_VMEM_START, 9,110);
   016A 21 09 6E      [10]  325 	ld	hl, #0x6e09
   016D E5            [11]  326 	push	hl
   016E 21 00 C0      [10]  327 	ld	hl, #0xc000
   0171 E5            [11]  328 	push	hl
   0172 CDr00r00      [17]  329 	call	_cpct_getScreenPtr
                            330 ;src/main.c:165: cpct_hflipSpriteM0(4, 8, sprite);
   0175 01r20r00      [10]  331 	ld	bc, #_g_items_0
   0178 E5            [11]  332 	push	hl
   0179 C5            [11]  333 	push	bc
   017A C5            [11]  334 	push	bc
   017B 11 04 08      [10]  335 	ld	de, #0x0804
   017E D5            [11]  336 	push	de
   017F CDr00r00      [17]  337 	call	_cpct_hflipSpriteM0
   0182 C1            [10]  338 	pop	bc
   0183 E1            [10]  339 	pop	hl
                            340 ;src/main.c:166: cpct_drawSprite(sprite, p, 4, 8);
   0184 11 04 08      [10]  341 	ld	de, #0x0804
   0187 D5            [11]  342 	push	de
   0188 E5            [11]  343 	push	hl
   0189 C5            [11]  344 	push	bc
   018A CDr00r00      [17]  345 	call	_cpct_drawSprite
                            346 ;src/main.c:169: p = cpct_getScreenPtr(CPCT_VMEM_START, 10,96);
   018D 21 0A 60      [10]  347 	ld	hl, #0x600a
   0190 E5            [11]  348 	push	hl
   0191 21 00 C0      [10]  349 	ld	hl, #0xc000
   0194 E5            [11]  350 	push	hl
   0195 CDr00r00      [17]  351 	call	_cpct_getScreenPtr
                            352 ;src/main.c:170: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   0198 01r00r00      [10]  353 	ld	bc, #_g_tile_schtroumpf+0
   019B 11 10 20      [10]  354 	ld	de, #0x2010
   019E D5            [11]  355 	push	de
   019F E5            [11]  356 	push	hl
   01A0 C5            [11]  357 	push	bc
   01A1 CDr00r00      [17]  358 	call	_cpct_drawSpriteMasked
                            359 ;src/main.c:172: calque8000();
   01A4 CDr00r00      [17]  360 	call	_calque8000
                            361 ;src/main.c:173: screen_location=(u8 *)(0x2000);
   01A7 21 00 20      [10]  362 	ld	hl, #0x2000
   01AA 22r00r00      [16]  363 	ld	(_screen_location), hl
                            364 ;src/main.c:174: screen_plot_address=(u8 *)(0x8000+80-2);
   01AD 21 4E 80      [10]  365 	ld	hl, #0x804e
   01B0 22r02r00      [16]  366 	ld	(_screen_plot_address), hl
                            367 ;src/main.c:176: while (1) {
   01B3 01 00 00      [10]  368 	ld	bc, #0x0000
   01B6                     369 00102$:
                            370 ;src/main.c:177: cpct_waitVSYNC();
   01B6 C5            [11]  371 	push	bc
   01B7 CDr00r00      [17]  372 	call	_cpct_waitVSYNC
   01BA C1            [10]  373 	pop	bc
                            374 ;src/main.c:182: scroll_hard(t,screen_plot_address);
   01BB C5            [11]  375 	push	bc
   01BC 2Ar02r00      [16]  376 	ld	hl, (_screen_plot_address)
   01BF E5            [11]  377 	push	hl
   01C0 C5            [11]  378 	push	bc
   01C1 CDr00r00      [17]  379 	call	_scroll_hard
   01C4 F1            [10]  380 	pop	af
   01C5 F1            [10]  381 	pop	af
   01C6 C1            [10]  382 	pop	bc
                            383 ;src/main.c:184: t=t+1;
   01C7 03            [ 6]  384 	inc	bc
   01C8 18 EC         [12]  385 	jr	00102$
                            386 	.area _CODE
                            387 	.area _INITIALIZER
   0000                     388 __xinit__intCounter:
   0000 00                  389 	.db #0x00	; 0
                            390 	.area _CABS (ABS)

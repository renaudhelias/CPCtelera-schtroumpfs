                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _crtc
                             14 	.globl _cpct_loadBinaryFile
                             15 	.globl _InitializeAmsdos
                             16 	.globl _StoreDriveLetter
                             17 	.globl _bank7_C000
                             18 	.globl _bank0123
                             19 	.globl _calque8000
                             20 	.globl _akp_musicPlay
                             21 	.globl _akp_musicInit
                             22 	.globl _scroll_hard
                             23 	.globl _rupture
                             24 	.globl _restoreVBL
                             25 	.globl _killVBL
                             26 	.globl _cpct_getScreenPtr
                             27 	.globl _cpct_setVideoMemoryOffset
                             28 	.globl _cpct_setVideoMemoryPage
                             29 	.globl _cpct_setPALColour
                             30 	.globl _cpct_setPalette
                             31 	.globl _cpct_waitVSYNC
                             32 	.globl _cpct_setVideoMode
                             33 	.globl _cpct_hflipSpriteM0
                             34 	.globl _cpct_drawSpriteMasked
                             35 	.globl _cpct_drawSprite
                             36 	.globl _cpct_isAnyKeyPressed_f
                             37 	.globl _cpct_scanKeyboard_f
                             38 	.globl _cpct_setStackLocation
                             39 	.globl _cpct_memcpy
                             40 	.globl _cpct_memset_f64
                             41 	.globl _cpct_setInterruptHandler
                             42 	.globl _cpct_disableFirmware
                             43 	.globl _intCounter
                             44 	.globl _screen_plot_address
                             45 	.globl _screen_location
                             46 	.globl _g_items_0
                             47 ;--------------------------------------------------------
                             48 ; special function registers
                             49 ;--------------------------------------------------------
                             50 ;--------------------------------------------------------
                             51 ; ram data
                             52 ;--------------------------------------------------------
                             53 	.area _DATA
   0000                      54 _screen_location::
   0000                      55 	.ds 2
   0002                      56 _screen_plot_address::
   0002                      57 	.ds 2
                             58 ;--------------------------------------------------------
                             59 ; ram data
                             60 ;--------------------------------------------------------
                             61 	.area _INITIALIZED
   0000                      62 _intCounter::
   0000                      63 	.ds 1
                             64 ;--------------------------------------------------------
                             65 ; absolute external ram data
                             66 ;--------------------------------------------------------
                             67 	.area _DABS (ABS)
                             68 ;--------------------------------------------------------
                             69 ; global & static initialisations
                             70 ;--------------------------------------------------------
                             71 	.area _HOME
                             72 	.area _GSINIT
                             73 	.area _GSFINAL
                             74 	.area _GSINIT
                             75 ;--------------------------------------------------------
                             76 ; Home
                             77 ;--------------------------------------------------------
                             78 	.area _HOME
                             79 	.area _HOME
                             80 ;--------------------------------------------------------
                             81 ; code
                             82 ;--------------------------------------------------------
                             83 	.area _CODE
                             84 ;src/main.c:46: void crtc(u8* R12R13) {
                             85 ;	---------------------------------
                             86 ; Function crtc
                             87 ; ---------------------------------
   0000                      88 _crtc::
                             89 ;src/main.c:63: __endasm;
   0000 DD E5         [15]   90 	push	ix
   0002 DD 21 00 00   [14]   91 	ld	ix,#0
   0006 DD 39         [15]   92 	add	ix,sp
   0008 DD 66 05      [19]   93 	ld	h, 5 (ix)
   000B DD 6E 04      [19]   94 	ld	l, 4 (ix)
   000E 01 0C BC      [10]   95 	ld	bc,#0xbc00+12
   0011 ED 49         [12]   96 	out	(c),c
   0013 04            [ 4]   97 	inc	b
   0014 ED 61         [12]   98 	out	(c),h
   0016 05            [ 4]   99 	dec	b
   0017 0C            [ 4]  100 	inc	c
   0018 ED 49         [12]  101 	out	(c),c
   001A 04            [ 4]  102 	inc	b
   001B ED 69         [12]  103 	out	(c),l
   001D DD E1         [14]  104 	pop	ix
   001F C9            [10]  105 	ret
   0020                     106 _g_items_0:
   0020 05                  107 	.db #0x05	; 5
   0021 0F                  108 	.db #0x0f	; 15
   0022 0F                  109 	.db #0x0f	; 15
   0023 00                  110 	.db #0x00	; 0
   0024 0F                  111 	.db #0x0f	; 15
   0025 0F                  112 	.db #0x0f	; 15
   0026 0F                  113 	.db #0x0f	; 15
   0027 0A                  114 	.db #0x0a	; 10
   0028 0F                  115 	.db #0x0f	; 15
   0029 0A                  116 	.db #0x0a	; 10
   002A 05                  117 	.db #0x05	; 5
   002B 00                  118 	.db #0x00	; 0
   002C 0F                  119 	.db #0x0f	; 15
   002D 0A                  120 	.db #0x0a	; 10
   002E 05                  121 	.db #0x05	; 5
   002F 00                  122 	.db #0x00	; 0
   0030 05                  123 	.db #0x05	; 5
   0031 0F                  124 	.db #0x0f	; 15
   0032 0A                  125 	.db #0x0a	; 10
   0033 0A                  126 	.db #0x0a	; 10
   0034 00                  127 	.db #0x00	; 0
   0035 0F                  128 	.db #0x0f	; 15
   0036 0F                  129 	.db #0x0f	; 15
   0037 0A                  130 	.db #0x0a	; 10
   0038 00                  131 	.db #0x00	; 0
   0039 0A                  132 	.db #0x0a	; 10
   003A 0A                  133 	.db #0x0a	; 10
   003B 0A                  134 	.db #0x0a	; 10
   003C 00                  135 	.db #0x00	; 0
   003D 00                  136 	.db #0x00	; 0
   003E 00                  137 	.db #0x00	; 0
   003F 00                  138 	.db #0x00	; 0
                            139 ;src/main.c:74: void myInterruptHandler() {
                            140 ;	---------------------------------
                            141 ; Function myInterruptHandler
                            142 ; ---------------------------------
   0040                     143 _myInterruptHandler::
                            144 ;src/main.c:77: intCounter=intCounter+1;
   0040 FD 21r00r00   [14]  145 	ld	iy, #_intCounter
   0044 FD 34 00      [23]  146 	inc	0 (iy)
                            147 ;src/main.c:78: if (intCounter == 6) intCounter=0;
   0047 FD 7E 00      [19]  148 	ld	a, 0 (iy)
   004A D6 06         [ 7]  149 	sub	a, #0x06
   004C 20 04         [12]  150 	jr	NZ,00102$
   004E FD 36 00 00   [19]  151 	ld	0 (iy), #0x00
   0052                     152 00102$:
                            153 ;src/main.c:80: if (intCounter == 2) {
   0052 3Ar00r00      [13]  154 	ld	a,(#_intCounter + 0)
   0055 D6 02         [ 7]  155 	sub	a, #0x02
   0057 20 09         [12]  156 	jr	NZ,00104$
                            157 ;src/main.c:81: cpct_setBorder(0x54);
   0059 21 10 54      [10]  158 	ld	hl, #0x5410
   005C E5            [11]  159 	push	hl
   005D CDr00r00      [17]  160 	call	_cpct_setPALColour
   0060 18 07         [12]  161 	jr	00105$
   0062                     162 00104$:
                            163 ;src/main.c:83: cpct_setBorder(0x50);
   0062 21 10 50      [10]  164 	ld	hl, #0x5010
   0065 E5            [11]  165 	push	hl
   0066 CDr00r00      [17]  166 	call	_cpct_setPALColour
   0069                     167 00105$:
                            168 ;src/main.c:86: if (intCounter==5) {
   0069 FD 21r00r00   [14]  169 	ld	iy, #_intCounter
   006D FD 7E 00      [19]  170 	ld	a, 0 (iy)
   0070 D6 05         [ 7]  171 	sub	a, #0x05
   0072 20 1D         [12]  172 	jr	NZ,00107$
                            173 ;src/main.c:92: __endasm;
   0074 01 06 BC      [10]  174 	ld	bc,#0xbc06
   0077 ED 49         [12]  175 	out	(c),c
   0079 01 04 BD      [10]  176 	ld	bc,#0xbd04
   007C ED 49         [12]  177 	out	(c),c
                            178 ;src/main.c:94: crtc(screen_location);
   007E 2Ar00r00      [16]  179 	ld	hl, (_screen_location)
   0081 E5            [11]  180 	push	hl
   0082 CDr00r00      [17]  181 	call	_crtc
   0085 F1            [10]  182 	pop	af
                            183 ;src/main.c:96: killVBL();
   0086 CDr00r00      [17]  184 	call	_killVBL
                            185 ;src/main.c:97: rupture(19-1);
   0089 3E 12         [ 7]  186 	ld	a, #0x12
   008B F5            [11]  187 	push	af
   008C 33            [ 6]  188 	inc	sp
   008D CDr00r00      [17]  189 	call	_rupture
   0090 33            [ 6]  190 	inc	sp
   0091                     191 00107$:
                            192 ;src/main.c:101: if (intCounter==2) {
   0091 FD 21r00r00   [14]  193 	ld	iy, #_intCounter
   0095 FD 7E 00      [19]  194 	ld	a, 0 (iy)
   0098 D6 02         [ 7]  195 	sub	a, #0x02
   009A 20 1C         [12]  196 	jr	NZ,00109$
                            197 ;src/main.c:107: __endasm;
   009C 01 06 BC      [10]  198 	ld	bc,#0xbc06
   009F ED 49         [12]  199 	out	(c),c
   00A1 01 19 BD      [10]  200 	ld	bc,#0xbd19
   00A4 ED 49         [12]  201 	out	(c),c
                            202 ;src/main.c:108: cpct_setVideoMemoryPage(cpct_pageC0);
   00A6 2E 30         [ 7]  203 	ld	l, #0x30
   00A8 CDr00r00      [17]  204 	call	_cpct_setVideoMemoryPage
                            205 ;src/main.c:109: cpct_setVideoMemoryOffset(0);
   00AB 2E 00         [ 7]  206 	ld	l, #0x00
   00AD CDr00r00      [17]  207 	call	_cpct_setVideoMemoryOffset
                            208 ;src/main.c:110: rupture(7);
   00B0 3E 07         [ 7]  209 	ld	a, #0x07
   00B2 F5            [11]  210 	push	af
   00B3 33            [ 6]  211 	inc	sp
   00B4 CDr00r00      [17]  212 	call	_rupture
   00B7 33            [ 6]  213 	inc	sp
   00B8                     214 00109$:
                            215 ;src/main.c:113: if (intCounter==3) {
   00B8 3Ar00r00      [13]  216 	ld	a,(#_intCounter + 0)
   00BB D6 03         [ 7]  217 	sub	a, #0x03
   00BD 20 15         [12]  218 	jr	NZ,00111$
                            219 ;src/main.c:114: cpct_setVideoMemoryPage(cpct_pageC0);
   00BF 2E 30         [ 7]  220 	ld	l, #0x30
   00C1 CDr00r00      [17]  221 	call	_cpct_setVideoMemoryPage
                            222 ;src/main.c:115: cpct_setVideoMemoryOffset(0);
   00C4 2E 00         [ 7]  223 	ld	l, #0x00
   00C6 CDr00r00      [17]  224 	call	_cpct_setVideoMemoryOffset
                            225 ;src/main.c:116: restoreVBL();
   00C9 CDr00r00      [17]  226 	call	_restoreVBL
                            227 ;src/main.c:117: rupture(39-19-7+1);
   00CC 3E 0E         [ 7]  228 	ld	a, #0x0e
   00CE F5            [11]  229 	push	af
   00CF 33            [ 6]  230 	inc	sp
   00D0 CDr00r00      [17]  231 	call	_rupture
   00D3 33            [ 6]  232 	inc	sp
   00D4                     233 00111$:
                            234 ;src/main.c:121: if (intCounter==4) {
   00D4 3Ar00r00      [13]  235 	ld	a,(#_intCounter + 0)
   00D7 D6 04         [ 7]  236 	sub	a, #0x04
   00D9 C0            [11]  237 	ret	NZ
                            238 ;src/main.c:122: bank7_C000();
   00DA CDr00r00      [17]  239 	call	_bank7_C000
                            240 ;src/main.c:123: akp_musicPlay();
   00DD CDr00r00      [17]  241 	call	_akp_musicPlay
                            242 ;src/main.c:124: bank0123();
   00E0 CDr00r00      [17]  243 	call	_bank0123
   00E3 C9            [10]  244 	ret
                            245 ;src/main.c:131: void main(void) {
                            246 ;	---------------------------------
                            247 ; Function main
                            248 ; ---------------------------------
   00E4                     249 _main::
                            250 ;src/main.c:135: u8* sprite=g_items_0;
                            251 ;src/main.c:137: StoreDriveLetter();
   00E4 CDr00r00      [17]  252 	call	_StoreDriveLetter
                            253 ;src/main.c:138: InitializeAmsdos();
   00E7 CDr00r00      [17]  254 	call	_InitializeAmsdos
                            255 ;src/main.c:140: cpct_loadBinaryFile("CPC-BAT.SCR", 0xC000);
   00EA 21 00 C0      [10]  256 	ld	hl, #0xc000
   00ED E5            [11]  257 	push	hl
   00EE 21rE9r01      [10]  258 	ld	hl, #___str_0
   00F1 E5            [11]  259 	push	hl
   00F2 CDr00r00      [17]  260 	call	_cpct_loadBinaryFile
   00F5 F1            [10]  261 	pop	af
   00F6 F1            [10]  262 	pop	af
                            263 ;src/main.c:145: bank7_C000();
   00F7 CDr00r00      [17]  264 	call	_bank7_C000
                            265 ;src/main.c:146: akp_musicInit();
   00FA CDr00r00      [17]  266 	call	_akp_musicInit
                            267 ;src/main.c:147: bank0123();
   00FD CDr00r00      [17]  268 	call	_bank0123
                            269 ;src/main.c:150: cpct_disableFirmware();
   0100 CDr00r00      [17]  270 	call	_cpct_disableFirmware
                            271 ;src/main.c:151: cpct_memcpy(0x6000,0x8000,0x2000);// la pile peut etre négative...
   0103 21 00 20      [10]  272 	ld	hl, #0x2000
   0106 E5            [11]  273 	push	hl
   0107 26 80         [ 7]  274 	ld	h, #0x80
   0109 E5            [11]  275 	push	hl
   010A 26 60         [ 7]  276 	ld	h, #0x60
   010C E5            [11]  277 	push	hl
   010D CDr00r00      [17]  278 	call	_cpct_memcpy
                            279 ;src/main.c:152: cpct_setStackLocation(0x6000);
   0110 21 00 60      [10]  280 	ld	hl, #0x6000
   0113 CDr00r00      [17]  281 	call	_cpct_setStackLocation
                            282 ;src/main.c:153: cpct_memset_f64(0x8000, 0x0000, 0x4000);
   0116 21 00 40      [10]  283 	ld	hl, #0x4000
   0119 E5            [11]  284 	push	hl
   011A 26 00         [ 7]  285 	ld	h, #0x00
   011C E5            [11]  286 	push	hl
   011D 26 80         [ 7]  287 	ld	h, #0x80
   011F E5            [11]  288 	push	hl
   0120 CDr00r00      [17]  289 	call	_cpct_memset_f64
                            290 ;src/main.c:159: bank0123();
   0123 CDr00r00      [17]  291 	call	_bank0123
                            292 ;src/main.c:160: cpct_setVideoMode(0);
   0126 2E 00         [ 7]  293 	ld	l, #0x00
   0128 CDr00r00      [17]  294 	call	_cpct_setVideoMode
                            295 ;src/main.c:161: cpct_setBorder(HW_BLACK);
   012B 21 10 14      [10]  296 	ld	hl, #0x1410
   012E E5            [11]  297 	push	hl
   012F CDr00r00      [17]  298 	call	_cpct_setPALColour
                            299 ;src/main.c:162: cpct_setPalette(g_tile_palette, 6);
   0132 21 06 00      [10]  300 	ld	hl, #0x0006
   0135 E5            [11]  301 	push	hl
   0136 21r00r00      [10]  302 	ld	hl, #_g_tile_palette
   0139 E5            [11]  303 	push	hl
   013A CDr00r00      [17]  304 	call	_cpct_setPalette
                            305 ;src/main.c:165: p = cpct_getScreenPtr(CPCT_VMEM_START, 0,110+16);
   013D 21 00 7E      [10]  306 	ld	hl, #0x7e00
   0140 E5            [11]  307 	push	hl
   0141 26 C0         [ 7]  308 	ld	h, #0xc0
   0143 E5            [11]  309 	push	hl
   0144 CDr00r00      [17]  310 	call	_cpct_getScreenPtr
                            311 ;src/main.c:166: cpct_hflipSpriteM0(4, 8, sprite);
   0147 01r20r00      [10]  312 	ld	bc, #_g_items_0
   014A E5            [11]  313 	push	hl
   014B C5            [11]  314 	push	bc
   014C C5            [11]  315 	push	bc
   014D 11 04 08      [10]  316 	ld	de, #0x0804
   0150 D5            [11]  317 	push	de
   0151 CDr00r00      [17]  318 	call	_cpct_hflipSpriteM0
   0154 C1            [10]  319 	pop	bc
   0155 E1            [10]  320 	pop	hl
                            321 ;src/main.c:167: cpct_drawSprite(sprite, p, 4, 8);
   0156 11 04 08      [10]  322 	ld	de, #0x0804
   0159 D5            [11]  323 	push	de
   015A E5            [11]  324 	push	hl
   015B C5            [11]  325 	push	bc
   015C CDr00r00      [17]  326 	call	_cpct_drawSprite
                            327 ;src/main.c:170: p = cpct_getScreenPtr(CPCT_VMEM_START, 1,96+16);
   015F 21 01 70      [10]  328 	ld	hl, #0x7001
   0162 E5            [11]  329 	push	hl
   0163 21 00 C0      [10]  330 	ld	hl, #0xc000
   0166 E5            [11]  331 	push	hl
   0167 CDr00r00      [17]  332 	call	_cpct_getScreenPtr
                            333 ;src/main.c:171: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   016A 01r00r00      [10]  334 	ld	bc, #_g_tile_schtroumpf+0
   016D 11 10 20      [10]  335 	ld	de, #0x2010
   0170 D5            [11]  336 	push	de
   0171 E5            [11]  337 	push	hl
   0172 C5            [11]  338 	push	bc
   0173 CDr00r00      [17]  339 	call	_cpct_drawSpriteMasked
                            340 ;src/main.c:173: calque8000();
   0176 CDr00r00      [17]  341 	call	_calque8000
                            342 ;src/main.c:176: screen_location=(u8 *)(0x2000);
   0179 21 00 20      [10]  343 	ld	hl, #0x2000
   017C 22r00r00      [16]  344 	ld	(_screen_location), hl
                            345 ;src/main.c:177: screen_plot_address=(u8 *)(0x8000+80-2);
   017F 21 4E 80      [10]  346 	ld	hl, #0x804e
   0182 22r02r00      [16]  347 	ld	(_screen_plot_address), hl
                            348 ;src/main.c:179: cpct_setInterruptHandler(myInterruptHandler);
   0185 21r40r00      [10]  349 	ld	hl, #_myInterruptHandler
   0188 CDr00r00      [17]  350 	call	_cpct_setInterruptHandler
                            351 ;src/main.c:181: while (1) {
   018B 01 00 00      [10]  352 	ld	bc, #0x0000
   018E                     353 00104$:
                            354 ;src/main.c:182: cpct_waitVSYNC();
   018E C5            [11]  355 	push	bc
   018F CDr00r00      [17]  356 	call	_cpct_waitVSYNC
   0192 C1            [10]  357 	pop	bc
                            358 ;src/main.c:184: screen_location++;
   0193 FD 21r00r00   [14]  359 	ld	iy, #_screen_location
   0197 FD 34 00      [23]  360 	inc	0 (iy)
   019A 20 03         [12]  361 	jr	NZ,00116$
   019C FD 34 01      [23]  362 	inc	1 (iy)
   019F                     363 00116$:
                            364 ;src/main.c:185: screen_location=(u8 *)(((u16)screen_location) & 0x23FF);
   019F 2Ar00r00      [16]  365 	ld	hl, (_screen_location)
   01A2 7C            [ 4]  366 	ld	a, h
   01A3 E6 23         [ 7]  367 	and	a, #0x23
   01A5 67            [ 4]  368 	ld	h, a
   01A6 22r00r00      [16]  369 	ld	(_screen_location), hl
                            370 ;src/main.c:189: screen_plot_address+=2;
   01A9 21r02r00      [10]  371 	ld	hl, #_screen_plot_address
   01AC 7E            [ 7]  372 	ld	a, (hl)
   01AD C6 02         [ 7]  373 	add	a, #0x02
   01AF 77            [ 7]  374 	ld	(hl), a
   01B0 23            [ 6]  375 	inc	hl
   01B1 7E            [ 7]  376 	ld	a, (hl)
   01B2 CE 00         [ 7]  377 	adc	a, #0x00
   01B4 77            [ 7]  378 	ld	(hl), a
                            379 ;src/main.c:190: screen_plot_address=(u8 *)(((u16)screen_plot_address) & 0x87FF);
   01B5 2Ar02r00      [16]  380 	ld	hl, (_screen_plot_address)
   01B8 7C            [ 4]  381 	ld	a, h
   01B9 E6 87         [ 7]  382 	and	a, #0x87
   01BB 67            [ 4]  383 	ld	h, a
   01BC 22r02r00      [16]  384 	ld	(_screen_plot_address), hl
                            385 ;src/main.c:196: scroll_hard(t,screen_plot_address);
   01BF C5            [11]  386 	push	bc
   01C0 2Ar02r00      [16]  387 	ld	hl, (_screen_plot_address)
   01C3 E5            [11]  388 	push	hl
   01C4 C5            [11]  389 	push	bc
   01C5 CDr00r00      [17]  390 	call	_scroll_hard
   01C8 F1            [10]  391 	pop	af
   01C9 F1            [10]  392 	pop	af
   01CA C1            [10]  393 	pop	bc
                            394 ;src/main.c:198: t=t+1;
   01CB 03            [ 6]  395 	inc	bc
                            396 ;src/main.c:200: cpct_scanKeyboard_f();
   01CC C5            [11]  397 	push	bc
   01CD CDr00r00      [17]  398 	call	_cpct_scanKeyboard_f
   01D0 CDr00r00      [17]  399 	call	_cpct_isAnyKeyPressed_f
   01D3 C1            [10]  400 	pop	bc
   01D4 7D            [ 4]  401 	ld	a, l
   01D5 B7            [ 4]  402 	or	a, a
   01D6 28 B6         [12]  403 	jr	Z,00104$
                            404 ;src/main.c:202: cpct_memset_f64(0x8000, 0x0000, 0x4000);
   01D8 C5            [11]  405 	push	bc
   01D9 21 00 40      [10]  406 	ld	hl, #0x4000
   01DC E5            [11]  407 	push	hl
   01DD 26 00         [ 7]  408 	ld	h, #0x00
   01DF E5            [11]  409 	push	hl
   01E0 26 80         [ 7]  410 	ld	h, #0x80
   01E2 E5            [11]  411 	push	hl
   01E3 CDr00r00      [17]  412 	call	_cpct_memset_f64
   01E6 C1            [10]  413 	pop	bc
   01E7 18 A5         [12]  414 	jr	00104$
   01E9                     415 ___str_0:
   01E9 43 50 43 2D 42 41   416 	.ascii "CPC-BAT.SCR"
        54 2E 53 43 52
   01F4 00                  417 	.db 0x00
                            418 	.area _CODE
                            419 	.area _INITIALIZER
   0000                     420 __xinit__intCounter:
   0000 00                  421 	.db #0x00	; 0
                            422 	.area _CABS (ABS)

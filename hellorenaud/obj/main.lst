                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _bank4_4000
                             14 	.globl _bank0123
                             15 	.globl _calque4000
                             16 	.globl _calqueC000
                             17 	.globl _akp_sfxPlay
                             18 	.globl _akp_musicPlay
                             19 	.globl _akp_musicInit
                             20 	.globl _scroll
                             21 	.globl _cpct_restoreState_mxor_u8
                             22 	.globl _cpct_setSeed_mxor
                             23 	.globl _cpct_getScreenPtr
                             24 	.globl _cpct_setVideoMemoryOffset
                             25 	.globl _cpct_setPALColour
                             26 	.globl _cpct_setPalette
                             27 	.globl _cpct_setVideoMode
                             28 	.globl _cpct_hflipSpriteM0
                             29 	.globl _cpct_drawSolidBox
                             30 	.globl _cpct_drawSpriteMasked
                             31 	.globl _cpct_drawSprite
                             32 	.globl _cpct_px2byteM0
                             33 	.globl _cpct_isKeyPressed
                             34 	.globl _cpct_scanKeyboard_f
                             35 	.globl _cpct_memset_f64
                             36 	.globl _cpct_memset
                             37 	.globl _cpct_setInterruptHandler
                             38 	.globl _cpct_disableFirmware
                             39 	.globl _g_items_0
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DATA
   0000                      47 _myInterruptHandler_i_1_81:
   0000                      48 	.ds 1
                             49 ;--------------------------------------------------------
                             50 ; ram data
                             51 ;--------------------------------------------------------
                             52 	.area _INITIALIZED
                             53 ;--------------------------------------------------------
                             54 ; absolute external ram data
                             55 ;--------------------------------------------------------
                             56 	.area _DABS (ABS)
                             57 ;--------------------------------------------------------
                             58 ; global & static initialisations
                             59 ;--------------------------------------------------------
                             60 	.area _HOME
                             61 	.area _GSINIT
                             62 	.area _GSFINAL
                             63 	.area _GSINIT
                             64 ;--------------------------------------------------------
                             65 ; Home
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _HOME
                             69 ;--------------------------------------------------------
                             70 ; code
                             71 ;--------------------------------------------------------
                             72 	.area _CODE
                             73 ;src/main.c:43: void myInterruptHandler() {
                             74 ;	---------------------------------
                             75 ; Function myInterruptHandler
                             76 ; ---------------------------------
   0000                      77 _myInterruptHandler::
                             78 ;src/main.c:47: cpct_setBorder(i+1);
   0000 21r00r00      [10]   79 	ld	hl,#_myInterruptHandler_i_1_81 + 0
   0003 46            [ 7]   80 	ld	b, (hl)
   0004 04            [ 4]   81 	inc	b
   0005 C5            [11]   82 	push	bc
   0006 33            [ 6]   83 	inc	sp
   0007 3E 10         [ 7]   84 	ld	a, #0x10
   0009 F5            [11]   85 	push	af
   000A 33            [ 6]   86 	inc	sp
   000B CDr00r00      [17]   87 	call	_cpct_setPALColour
                             88 ;src/main.c:48: if (++i > 5) i=0;
   000E FD 21r00r00   [14]   89 	ld	iy, #_myInterruptHandler_i_1_81
   0012 FD 34 00      [23]   90 	inc	0 (iy)
   0015 3E 05         [ 7]   91 	ld	a, #0x05
   0017 FD 96 00      [19]   92 	sub	a, 0 (iy)
   001A 30 04         [12]   93 	jr	NC,00102$
   001C FD 36 00 00   [19]   94 	ld	0 (iy), #0x00
   0020                      95 00102$:
                             96 ;src/main.c:51: if (i==2) {
   0020 3Ar00r00      [13]   97 	ld	a,(#_myInterruptHandler_i_1_81 + 0)
   0023 D6 02         [ 7]   98 	sub	a, #0x02
   0025 C0            [11]   99 	ret	NZ
                            100 ;src/main.c:52: akp_musicPlay();
   0026 CDr00r00      [17]  101 	call	_akp_musicPlay
   0029 C9            [10]  102 	ret
   002A                     103 _g_items_0:
   002A 05                  104 	.db #0x05	; 5
   002B 0F                  105 	.db #0x0f	; 15
   002C 0F                  106 	.db #0x0f	; 15
   002D 00                  107 	.db #0x00	; 0
   002E 0F                  108 	.db #0x0f	; 15
   002F 0F                  109 	.db #0x0f	; 15
   0030 0F                  110 	.db #0x0f	; 15
   0031 0A                  111 	.db #0x0a	; 10
   0032 0F                  112 	.db #0x0f	; 15
   0033 0A                  113 	.db #0x0a	; 10
   0034 05                  114 	.db #0x05	; 5
   0035 00                  115 	.db #0x00	; 0
   0036 0F                  116 	.db #0x0f	; 15
   0037 0A                  117 	.db #0x0a	; 10
   0038 05                  118 	.db #0x05	; 5
   0039 00                  119 	.db #0x00	; 0
   003A 05                  120 	.db #0x05	; 5
   003B 0F                  121 	.db #0x0f	; 15
   003C 0A                  122 	.db #0x0a	; 10
   003D 0A                  123 	.db #0x0a	; 10
   003E 00                  124 	.db #0x00	; 0
   003F 0F                  125 	.db #0x0f	; 15
   0040 0F                  126 	.db #0x0f	; 15
   0041 0A                  127 	.db #0x0a	; 10
   0042 00                  128 	.db #0x00	; 0
   0043 0A                  129 	.db #0x0a	; 10
   0044 0A                  130 	.db #0x0a	; 10
   0045 0A                  131 	.db #0x0a	; 10
   0046 00                  132 	.db #0x00	; 0
   0047 00                  133 	.db #0x00	; 0
   0048 00                  134 	.db #0x00	; 0
   0049 00                  135 	.db #0x00	; 0
                            136 ;src/main.c:57: void main(void) {
                            137 ;	---------------------------------
                            138 ; Function main
                            139 ; ---------------------------------
   004A                     140 _main::
                            141 ;src/main.c:60: u8* sprite=g_items_0;
                            142 ;src/main.c:69: cpct_disableFirmware();
   004A CDr00r00      [17]  143 	call	_cpct_disableFirmware
                            144 ;src/main.c:73: bank4_4000();
   004D CDr00r00      [17]  145 	call	_bank4_4000
                            146 ;src/main.c:74: bank0123();
   0050 CDr00r00      [17]  147 	call	_bank0123
                            148 ;src/main.c:75: calqueC000();
   0053 CDr00r00      [17]  149 	call	_calqueC000
                            150 ;src/main.c:78: cpct_setVideoMode(0);
   0056 2E 00         [ 7]  151 	ld	l, #0x00
   0058 CDr00r00      [17]  152 	call	_cpct_setVideoMode
                            153 ;src/main.c:81: cpct_setBorder(HW_BLACK);
   005B 21 10 14      [10]  154 	ld	hl, #0x1410
   005E E5            [11]  155 	push	hl
   005F CDr00r00      [17]  156 	call	_cpct_setPALColour
                            157 ;src/main.c:82: cpct_setPalette(g_tile_palette, 6);
   0062 21 06 00      [10]  158 	ld	hl, #0x0006
   0065 E5            [11]  159 	push	hl
   0066 21r00r00      [10]  160 	ld	hl, #_g_tile_palette
   0069 E5            [11]  161 	push	hl
   006A CDr00r00      [17]  162 	call	_cpct_setPalette
                            163 ;src/main.c:83: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   006D 21 00 40      [10]  164 	ld	hl, #0x4000
   0070 E5            [11]  165 	push	hl
   0071 AF            [ 4]  166 	xor	a, a
   0072 F5            [11]  167 	push	af
   0073 33            [ 6]  168 	inc	sp
   0074 26 C0         [ 7]  169 	ld	h, #0xc0
   0076 E5            [11]  170 	push	hl
   0077 CDr00r00      [17]  171 	call	_cpct_memset
                            172 ;src/main.c:89: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   007A 21 0F 0F      [10]  173 	ld	hl, #0x0f0f
   007D E5            [11]  174 	push	hl
   007E 21 00 C0      [10]  175 	ld	hl, #0xc000
   0081 E5            [11]  176 	push	hl
   0082 CDr00r00      [17]  177 	call	_cpct_getScreenPtr
                            178 ;src/main.c:90: cpct_drawSprite(sprite, p, 4, 8);
   0085 E5            [11]  179 	push	hl
   0086 01 04 08      [10]  180 	ld	bc, #0x0804
   0089 C5            [11]  181 	push	bc
   008A E5            [11]  182 	push	hl
   008B 01r2Ar00      [10]  183 	ld	bc, #_g_items_0
   008E C5            [11]  184 	push	bc
   008F CDr00r00      [17]  185 	call	_cpct_drawSprite
   0092 01 00 20      [10]  186 	ld	bc, #0x2000
   0095 C5            [11]  187 	push	bc
   0096 01 FF FF      [10]  188 	ld	bc, #0xffff
   0099 C5            [11]  189 	push	bc
   009A 01 00 C0      [10]  190 	ld	bc, #0xc000
   009D C5            [11]  191 	push	bc
   009E CDr00r00      [17]  192 	call	_cpct_memset_f64
   00A1 01r2Ar00      [10]  193 	ld	bc, #_g_items_0
   00A4 C5            [11]  194 	push	bc
   00A5 01 04 08      [10]  195 	ld	bc, #0x0804
   00A8 C5            [11]  196 	push	bc
   00A9 CDr00r00      [17]  197 	call	_cpct_hflipSpriteM0
   00AC E1            [10]  198 	pop	hl
                            199 ;src/main.c:98: cpct_drawSprite(sprite, p, 4, 8);
   00AD 01 04 08      [10]  200 	ld	bc, #0x0804
   00B0 C5            [11]  201 	push	bc
   00B1 E5            [11]  202 	push	hl
   00B2 21r2Ar00      [10]  203 	ld	hl, #_g_items_0
   00B5 E5            [11]  204 	push	hl
   00B6 CDr00r00      [17]  205 	call	_cpct_drawSprite
                            206 ;src/main.c:100: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   00B9 21 0F 1F      [10]  207 	ld	hl, #0x1f0f
   00BC E5            [11]  208 	push	hl
   00BD 21 00 C0      [10]  209 	ld	hl, #0xc000
   00C0 E5            [11]  210 	push	hl
   00C1 CDr00r00      [17]  211 	call	_cpct_getScreenPtr
                            212 ;src/main.c:102: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   00C4 E5            [11]  213 	push	hl
   00C5 21 02 03      [10]  214 	ld	hl, #0x0302
   00C8 E5            [11]  215 	push	hl
   00C9 CDr00r00      [17]  216 	call	_cpct_px2byteM0
   00CC 55            [ 4]  217 	ld	d, l
   00CD C1            [10]  218 	pop	bc
   00CE 21 0A 14      [10]  219 	ld	hl, #0x140a
   00D1 E5            [11]  220 	push	hl
   00D2 D5            [11]  221 	push	de
   00D3 33            [ 6]  222 	inc	sp
   00D4 C5            [11]  223 	push	bc
   00D5 CDr00r00      [17]  224 	call	_cpct_drawSolidBox
   00D8 F1            [10]  225 	pop	af
                            226 ;src/main.c:105: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   00D9 33            [ 6]  227 	inc	sp
   00DA 21 09 4F      [10]  228 	ld	hl,#0x4f09
   00DD E3            [19]  229 	ex	(sp),hl
   00DE 21 00 C0      [10]  230 	ld	hl, #0xc000
   00E1 E5            [11]  231 	push	hl
   00E2 CDr00r00      [17]  232 	call	_cpct_getScreenPtr
                            233 ;src/main.c:106: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   00E5 01r00r00      [10]  234 	ld	bc, #_g_tile_schtroumpf+0
   00E8 11 10 20      [10]  235 	ld	de, #0x2010
   00EB D5            [11]  236 	push	de
   00EC E5            [11]  237 	push	hl
   00ED C5            [11]  238 	push	bc
   00EE CDr00r00      [17]  239 	call	_cpct_drawSpriteMasked
                            240 ;src/main.c:120: cpct_srand(77);
   00F1 21 4D 00      [10]  241 	ld	hl,#0x004d
   00F4 11 00 00      [10]  242 	ld	de,#0x0000
   00F7 CDr00r00      [17]  243 	call	_cpct_setSeed_mxor
   00FA CDr00r00      [17]  244 	call	_cpct_restoreState_mxor_u8
                            245 ;src/main.c:124: cpct_scanKeyboard_f();
   00FD CDr00r00      [17]  246 	call	_cpct_scanKeyboard_f
                            247 ;src/main.c:125: t=0;
   0100 01 00 00      [10]  248 	ld	bc, #0x0000
                            249 ;src/main.c:126: while (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return)){
   0103                     250 00104$:
   0103 C5            [11]  251 	push	bc
   0104 21 00 40      [10]  252 	ld	hl, #0x4000
   0107 CDr00r00      [17]  253 	call	_cpct_isKeyPressed
   010A C1            [10]  254 	pop	bc
   010B 7D            [ 4]  255 	ld	a, l
   010C B7            [ 4]  256 	or	a, a
   010D 20 38         [12]  257 	jr	NZ,00106$
   010F C5            [11]  258 	push	bc
   0110 21 02 04      [10]  259 	ld	hl, #0x0402
   0113 CDr00r00      [17]  260 	call	_cpct_isKeyPressed
   0116 C1            [10]  261 	pop	bc
   0117 7D            [ 4]  262 	ld	a, l
   0118 B7            [ 4]  263 	or	a, a
   0119 20 2C         [12]  264 	jr	NZ,00106$
                            265 ;src/main.c:127: scroll("WEWISHYOUAMERRYCHRISTMASWEWISHYOUAMERRYCHRISTMASWEWISHYOUAMERRYCHRISTMASANDAHAPPYNEWYEAR", 88, t);
   011B C5            [11]  266 	push	bc
   011C C5            [11]  267 	push	bc
   011D 21 58 00      [10]  268 	ld	hl, #0x0058
   0120 E5            [11]  269 	push	hl
   0121 21r6Ar01      [10]  270 	ld	hl, #___str_0
   0124 E5            [11]  271 	push	hl
   0125 CDr00r00      [17]  272 	call	_scroll
   0128 21 06 00      [10]  273 	ld	hl, #6
   012B 39            [11]  274 	add	hl, sp
   012C F9            [ 6]  275 	ld	sp, hl
   012D C1            [10]  276 	pop	bc
                            277 ;src/main.c:128: t=t+1;
   012E 03            [ 6]  278 	inc	bc
                            279 ;src/main.c:129: if (t>88*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   012F 3E 10         [ 7]  280 	ld	a, #0x10
   0131 B9            [ 4]  281 	cp	a, c
   0132 3E 04         [ 7]  282 	ld	a, #0x04
   0134 98            [ 4]  283 	sbc	a, b
   0135 E2r3Ar01      [10]  284 	jp	PO, 00138$
   0138 EE 80         [ 7]  285 	xor	a, #0x80
   013A                     286 00138$:
   013A F2r40r01      [10]  287 	jp	P, 00102$
   013D 01 00 00      [10]  288 	ld	bc, #0x0000
   0140                     289 00102$:
                            290 ;src/main.c:130: cpct_scanKeyboard_f();
   0140 C5            [11]  291 	push	bc
   0141 CDr00r00      [17]  292 	call	_cpct_scanKeyboard_f
   0144 C1            [10]  293 	pop	bc
   0145 18 BC         [12]  294 	jr	00104$
   0147                     295 00106$:
                            296 ;src/main.c:134: akp_musicInit();
   0147 CDr00r00      [17]  297 	call	_akp_musicInit
                            298 ;src/main.c:138: cpct_setVideoMemoryOffset(0);
   014A 2E 00         [ 7]  299 	ld	l, #0x00
   014C CDr00r00      [17]  300 	call	_cpct_setVideoMemoryOffset
                            301 ;src/main.c:139: calque4000();
   014F CDr00r00      [17]  302 	call	_calque4000
                            303 ;src/main.c:141: cpct_setInterruptHandler(myInterruptHandler);
   0152 21r00r00      [10]  304 	ld	hl, #_myInterruptHandler
   0155 CDr00r00      [17]  305 	call	_cpct_setInterruptHandler
                            306 ;src/main.c:142: while (1) {
   0158                     307 00110$:
                            308 ;src/main.c:143: cpct_scanKeyboard_f();
   0158 CDr00r00      [17]  309 	call	_cpct_scanKeyboard_f
                            310 ;src/main.c:144: if (cpct_isKeyPressed(Key_Space)) {
   015B 21 05 80      [10]  311 	ld	hl, #0x8005
   015E CDr00r00      [17]  312 	call	_cpct_isKeyPressed
   0161 7D            [ 4]  313 	ld	a, l
   0162 B7            [ 4]  314 	or	a, a
   0163 28 F3         [12]  315 	jr	Z,00110$
                            316 ;src/main.c:145: akp_sfxPlay();
   0165 CDr00r00      [17]  317 	call	_akp_sfxPlay
   0168 18 EE         [12]  318 	jr	00110$
   016A                     319 ___str_0:
   016A 57 45 57 49 53 48   320 	.ascii "WEWISHYOUAMERRYCHRISTMASWEWISHYOUAMERRYCHRISTMASWEWISHYOUAME"
        59 4F 55 41 4D 45
        52 52 59 43 48 52
        49 53 54 4D 41 53
        57 45 57 49 53 48
        59 4F 55 41 4D 45
        52 52 59 43 48 52
        49 53 54 4D 41 53
        57 45 57 49 53 48
        59 4F 55 41 4D 45
   01A6 52 52 59 43 48 52   321 	.ascii "RRYCHRISTMASANDAHAPPYNEWYEAR"
        49 53 54 4D 41 53
        41 4E 44 41 48 41
        50 50 59 4E 45 57
        59 45 41 52
   01C2 00                  322 	.db 0x00
                            323 	.area _CODE
                            324 	.area _INITIALIZER
                            325 	.area _CABS (ABS)

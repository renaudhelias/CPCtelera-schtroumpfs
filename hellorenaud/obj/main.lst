                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _bank0123
                             14 	.globl _calque4000
                             15 	.globl _calqueC000
                             16 	.globl _raster_halt
                             17 	.globl _cpct_restoreState_mxor_u8
                             18 	.globl _cpct_setSeed_mxor
                             19 	.globl _cpct_getRandom_mxor_u8
                             20 	.globl _cpct_getScreenPtr
                             21 	.globl _cpct_setVideoMemoryOffset
                             22 	.globl _cpct_setPALColour
                             23 	.globl _cpct_setPalette
                             24 	.globl _cpct_setVideoMode
                             25 	.globl _cpct_drawStringM0
                             26 	.globl _cpct_drawCharM0
                             27 	.globl _cpct_hflipSpriteM0
                             28 	.globl _cpct_drawSolidBox
                             29 	.globl _cpct_drawSpriteMasked
                             30 	.globl _cpct_drawSprite
                             31 	.globl _cpct_px2byteM0
                             32 	.globl _cpct_isKeyPressed
                             33 	.globl _cpct_scanKeyboard_f
                             34 	.globl _cpct_setStackLocation
                             35 	.globl _cpct_memset_f64
                             36 	.globl _cpct_setInterruptHandler
                             37 	.globl _g_items_0
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DATA
   0000                      45 _myInterruptHandler_i_1_80:
   0000                      46 	.ds 1
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _INITIALIZED
                             51 ;--------------------------------------------------------
                             52 ; absolute external ram data
                             53 ;--------------------------------------------------------
                             54 	.area _DABS (ABS)
                             55 ;--------------------------------------------------------
                             56 ; global & static initialisations
                             57 ;--------------------------------------------------------
                             58 	.area _HOME
                             59 	.area _GSINIT
                             60 	.area _GSFINAL
                             61 	.area _GSINIT
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area _HOME
                             66 	.area _HOME
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area _CODE
                             71 ;src/main.c:41: void myInterruptHandler() {
                             72 ;	---------------------------------
                             73 ; Function myInterruptHandler
                             74 ; ---------------------------------
   0000                      75 _myInterruptHandler::
                             76 ;src/main.c:45: cpct_setBorder(i+1);
   0000 21r00r00      [10]   77 	ld	hl,#_myInterruptHandler_i_1_80 + 0
   0003 46            [ 7]   78 	ld	b, (hl)
   0004 04            [ 4]   79 	inc	b
   0005 C5            [11]   80 	push	bc
   0006 33            [ 6]   81 	inc	sp
   0007 3E 10         [ 7]   82 	ld	a, #0x10
   0009 F5            [11]   83 	push	af
   000A 33            [ 6]   84 	inc	sp
   000B CDr00r00      [17]   85 	call	_cpct_setPALColour
                             86 ;src/main.c:46: if (++i > 5) i=0;
   000E FD 21r00r00   [14]   87 	ld	iy, #_myInterruptHandler_i_1_80
   0012 FD 34 00      [23]   88 	inc	0 (iy)
   0015 3E 05         [ 7]   89 	ld	a, #0x05
   0017 FD 96 00      [19]   90 	sub	a, 0 (iy)
   001A D0            [11]   91 	ret	NC
   001B FD 36 00 00   [19]   92 	ld	0 (iy), #0x00
   001F C9            [10]   93 	ret
   0020                      94 _g_items_0:
   0020 05                   95 	.db #0x05	; 5
   0021 0F                   96 	.db #0x0f	; 15
   0022 0F                   97 	.db #0x0f	; 15
   0023 00                   98 	.db #0x00	; 0
   0024 0F                   99 	.db #0x0f	; 15
   0025 0F                  100 	.db #0x0f	; 15
   0026 0F                  101 	.db #0x0f	; 15
   0027 0A                  102 	.db #0x0a	; 10
   0028 0F                  103 	.db #0x0f	; 15
   0029 0A                  104 	.db #0x0a	; 10
   002A 05                  105 	.db #0x05	; 5
   002B 00                  106 	.db #0x00	; 0
   002C 0F                  107 	.db #0x0f	; 15
   002D 0A                  108 	.db #0x0a	; 10
   002E 05                  109 	.db #0x05	; 5
   002F 00                  110 	.db #0x00	; 0
   0030 05                  111 	.db #0x05	; 5
   0031 0F                  112 	.db #0x0f	; 15
   0032 0A                  113 	.db #0x0a	; 10
   0033 0A                  114 	.db #0x0a	; 10
   0034 00                  115 	.db #0x00	; 0
   0035 0F                  116 	.db #0x0f	; 15
   0036 0F                  117 	.db #0x0f	; 15
   0037 0A                  118 	.db #0x0a	; 10
   0038 00                  119 	.db #0x00	; 0
   0039 0A                  120 	.db #0x0a	; 10
   003A 0A                  121 	.db #0x0a	; 10
   003B 0A                  122 	.db #0x0a	; 10
   003C 00                  123 	.db #0x00	; 0
   003D 00                  124 	.db #0x00	; 0
   003E 00                  125 	.db #0x00	; 0
   003F 00                  126 	.db #0x00	; 0
                            127 ;src/main.c:55: void main(void) {
                            128 ;	---------------------------------
                            129 ; Function main
                            130 ; ---------------------------------
   0040                     131 _main::
                            132 ;src/main.c:58: u8* sprite=g_items_0;
                            133 ;src/main.c:71: raster_halt();
   0040 CDr00r00      [17]  134 	call	_raster_halt
                            135 ;src/main.c:72: cpct_setStackLocation(0x8000);
   0043 21 00 80      [10]  136 	ld	hl, #0x8000
   0046 CDr00r00      [17]  137 	call	_cpct_setStackLocation
                            138 ;src/main.c:77: bank0123();
   0049 CDr00r00      [17]  139 	call	_bank0123
                            140 ;src/main.c:78: calque4000();
   004C CDr00r00      [17]  141 	call	_calque4000
                            142 ;src/main.c:82: cpct_setVideoMode(0);
   004F 2E 00         [ 7]  143 	ld	l, #0x00
   0051 CDr00r00      [17]  144 	call	_cpct_setVideoMode
                            145 ;src/main.c:84: cpct_setBorder(HW_BLACK);
   0054 21 10 14      [10]  146 	ld	hl, #0x1410
   0057 E5            [11]  147 	push	hl
   0058 CDr00r00      [17]  148 	call	_cpct_setPALColour
                            149 ;src/main.c:85: cpct_setPalette(g_tile_palette, 16);
   005B 21 10 00      [10]  150 	ld	hl, #0x0010
   005E E5            [11]  151 	push	hl
   005F 21r00r00      [10]  152 	ld	hl, #_g_tile_palette
   0062 E5            [11]  153 	push	hl
   0063 CDr00r00      [17]  154 	call	_cpct_setPalette
                            155 ;src/main.c:89: cpct_setVideoMemoryOffset(3);
   0066 2E 03         [ 7]  156 	ld	l, #0x03
   0068 CDr00r00      [17]  157 	call	_cpct_setVideoMemoryOffset
                            158 ;src/main.c:92: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   006B 21 0F 0F      [10]  159 	ld	hl, #0x0f0f
   006E E5            [11]  160 	push	hl
   006F 21 00 C0      [10]  161 	ld	hl, #0xc000
   0072 E5            [11]  162 	push	hl
   0073 CDr00r00      [17]  163 	call	_cpct_getScreenPtr
                            164 ;src/main.c:93: cpct_drawSprite(sprite, p, 4, 8);
   0076 E5            [11]  165 	push	hl
   0077 01 04 08      [10]  166 	ld	bc, #0x0804
   007A C5            [11]  167 	push	bc
   007B E5            [11]  168 	push	hl
   007C 01r20r00      [10]  169 	ld	bc, #_g_items_0
   007F C5            [11]  170 	push	bc
   0080 CDr00r00      [17]  171 	call	_cpct_drawSprite
   0083 01 00 20      [10]  172 	ld	bc, #0x2000
   0086 C5            [11]  173 	push	bc
   0087 01 FF FF      [10]  174 	ld	bc, #0xffff
   008A C5            [11]  175 	push	bc
   008B 01 00 C0      [10]  176 	ld	bc, #0xc000
   008E C5            [11]  177 	push	bc
   008F CDr00r00      [17]  178 	call	_cpct_memset_f64
   0092 01r20r00      [10]  179 	ld	bc, #_g_items_0
   0095 C5            [11]  180 	push	bc
   0096 01 04 08      [10]  181 	ld	bc, #0x0804
   0099 C5            [11]  182 	push	bc
   009A CDr00r00      [17]  183 	call	_cpct_hflipSpriteM0
   009D E1            [10]  184 	pop	hl
                            185 ;src/main.c:101: cpct_drawSprite(sprite, p, 4, 8);
   009E 01 04 08      [10]  186 	ld	bc, #0x0804
   00A1 C5            [11]  187 	push	bc
   00A2 E5            [11]  188 	push	hl
   00A3 21r20r00      [10]  189 	ld	hl, #_g_items_0
   00A6 E5            [11]  190 	push	hl
   00A7 CDr00r00      [17]  191 	call	_cpct_drawSprite
                            192 ;src/main.c:103: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   00AA 21 0F 1F      [10]  193 	ld	hl, #0x1f0f
   00AD E5            [11]  194 	push	hl
   00AE 21 00 C0      [10]  195 	ld	hl, #0xc000
   00B1 E5            [11]  196 	push	hl
   00B2 CDr00r00      [17]  197 	call	_cpct_getScreenPtr
                            198 ;src/main.c:104: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   00B5 E5            [11]  199 	push	hl
   00B6 21 02 03      [10]  200 	ld	hl, #0x0302
   00B9 E5            [11]  201 	push	hl
   00BA CDr00r00      [17]  202 	call	_cpct_px2byteM0
   00BD 55            [ 4]  203 	ld	d, l
   00BE C1            [10]  204 	pop	bc
   00BF 21 0A 14      [10]  205 	ld	hl, #0x140a
   00C2 E5            [11]  206 	push	hl
   00C3 D5            [11]  207 	push	de
   00C4 33            [ 6]  208 	inc	sp
   00C5 C5            [11]  209 	push	bc
   00C6 CDr00r00      [17]  210 	call	_cpct_drawSolidBox
   00C9 F1            [10]  211 	pop	af
                            212 ;src/main.c:107: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 20, 88);
   00CA 33            [ 6]  213 	inc	sp
   00CB 21 14 58      [10]  214 	ld	hl,#0x5814
   00CE E3            [19]  215 	ex	(sp),hl
   00CF 21 00 C0      [10]  216 	ld	hl, #0xc000
   00D2 E5            [11]  217 	push	hl
   00D3 CDr00r00      [17]  218 	call	_cpct_getScreenPtr
                            219 ;src/main.c:108: cpct_drawStringM0("Welcome to you!", pvmem, 2, 0);
   00D6 01r6Dr01      [10]  220 	ld	bc, #___str_0+0
   00D9 11 02 00      [10]  221 	ld	de, #0x0002
   00DC D5            [11]  222 	push	de
   00DD E5            [11]  223 	push	hl
   00DE C5            [11]  224 	push	bc
   00DF CDr00r00      [17]  225 	call	_cpct_drawStringM0
   00E2 21 06 00      [10]  226 	ld	hl, #6
   00E5 39            [11]  227 	add	hl, sp
   00E6 F9            [ 6]  228 	ld	sp, hl
                            229 ;src/main.c:111: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   00E7 21 09 4F      [10]  230 	ld	hl, #0x4f09
   00EA E5            [11]  231 	push	hl
   00EB 21 00 C0      [10]  232 	ld	hl, #0xc000
   00EE E5            [11]  233 	push	hl
   00EF CDr00r00      [17]  234 	call	_cpct_getScreenPtr
                            235 ;src/main.c:112: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   00F2 01r00r00      [10]  236 	ld	bc, #_g_tile_schtroumpf+0
   00F5 11 10 20      [10]  237 	ld	de, #0x2010
   00F8 D5            [11]  238 	push	de
   00F9 E5            [11]  239 	push	hl
   00FA C5            [11]  240 	push	bc
   00FB CDr00r00      [17]  241 	call	_cpct_drawSpriteMasked
                            242 ;src/main.c:114: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 10, 150);
   00FE 21 0A 96      [10]  243 	ld	hl, #0x960a
   0101 E5            [11]  244 	push	hl
   0102 21 00 C0      [10]  245 	ld	hl, #0xc000
   0105 E5            [11]  246 	push	hl
   0106 CDr00r00      [17]  247 	call	_cpct_getScreenPtr
                            248 ;src/main.c:115: cpct_drawStringM0("Press ENTER.", pvmem, 3, 2);
   0109 01r7Dr01      [10]  249 	ld	bc, #___str_1+0
   010C 11 03 02      [10]  250 	ld	de, #0x0203
   010F D5            [11]  251 	push	de
   0110 E5            [11]  252 	push	hl
   0111 C5            [11]  253 	push	bc
   0112 CDr00r00      [17]  254 	call	_cpct_drawStringM0
   0115 21 06 00      [10]  255 	ld	hl, #6
   0118 39            [11]  256 	add	hl, sp
   0119 F9            [ 6]  257 	ld	sp, hl
                            258 ;src/main.c:117: cpct_srand(77);
   011A 21 4D 00      [10]  259 	ld	hl,#0x004d
   011D 11 00 00      [10]  260 	ld	de,#0x0000
   0120 CDr00r00      [17]  261 	call	_cpct_setSeed_mxor
   0123 CDr00r00      [17]  262 	call	_cpct_restoreState_mxor_u8
                            263 ;src/main.c:124: cpct_scanKeyboard_f();
   0126 CDr00r00      [17]  264 	call	_cpct_scanKeyboard_f
                            265 ;src/main.c:125: while (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return)){
   0129                     266 00102$:
   0129 21 00 40      [10]  267 	ld	hl, #0x4000
   012C CDr00r00      [17]  268 	call	_cpct_isKeyPressed
   012F 7D            [ 4]  269 	ld	a, l
   0130 B7            [ 4]  270 	or	a, a
   0131 20 2F         [12]  271 	jr	NZ,00104$
   0133 21 02 04      [10]  272 	ld	hl, #0x0402
   0136 CDr00r00      [17]  273 	call	_cpct_isKeyPressed
   0139 7D            [ 4]  274 	ld	a, l
   013A B7            [ 4]  275 	or	a, a
   013B 20 25         [12]  276 	jr	NZ,00104$
                            277 ;src/main.c:126: p = cpct_getScreenPtr(CPCT_VMEM_START, 8-1, 94);
   013D 21 07 5E      [10]  278 	ld	hl, #0x5e07
   0140 E5            [11]  279 	push	hl
   0141 21 00 C0      [10]  280 	ld	hl, #0xc000
   0144 E5            [11]  281 	push	hl
   0145 CDr00r00      [17]  282 	call	_cpct_getScreenPtr
                            283 ;src/main.c:127: cpct_drawCharM0(p, 2,0, cpct_rand());
   0148 E5            [11]  284 	push	hl
   0149 CDr00r00      [17]  285 	call	_cpct_getRandom_mxor_u8
   014C 55            [ 4]  286 	ld	d, l
   014D E1            [10]  287 	pop	hl
   014E 4D            [ 4]  288 	ld	c, l
   014F 44            [ 4]  289 	ld	b, h
   0150 D5            [11]  290 	push	de
   0151 33            [ 6]  291 	inc	sp
   0152 21 02 00      [10]  292 	ld	hl, #0x0002
   0155 E5            [11]  293 	push	hl
   0156 C5            [11]  294 	push	bc
   0157 CDr00r00      [17]  295 	call	_cpct_drawCharM0
   015A F1            [10]  296 	pop	af
   015B F1            [10]  297 	pop	af
   015C 33            [ 6]  298 	inc	sp
                            299 ;src/main.c:128: cpct_scanKeyboard_f();
   015D CDr00r00      [17]  300 	call	_cpct_scanKeyboard_f
   0160 18 C7         [12]  301 	jr	00102$
   0162                     302 00104$:
                            303 ;src/main.c:130: calqueC000();
   0162 CDr00r00      [17]  304 	call	_calqueC000
                            305 ;src/main.c:131: cpct_setInterruptHandler(myInterruptHandler);
   0165 21r00r00      [10]  306 	ld	hl, #_myInterruptHandler
   0168 CDr00r00      [17]  307 	call	_cpct_setInterruptHandler
                            308 ;src/main.c:132: while (1) {}
   016B                     309 00106$:
   016B 18 FE         [12]  310 	jr	00106$
   016D                     311 ___str_0:
   016D 57 65 6C 63 6F 6D   312 	.ascii "Welcome to you!"
        65 20 74 6F 20 79
        6F 75 21
   017C 00                  313 	.db 0x00
   017D                     314 ___str_1:
   017D 50 72 65 73 73 20   315 	.ascii "Press ENTER."
        45 4E 54 45 52 2E
   0189 00                  316 	.db 0x00
                            317 	.area _CODE
                            318 	.area _INITIALIZER
                            319 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _monterDerniereColonne
                             14 	.globl _monter
                             15 	.globl _bank4_4000
                             16 	.globl _bank0123
                             17 	.globl _calque4000
                             18 	.globl _calqueC000
                             19 	.globl _vsync
                             20 	.globl _rupture
                             21 	.globl _restoreVBL
                             22 	.globl _killVBL
                             23 	.globl _scroll
                             24 	.globl _cpct_restoreState_mxor_u8
                             25 	.globl _cpct_setSeed_mxor
                             26 	.globl _cpct_getScreenPtr
                             27 	.globl _cpct_setVideoMemoryOffset
                             28 	.globl _cpct_setPALColour
                             29 	.globl _cpct_setPalette
                             30 	.globl _cpct_setVideoMode
                             31 	.globl _cpct_hflipSpriteM0
                             32 	.globl _cpct_drawSolidBox
                             33 	.globl _cpct_drawSpriteMasked
                             34 	.globl _cpct_drawSprite
                             35 	.globl _cpct_px2byteM0
                             36 	.globl _cpct_isKeyPressed
                             37 	.globl _cpct_scanKeyboard_f
                             38 	.globl _cpct_memset_f64
                             39 	.globl _cpct_memset
                             40 	.globl _cpct_setInterruptHandler
                             41 	.globl _slow
                             42 	.globl _hScroll
                             43 	.globl _intCounter
                             44 	.globl _g_items_0
                             45 ;--------------------------------------------------------
                             46 ; special function registers
                             47 ;--------------------------------------------------------
                             48 ;--------------------------------------------------------
                             49 ; ram data
                             50 ;--------------------------------------------------------
                             51 	.area _DATA
                             52 ;--------------------------------------------------------
                             53 ; ram data
                             54 ;--------------------------------------------------------
                             55 	.area _INITIALIZED
   0000                      56 _intCounter::
   0000                      57 	.ds 1
   0001                      58 _hScroll::
   0001                      59 	.ds 2
   0003                      60 _slow::
   0003                      61 	.ds 1
                             62 ;--------------------------------------------------------
                             63 ; absolute external ram data
                             64 ;--------------------------------------------------------
                             65 	.area _DABS (ABS)
                             66 ;--------------------------------------------------------
                             67 ; global & static initialisations
                             68 ;--------------------------------------------------------
                             69 	.area _HOME
                             70 	.area _GSINIT
                             71 	.area _GSFINAL
                             72 	.area _GSINIT
                             73 ;--------------------------------------------------------
                             74 ; Home
                             75 ;--------------------------------------------------------
                             76 	.area _HOME
                             77 	.area _HOME
                             78 ;--------------------------------------------------------
                             79 ; code
                             80 ;--------------------------------------------------------
                             81 	.area _CODE
                             82 ;src/main.c:49: void monter(unsigned int c,u16 hScroll) {
                             83 ;	---------------------------------
                             84 ; Function monter
                             85 ; ---------------------------------
   0000                      86 _monter::
   0000 DD E5         [15]   87 	push	ix
   0002 DD 21 00 00   [14]   88 	ld	ix,#0
   0006 DD 39         [15]   89 	add	ix,sp
   0008 F5            [11]   90 	push	af
   0009 F5            [11]   91 	push	af
                             92 ;src/main.c:52: for (l=0;l<8;l++) {
   000A DD 4E 04      [19]   93 	ld	c,4 (ix)
   000D DD 46 05      [19]   94 	ld	b,5 (ix)
   0010 69            [ 4]   95 	ld	l, c
   0011 60            [ 4]   96 	ld	h, b
   0012 29            [11]   97 	add	hl, hl
   0013 29            [11]   98 	add	hl, hl
   0014 09            [11]   99 	add	hl, bc
   0015 29            [11]  100 	add	hl, hl
   0016 29            [11]  101 	add	hl, hl
   0017 29            [11]  102 	add	hl, hl
   0018 29            [11]  103 	add	hl, hl
   0019 DD 75 FE      [19]  104 	ld	-2 (ix), l
   001C DD 74 FF      [19]  105 	ld	-1 (ix), h
   001F DD 4E 06      [19]  106 	ld	c,6 (ix)
   0022 DD 46 07      [19]  107 	ld	b,7 (ix)
   0025 CB 38         [ 8]  108 	srl	b
   0027 CB 19         [ 8]  109 	rr	c
   0029 21 50 00      [10]  110 	ld	hl, #0x0050
   002C E5            [11]  111 	push	hl
   002D C5            [11]  112 	push	bc
   002E CDr00r00      [17]  113 	call	__moduint
   0031 F1            [10]  114 	pop	af
   0032 F1            [10]  115 	pop	af
   0033 DD 74 FD      [19]  116 	ld	-3 (ix), h
   0036 DD 75 FC      [19]  117 	ld	-4 (ix), l
   0039 01 00 00      [10]  118 	ld	bc, #0x0000
   003C                     119 00102$:
                            120 ;src/main.c:54: plot_column=(u8 *)(0x4000 + l*0x800 + 80*c+(hScroll/2)%80);
   003C 79            [ 4]  121 	ld	a, c
   003D 07            [ 4]  122 	rlca
   003E 07            [ 4]  123 	rlca
   003F 07            [ 4]  124 	rlca
   0040 E6 F8         [ 7]  125 	and	a, #0xf8
   0042 57            [ 4]  126 	ld	d, a
   0043 1E 00         [ 7]  127 	ld	e, #0x00
   0045 21 00 40      [10]  128 	ld	hl, #0x4000
   0048 19            [11]  129 	add	hl, de
   0049 DD 5E FE      [19]  130 	ld	e,-2 (ix)
   004C DD 56 FF      [19]  131 	ld	d,-1 (ix)
   004F 19            [11]  132 	add	hl, de
   0050 D1            [10]  133 	pop	de
   0051 D5            [11]  134 	push	de
   0052 19            [11]  135 	add	hl, de
   0053 EB            [ 4]  136 	ex	de,hl
                            137 ;src/main.c:56: *plot_column=*plot_column+0X33;
   0054 1A            [ 7]  138 	ld	a, (de)
   0055 C6 33         [ 7]  139 	add	a, #0x33
   0057 12            [ 7]  140 	ld	(de), a
                            141 ;src/main.c:58: plot_column=plot_column-1;
   0058 1B            [ 6]  142 	dec	de
                            143 ;src/main.c:59: *plot_column=*plot_column+0X33;
   0059 1A            [ 7]  144 	ld	a, (de)
   005A C6 33         [ 7]  145 	add	a, #0x33
   005C 12            [ 7]  146 	ld	(de), a
                            147 ;src/main.c:52: for (l=0;l<8;l++) {
   005D 03            [ 6]  148 	inc	bc
   005E 79            [ 4]  149 	ld	a, c
   005F D6 08         [ 7]  150 	sub	a, #0x08
   0061 78            [ 4]  151 	ld	a, b
   0062 DE 00         [ 7]  152 	sbc	a, #0x00
   0064 38 D6         [12]  153 	jr	C,00102$
   0066 DD F9         [10]  154 	ld	sp, ix
   0068 DD E1         [14]  155 	pop	ix
   006A C9            [10]  156 	ret
   006B                     157 _g_items_0:
   006B 05                  158 	.db #0x05	; 5
   006C 0F                  159 	.db #0x0f	; 15
   006D 0F                  160 	.db #0x0f	; 15
   006E 00                  161 	.db #0x00	; 0
   006F 0F                  162 	.db #0x0f	; 15
   0070 0F                  163 	.db #0x0f	; 15
   0071 0F                  164 	.db #0x0f	; 15
   0072 0A                  165 	.db #0x0a	; 10
   0073 0F                  166 	.db #0x0f	; 15
   0074 0A                  167 	.db #0x0a	; 10
   0075 05                  168 	.db #0x05	; 5
   0076 00                  169 	.db #0x00	; 0
   0077 0F                  170 	.db #0x0f	; 15
   0078 0A                  171 	.db #0x0a	; 10
   0079 05                  172 	.db #0x05	; 5
   007A 00                  173 	.db #0x00	; 0
   007B 05                  174 	.db #0x05	; 5
   007C 0F                  175 	.db #0x0f	; 15
   007D 0A                  176 	.db #0x0a	; 10
   007E 0A                  177 	.db #0x0a	; 10
   007F 00                  178 	.db #0x00	; 0
   0080 0F                  179 	.db #0x0f	; 15
   0081 0F                  180 	.db #0x0f	; 15
   0082 0A                  181 	.db #0x0a	; 10
   0083 00                  182 	.db #0x00	; 0
   0084 0A                  183 	.db #0x0a	; 10
   0085 0A                  184 	.db #0x0a	; 10
   0086 0A                  185 	.db #0x0a	; 10
   0087 00                  186 	.db #0x00	; 0
   0088 00                  187 	.db #0x00	; 0
   0089 00                  188 	.db #0x00	; 0
   008A 00                  189 	.db #0x00	; 0
                            190 ;src/main.c:63: void monterDerniereColonne(u16 hScroll) {
                            191 ;	---------------------------------
                            192 ; Function monterDerniereColonne
                            193 ; ---------------------------------
   008B                     194 _monterDerniereColonne::
                            195 ;src/main.c:64: if (hScroll/80==0) {
   008B 21 50 00      [10]  196 	ld	hl, #0x0050
   008E E5            [11]  197 	push	hl
   008F 21 04 00      [10]  198 	ld	hl, #4
   0092 39            [11]  199 	add	hl, sp
   0093 4E            [ 7]  200 	ld	c, (hl)
   0094 23            [ 6]  201 	inc	hl
   0095 46            [ 7]  202 	ld	b, (hl)
   0096 C5            [11]  203 	push	bc
   0097 CDr00r00      [17]  204 	call	__divuint
   009A F1            [10]  205 	pop	af
   009B F1            [10]  206 	pop	af
   009C 7C            [ 4]  207 	ld	a, h
   009D B5            [ 4]  208 	or	a,l
   009E 20 0F         [12]  209 	jr	NZ,00104$
                            210 ;src/main.c:65: monter(4,hScroll);
   00A0 C1            [10]  211 	pop	bc
   00A1 E1            [10]  212 	pop	hl
   00A2 E5            [11]  213 	push	hl
   00A3 C5            [11]  214 	push	bc
   00A4 E5            [11]  215 	push	hl
   00A5 21 04 00      [10]  216 	ld	hl, #0x0004
   00A8 E5            [11]  217 	push	hl
   00A9 CDr00r00      [17]  218 	call	_monter
   00AC F1            [10]  219 	pop	af
   00AD F1            [10]  220 	pop	af
   00AE C9            [10]  221 	ret
   00AF                     222 00104$:
                            223 ;src/main.c:66: } else if (hScroll/80==1) {
   00AF 7D            [ 4]  224 	ld	a, l
   00B0 3D            [ 4]  225 	dec	a
   00B1 B4            [ 4]  226 	or	a, h
   00B2 C0            [11]  227 	ret	NZ
                            228 ;src/main.c:67: monter(3,hScroll);
   00B3 C1            [10]  229 	pop	bc
   00B4 E1            [10]  230 	pop	hl
   00B5 E5            [11]  231 	push	hl
   00B6 C5            [11]  232 	push	bc
   00B7 E5            [11]  233 	push	hl
   00B8 21 03 00      [10]  234 	ld	hl, #0x0003
   00BB E5            [11]  235 	push	hl
   00BC CDr00r00      [17]  236 	call	_monter
   00BF F1            [10]  237 	pop	af
   00C0 F1            [10]  238 	pop	af
   00C1 C9            [10]  239 	ret
                            240 ;src/main.c:75: void myInterruptHandler() {
                            241 ;	---------------------------------
                            242 ; Function myInterruptHandler
                            243 ; ---------------------------------
   00C2                     244 _myInterruptHandler::
                            245 ;src/main.c:76: intCounter=intCounter+1;
   00C2 FD 21r00r00   [14]  246 	ld	iy, #_intCounter
   00C6 FD 34 00      [23]  247 	inc	0 (iy)
                            248 ;src/main.c:77: if (intCounter == 6) intCounter=0;
   00C9 FD 7E 00      [19]  249 	ld	a, 0 (iy)
   00CC D6 06         [ 7]  250 	sub	a, #0x06
   00CE 20 04         [12]  251 	jr	NZ,00102$
   00D0 FD 36 00 00   [19]  252 	ld	0 (iy), #0x00
   00D4                     253 00102$:
                            254 ;src/main.c:79: if (intCounter == 2) {
   00D4 3Ar00r00      [13]  255 	ld	a,(#_intCounter + 0)
   00D7 D6 02         [ 7]  256 	sub	a, #0x02
   00D9 20 09         [12]  257 	jr	NZ,00104$
                            258 ;src/main.c:80: cpct_setBorder(2);
   00DB 21 10 02      [10]  259 	ld	hl, #0x0210
   00DE E5            [11]  260 	push	hl
   00DF CDr00r00      [17]  261 	call	_cpct_setPALColour
   00E2 18 07         [12]  262 	jr	00105$
   00E4                     263 00104$:
                            264 ;src/main.c:82: cpct_setBorder(3);
   00E4 21 10 03      [10]  265 	ld	hl, #0x0310
   00E7 E5            [11]  266 	push	hl
   00E8 CDr00r00      [17]  267 	call	_cpct_setPALColour
   00EB                     268 00105$:
                            269 ;src/main.c:91: if (intCounter==5) {
   00EB 3Ar00r00      [13]  270 	ld	a,(#_intCounter + 0)
   00EE D6 05         [ 7]  271 	sub	a, #0x05
   00F0 20 46         [12]  272 	jr	NZ,00109$
                            273 ;src/main.c:92: calque4000();
   00F2 CDr00r00      [17]  274 	call	_calque4000
                            275 ;src/main.c:94: hScroll+=1;
   00F5 FD 21r01r00   [14]  276 	ld	iy, #_hScroll
   00F9 FD 34 00      [23]  277 	inc	0 (iy)
   00FC 20 03         [12]  278 	jr	NZ,00146$
   00FE FD 34 01      [23]  279 	inc	1 (iy)
   0101                     280 00146$:
                            281 ;src/main.c:95: if (hScroll==160) {hScroll=0;}
   0101 FD 7E 00      [19]  282 	ld	a, 0 (iy)
   0104 D6 A0         [ 7]  283 	sub	a, #0xa0
   0106 FD B6 01      [19]  284 	or	a, 1 (iy)
   0109 20 06         [12]  285 	jr	NZ,00107$
   010B 21 00 00      [10]  286 	ld	hl, #0x0000
   010E 22r01r00      [16]  287 	ld	(_hScroll), hl
   0111                     288 00107$:
                            289 ;src/main.c:96: monterDerniereColonne(hScroll);
   0111 2Ar01r00      [16]  290 	ld	hl, (_hScroll)
   0114 E5            [11]  291 	push	hl
   0115 CDr8Br00      [17]  292 	call	_monterDerniereColonne
   0118 F1            [10]  293 	pop	af
                            294 ;src/main.c:97: cpct_setVideoMemoryOffset((hScroll/2)%80);
   0119 2Ar01r00      [16]  295 	ld	hl, (_hScroll)
   011C CB 3C         [ 8]  296 	srl	h
   011E CB 1D         [ 8]  297 	rr	l
   0120 01 50 00      [10]  298 	ld	bc, #0x0050
   0123 C5            [11]  299 	push	bc
   0124 E5            [11]  300 	push	hl
   0125 CDr00r00      [17]  301 	call	__moduint
   0128 F1            [10]  302 	pop	af
   0129 F1            [10]  303 	pop	af
   012A CDr00r00      [17]  304 	call	_cpct_setVideoMemoryOffset
                            305 ;src/main.c:98: killVBL();
   012D CDr00r00      [17]  306 	call	_killVBL
                            307 ;src/main.c:99: rupture(19-1);
   0130 3E 12         [ 7]  308 	ld	a, #0x12
   0132 F5            [11]  309 	push	af
   0133 33            [ 6]  310 	inc	sp
   0134 CDr00r00      [17]  311 	call	_rupture
   0137 33            [ 6]  312 	inc	sp
   0138                     313 00109$:
                            314 ;src/main.c:102: if (intCounter==2) {
   0138 3Ar00r00      [13]  315 	ld	a,(#_intCounter + 0)
   013B D6 02         [ 7]  316 	sub	a, #0x02
   013D 20 10         [12]  317 	jr	NZ,00111$
                            318 ;src/main.c:103: calqueC000();
   013F CDr00r00      [17]  319 	call	_calqueC000
                            320 ;src/main.c:104: cpct_setVideoMemoryOffset(0);
   0142 2E 00         [ 7]  321 	ld	l, #0x00
   0144 CDr00r00      [17]  322 	call	_cpct_setVideoMemoryOffset
                            323 ;src/main.c:105: rupture(7);
   0147 3E 07         [ 7]  324 	ld	a, #0x07
   0149 F5            [11]  325 	push	af
   014A 33            [ 6]  326 	inc	sp
   014B CDr00r00      [17]  327 	call	_rupture
   014E 33            [ 6]  328 	inc	sp
   014F                     329 00111$:
                            330 ;src/main.c:108: if (intCounter==3) {
   014F 3Ar00r00      [13]  331 	ld	a,(#_intCounter + 0)
   0152 D6 03         [ 7]  332 	sub	a, #0x03
   0154 C0            [11]  333 	ret	NZ
                            334 ;src/main.c:109: calqueC000();
   0155 CDr00r00      [17]  335 	call	_calqueC000
                            336 ;src/main.c:110: cpct_setVideoMemoryOffset(0);
   0158 2E 00         [ 7]  337 	ld	l, #0x00
   015A CDr00r00      [17]  338 	call	_cpct_setVideoMemoryOffset
                            339 ;src/main.c:111: restoreVBL();
   015D CDr00r00      [17]  340 	call	_restoreVBL
                            341 ;src/main.c:112: rupture(39-19-7+1);
   0160 3E 0E         [ 7]  342 	ld	a, #0x0e
   0162 F5            [11]  343 	push	af
   0163 33            [ 6]  344 	inc	sp
   0164 CDr00r00      [17]  345 	call	_rupture
   0167 33            [ 6]  346 	inc	sp
   0168 C9            [10]  347 	ret
                            348 ;src/main.c:117: void main(void) {
                            349 ;	---------------------------------
                            350 ; Function main
                            351 ; ---------------------------------
   0169                     352 _main::
                            353 ;src/main.c:120: u8* sprite=g_items_0;
                            354 ;src/main.c:136: cpct_setInterruptHandler(myInterruptHandler);
   0169 21rC2r00      [10]  355 	ld	hl, #_myInterruptHandler
   016C CDr00r00      [17]  356 	call	_cpct_setInterruptHandler
                            357 ;src/main.c:140: bank4_4000();
   016F CDr00r00      [17]  358 	call	_bank4_4000
                            359 ;src/main.c:141: bank0123();
   0172 CDr00r00      [17]  360 	call	_bank0123
                            361 ;src/main.c:142: calqueC000();
   0175 CDr00r00      [17]  362 	call	_calqueC000
                            363 ;src/main.c:145: cpct_setVideoMode(0);
   0178 2E 00         [ 7]  364 	ld	l, #0x00
   017A CDr00r00      [17]  365 	call	_cpct_setVideoMode
                            366 ;src/main.c:148: cpct_setBorder(HW_BLACK);
   017D 21 10 14      [10]  367 	ld	hl, #0x1410
   0180 E5            [11]  368 	push	hl
   0181 CDr00r00      [17]  369 	call	_cpct_setPALColour
                            370 ;src/main.c:149: cpct_setPalette(g_tile_palette, 6);
   0184 21 06 00      [10]  371 	ld	hl, #0x0006
   0187 E5            [11]  372 	push	hl
   0188 21r00r00      [10]  373 	ld	hl, #_g_tile_palette
   018B E5            [11]  374 	push	hl
   018C CDr00r00      [17]  375 	call	_cpct_setPalette
                            376 ;src/main.c:150: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   018F 21 00 40      [10]  377 	ld	hl, #0x4000
   0192 E5            [11]  378 	push	hl
   0193 AF            [ 4]  379 	xor	a, a
   0194 F5            [11]  380 	push	af
   0195 33            [ 6]  381 	inc	sp
   0196 26 C0         [ 7]  382 	ld	h, #0xc0
   0198 E5            [11]  383 	push	hl
   0199 CDr00r00      [17]  384 	call	_cpct_memset
                            385 ;src/main.c:155: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   019C 21 0F 0F      [10]  386 	ld	hl, #0x0f0f
   019F E5            [11]  387 	push	hl
   01A0 21 00 C0      [10]  388 	ld	hl, #0xc000
   01A3 E5            [11]  389 	push	hl
   01A4 CDr00r00      [17]  390 	call	_cpct_getScreenPtr
                            391 ;src/main.c:156: cpct_drawSprite(sprite, p, 4, 8);
   01A7 E5            [11]  392 	push	hl
   01A8 01 04 08      [10]  393 	ld	bc, #0x0804
   01AB C5            [11]  394 	push	bc
   01AC E5            [11]  395 	push	hl
   01AD 01r6Br00      [10]  396 	ld	bc, #_g_items_0
   01B0 C5            [11]  397 	push	bc
   01B1 CDr00r00      [17]  398 	call	_cpct_drawSprite
   01B4 01 00 20      [10]  399 	ld	bc, #0x2000
   01B7 C5            [11]  400 	push	bc
   01B8 01 FF FF      [10]  401 	ld	bc, #0xffff
   01BB C5            [11]  402 	push	bc
   01BC 01 00 C0      [10]  403 	ld	bc, #0xc000
   01BF C5            [11]  404 	push	bc
   01C0 CDr00r00      [17]  405 	call	_cpct_memset_f64
   01C3 01r6Br00      [10]  406 	ld	bc, #_g_items_0
   01C6 C5            [11]  407 	push	bc
   01C7 01 04 08      [10]  408 	ld	bc, #0x0804
   01CA C5            [11]  409 	push	bc
   01CB CDr00r00      [17]  410 	call	_cpct_hflipSpriteM0
   01CE E1            [10]  411 	pop	hl
                            412 ;src/main.c:164: cpct_drawSprite(sprite, p, 4, 8);
   01CF 01 04 08      [10]  413 	ld	bc, #0x0804
   01D2 C5            [11]  414 	push	bc
   01D3 E5            [11]  415 	push	hl
   01D4 21r6Br00      [10]  416 	ld	hl, #_g_items_0
   01D7 E5            [11]  417 	push	hl
   01D8 CDr00r00      [17]  418 	call	_cpct_drawSprite
                            419 ;src/main.c:166: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   01DB 21 0F 1F      [10]  420 	ld	hl, #0x1f0f
   01DE E5            [11]  421 	push	hl
   01DF 21 00 C0      [10]  422 	ld	hl, #0xc000
   01E2 E5            [11]  423 	push	hl
   01E3 CDr00r00      [17]  424 	call	_cpct_getScreenPtr
                            425 ;src/main.c:168: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   01E6 E5            [11]  426 	push	hl
   01E7 21 02 03      [10]  427 	ld	hl, #0x0302
   01EA E5            [11]  428 	push	hl
   01EB CDr00r00      [17]  429 	call	_cpct_px2byteM0
   01EE 55            [ 4]  430 	ld	d, l
   01EF C1            [10]  431 	pop	bc
   01F0 21 0A 14      [10]  432 	ld	hl, #0x140a
   01F3 E5            [11]  433 	push	hl
   01F4 D5            [11]  434 	push	de
   01F5 33            [ 6]  435 	inc	sp
   01F6 C5            [11]  436 	push	bc
   01F7 CDr00r00      [17]  437 	call	_cpct_drawSolidBox
   01FA F1            [10]  438 	pop	af
                            439 ;src/main.c:171: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   01FB 33            [ 6]  440 	inc	sp
   01FC 21 09 4F      [10]  441 	ld	hl,#0x4f09
   01FF E3            [19]  442 	ex	(sp),hl
   0200 21 00 C0      [10]  443 	ld	hl, #0xc000
   0203 E5            [11]  444 	push	hl
   0204 CDr00r00      [17]  445 	call	_cpct_getScreenPtr
                            446 ;src/main.c:172: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   0207 01r00r00      [10]  447 	ld	bc, #_g_tile_schtroumpf+0
   020A 11 10 20      [10]  448 	ld	de, #0x2010
   020D D5            [11]  449 	push	de
   020E E5            [11]  450 	push	hl
   020F C5            [11]  451 	push	bc
   0210 CDr00r00      [17]  452 	call	_cpct_drawSpriteMasked
                            453 ;src/main.c:186: cpct_srand(77);
   0213 21 4D 00      [10]  454 	ld	hl,#0x004d
   0216 11 00 00      [10]  455 	ld	de,#0x0000
   0219 CDr00r00      [17]  456 	call	_cpct_setSeed_mxor
   021C CDr00r00      [17]  457 	call	_cpct_restoreState_mxor_u8
                            458 ;src/main.c:190: cpct_scanKeyboard_f();
   021F CDr00r00      [17]  459 	call	_cpct_scanKeyboard_f
                            460 ;src/main.c:191: t=0;
   0222 01 00 00      [10]  461 	ld	bc, #0x0000
                            462 ;src/main.c:192: while (t%128!=0 || (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return))){
   0225                     463 00107$:
   0225 C5            [11]  464 	push	bc
   0226 21 80 00      [10]  465 	ld	hl, #0x0080
   0229 E5            [11]  466 	push	hl
   022A C5            [11]  467 	push	bc
   022B CDr00r00      [17]  468 	call	__modsint
   022E F1            [10]  469 	pop	af
   022F F1            [10]  470 	pop	af
   0230 C1            [10]  471 	pop	bc
   0231 7C            [ 4]  472 	ld	a, h
   0232 B5            [ 4]  473 	or	a,l
   0233 20 18         [12]  474 	jr	NZ,00108$
   0235 C5            [11]  475 	push	bc
   0236 21 00 40      [10]  476 	ld	hl, #0x4000
   0239 CDr00r00      [17]  477 	call	_cpct_isKeyPressed
   023C C1            [10]  478 	pop	bc
   023D 7D            [ 4]  479 	ld	a, l
   023E B7            [ 4]  480 	or	a, a
   023F 20 48         [12]  481 	jr	NZ,00109$
   0241 C5            [11]  482 	push	bc
   0242 21 02 04      [10]  483 	ld	hl, #0x0402
   0245 CDr00r00      [17]  484 	call	_cpct_isKeyPressed
   0248 C1            [10]  485 	pop	bc
   0249 7D            [ 4]  486 	ld	a, l
   024A B7            [ 4]  487 	or	a, a
   024B 20 3C         [12]  488 	jr	NZ,00109$
   024D                     489 00108$:
                            490 ;src/main.c:193: scroll("WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR", 110, t);
   024D C5            [11]  491 	push	bc
   024E C5            [11]  492 	push	bc
   024F 21 6E 00      [10]  493 	ld	hl, #0x006e
   0252 E5            [11]  494 	push	hl
   0253 21r96r02      [10]  495 	ld	hl, #___str_0
   0256 E5            [11]  496 	push	hl
   0257 CDr00r00      [17]  497 	call	_scroll
   025A 21 06 00      [10]  498 	ld	hl, #6
   025D 39            [11]  499 	add	hl, sp
   025E F9            [ 6]  500 	ld	sp, hl
   025F C1            [10]  501 	pop	bc
                            502 ;src/main.c:194: t=t+1;
   0260 03            [ 6]  503 	inc	bc
                            504 ;src/main.c:195: if (t>110*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   0261 3E EC         [ 7]  505 	ld	a, #0xec
   0263 B9            [ 4]  506 	cp	a, c
   0264 3E 04         [ 7]  507 	ld	a, #0x04
   0266 98            [ 4]  508 	sbc	a, b
   0267 E2r6Cr02      [10]  509 	jp	PO, 00139$
   026A EE 80         [ 7]  510 	xor	a, #0x80
   026C                     511 00139$:
   026C F2r72r02      [10]  512 	jp	P, 00102$
   026F 01 00 00      [10]  513 	ld	bc, #0x0000
   0272                     514 00102$:
                            515 ;src/main.c:196: if (t%128==0) {
   0272 C5            [11]  516 	push	bc
   0273 21 80 00      [10]  517 	ld	hl, #0x0080
   0276 E5            [11]  518 	push	hl
   0277 C5            [11]  519 	push	bc
   0278 CDr00r00      [17]  520 	call	__modsint
   027B F1            [10]  521 	pop	af
   027C F1            [10]  522 	pop	af
   027D C1            [10]  523 	pop	bc
   027E 7C            [ 4]  524 	ld	a, h
   027F B5            [ 4]  525 	or	a,l
   0280 20 A3         [12]  526 	jr	NZ,00107$
                            527 ;src/main.c:197: cpct_scanKeyboard_f();
   0282 C5            [11]  528 	push	bc
   0283 CDr00r00      [17]  529 	call	_cpct_scanKeyboard_f
   0286 C1            [10]  530 	pop	bc
   0287 18 9C         [12]  531 	jr	00107$
   0289                     532 00109$:
                            533 ;src/main.c:203: cpct_setVideoMemoryOffset(0);
   0289 2E 00         [ 7]  534 	ld	l, #0x00
   028B CDr00r00      [17]  535 	call	_cpct_setVideoMemoryOffset
                            536 ;src/main.c:204: calque4000();
   028E CDr00r00      [17]  537 	call	_calque4000
                            538 ;src/main.c:206: while (1) {
   0291                     539 00111$:
                            540 ;src/main.c:207: vsync();
   0291 CDr00r00      [17]  541 	call	_vsync
   0294 18 FB         [12]  542 	jr	00111$
   0296                     543 ___str_0:
   0296 57 45 20 57 49 53   544 	.ascii "WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS "
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        57 45 20 57 49 53
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
   02D2 57 45 20 57 49 53   545 	.ascii "WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR"
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        41 4E 44 20 41 20
        48 41 50 50 59 20
        4E 45 57 20 59 45
        41 52
   0304 00                  546 	.db 0x00
                            547 	.area _CODE
                            548 	.area _INITIALIZER
   0000                     549 __xinit__intCounter:
   0000 00                  550 	.db #0x00	; 0
   0001                     551 __xinit__hScroll:
   0001 00 00               552 	.dw #0x0000
   0003                     553 __xinit__slow:
   0003 00                  554 	.db #0x00	; 0
                            555 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _calque4000
                             14 	.globl _calqueC000
                             15 	.globl _cpct_restoreState_mxor_u8
                             16 	.globl _cpct_setSeed_mxor
                             17 	.globl _cpct_getRandom_mxor_u8
                             18 	.globl _cpct_getScreenPtr
                             19 	.globl _cpct_setPALColour
                             20 	.globl _cpct_setPalette
                             21 	.globl _cpct_setVideoMode
                             22 	.globl _cpct_drawStringM0
                             23 	.globl _cpct_drawCharM0
                             24 	.globl _cpct_hflipSpriteM0
                             25 	.globl _cpct_drawSolidBox
                             26 	.globl _cpct_drawSpriteMasked
                             27 	.globl _cpct_drawSprite
                             28 	.globl _cpct_px2byteM0
                             29 	.globl _cpct_isKeyPressed
                             30 	.globl _cpct_scanKeyboard_f
                             31 	.globl _cpct_setStackLocation
                             32 	.globl _cpct_setInterruptHandler
                             33 	.globl _cpct_disableFirmware
                             34 	.globl _g_items_0
                             35 ;--------------------------------------------------------
                             36 ; special function registers
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _DATA
   0000                      42 _myInterruptHandler_i_1_80:
   0000                      43 	.ds 1
                             44 ;--------------------------------------------------------
                             45 ; ram data
                             46 ;--------------------------------------------------------
                             47 	.area _INITIALIZED
                             48 ;--------------------------------------------------------
                             49 ; absolute external ram data
                             50 ;--------------------------------------------------------
                             51 	.area _DABS (ABS)
                             52 ;--------------------------------------------------------
                             53 ; global & static initialisations
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _GSINIT
                             57 	.area _GSFINAL
                             58 	.area _GSINIT
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _HOME
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area _CODE
                             68 ;src/main.c:41: void myInterruptHandler() {
                             69 ;	---------------------------------
                             70 ; Function myInterruptHandler
                             71 ; ---------------------------------
   0000                      72 _myInterruptHandler::
                             73 ;src/main.c:45: cpct_setBorder(i+1);
   0000 21r00r00      [10]   74 	ld	hl,#_myInterruptHandler_i_1_80 + 0
   0003 46            [ 7]   75 	ld	b, (hl)
   0004 04            [ 4]   76 	inc	b
   0005 C5            [11]   77 	push	bc
   0006 33            [ 6]   78 	inc	sp
   0007 3E 10         [ 7]   79 	ld	a, #0x10
   0009 F5            [11]   80 	push	af
   000A 33            [ 6]   81 	inc	sp
   000B CDr00r00      [17]   82 	call	_cpct_setPALColour
                             83 ;src/main.c:46: if (++i > 5) i=0;
   000E FD 21r00r00   [14]   84 	ld	iy, #_myInterruptHandler_i_1_80
   0012 FD 34 00      [23]   85 	inc	0 (iy)
   0015 3E 05         [ 7]   86 	ld	a, #0x05
   0017 FD 96 00      [19]   87 	sub	a, 0 (iy)
   001A D0            [11]   88 	ret	NC
   001B FD 36 00 00   [19]   89 	ld	0 (iy), #0x00
   001F C9            [10]   90 	ret
   0020                      91 _g_items_0:
   0020 05                   92 	.db #0x05	; 5
   0021 0F                   93 	.db #0x0f	; 15
   0022 0F                   94 	.db #0x0f	; 15
   0023 00                   95 	.db #0x00	; 0
   0024 0F                   96 	.db #0x0f	; 15
   0025 0F                   97 	.db #0x0f	; 15
   0026 0F                   98 	.db #0x0f	; 15
   0027 0A                   99 	.db #0x0a	; 10
   0028 0F                  100 	.db #0x0f	; 15
   0029 0A                  101 	.db #0x0a	; 10
   002A 05                  102 	.db #0x05	; 5
   002B 00                  103 	.db #0x00	; 0
   002C 0F                  104 	.db #0x0f	; 15
   002D 0A                  105 	.db #0x0a	; 10
   002E 05                  106 	.db #0x05	; 5
   002F 00                  107 	.db #0x00	; 0
   0030 05                  108 	.db #0x05	; 5
   0031 0F                  109 	.db #0x0f	; 15
   0032 0A                  110 	.db #0x0a	; 10
   0033 0A                  111 	.db #0x0a	; 10
   0034 00                  112 	.db #0x00	; 0
   0035 0F                  113 	.db #0x0f	; 15
   0036 0F                  114 	.db #0x0f	; 15
   0037 0A                  115 	.db #0x0a	; 10
   0038 00                  116 	.db #0x00	; 0
   0039 0A                  117 	.db #0x0a	; 10
   003A 0A                  118 	.db #0x0a	; 10
   003B 0A                  119 	.db #0x0a	; 10
   003C 00                  120 	.db #0x00	; 0
   003D 00                  121 	.db #0x00	; 0
   003E 00                  122 	.db #0x00	; 0
   003F 00                  123 	.db #0x00	; 0
                            124 ;src/main.c:55: void main(void) {
                            125 ;	---------------------------------
                            126 ; Function main
                            127 ; ---------------------------------
   0040                     128 _main::
                            129 ;src/main.c:58: u8* sprite=g_items_0;
                            130 ;src/main.c:69: cpct_disableFirmware();
   0040 CDr00r00      [17]  131 	call	_cpct_disableFirmware
                            132 ;src/main.c:70: cpct_setStackLocation(0x8000);
   0043 21 00 80      [10]  133 	ld	hl, #0x8000
   0046 CDr00r00      [17]  134 	call	_cpct_setStackLocation
                            135 ;src/main.c:76: calque4000();
   0049 CDr00r00      [17]  136 	call	_calque4000
                            137 ;src/main.c:80: cpct_setVideoMode(0);
   004C 2E 00         [ 7]  138 	ld	l, #0x00
   004E CDr00r00      [17]  139 	call	_cpct_setVideoMode
                            140 ;src/main.c:82: cpct_setBorder(HW_BLACK);
   0051 21 10 14      [10]  141 	ld	hl, #0x1410
   0054 E5            [11]  142 	push	hl
   0055 CDr00r00      [17]  143 	call	_cpct_setPALColour
                            144 ;src/main.c:83: cpct_setPalette(g_tile_palette, 16);
   0058 21 10 00      [10]  145 	ld	hl, #0x0010
   005B E5            [11]  146 	push	hl
   005C 21r00r00      [10]  147 	ld	hl, #_g_tile_palette
   005F E5            [11]  148 	push	hl
   0060 CDr00r00      [17]  149 	call	_cpct_setPalette
                            150 ;src/main.c:90: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   0063 21 0F 0F      [10]  151 	ld	hl, #0x0f0f
   0066 E5            [11]  152 	push	hl
   0067 21 00 C0      [10]  153 	ld	hl, #0xc000
   006A E5            [11]  154 	push	hl
   006B CDr00r00      [17]  155 	call	_cpct_getScreenPtr
                            156 ;src/main.c:91: cpct_drawSprite(sprite, p, 4, 8);
   006E 01r20r00      [10]  157 	ld	bc, #_g_items_0
   0071 E5            [11]  158 	push	hl
   0072 C5            [11]  159 	push	bc
   0073 11 04 08      [10]  160 	ld	de, #0x0804
   0076 D5            [11]  161 	push	de
   0077 E5            [11]  162 	push	hl
   0078 C5            [11]  163 	push	bc
   0079 CDr00r00      [17]  164 	call	_cpct_drawSprite
   007C C1            [10]  165 	pop	bc
   007D C5            [11]  166 	push	bc
   007E C5            [11]  167 	push	bc
   007F 11 04 08      [10]  168 	ld	de, #0x0804
   0082 D5            [11]  169 	push	de
   0083 CDr00r00      [17]  170 	call	_cpct_hflipSpriteM0
   0086 C1            [10]  171 	pop	bc
   0087 E1            [10]  172 	pop	hl
                            173 ;src/main.c:99: cpct_drawSprite(sprite, p, 4, 8);
   0088 11 04 08      [10]  174 	ld	de, #0x0804
   008B D5            [11]  175 	push	de
   008C E5            [11]  176 	push	hl
   008D C5            [11]  177 	push	bc
   008E CDr00r00      [17]  178 	call	_cpct_drawSprite
                            179 ;src/main.c:101: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   0091 21 0F 1F      [10]  180 	ld	hl, #0x1f0f
   0094 E5            [11]  181 	push	hl
   0095 21 00 C0      [10]  182 	ld	hl, #0xc000
   0098 E5            [11]  183 	push	hl
   0099 CDr00r00      [17]  184 	call	_cpct_getScreenPtr
                            185 ;src/main.c:102: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   009C E5            [11]  186 	push	hl
   009D 21 02 03      [10]  187 	ld	hl, #0x0302
   00A0 E5            [11]  188 	push	hl
   00A1 CDr00r00      [17]  189 	call	_cpct_px2byteM0
   00A4 55            [ 4]  190 	ld	d, l
   00A5 C1            [10]  191 	pop	bc
   00A6 21 0A 14      [10]  192 	ld	hl, #0x140a
   00A9 E5            [11]  193 	push	hl
   00AA D5            [11]  194 	push	de
   00AB 33            [ 6]  195 	inc	sp
   00AC C5            [11]  196 	push	bc
   00AD CDr00r00      [17]  197 	call	_cpct_drawSolidBox
   00B0 F1            [10]  198 	pop	af
                            199 ;src/main.c:105: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 20, 88);
   00B1 33            [ 6]  200 	inc	sp
   00B2 21 14 58      [10]  201 	ld	hl,#0x5814
   00B5 E3            [19]  202 	ex	(sp),hl
   00B6 21 00 C0      [10]  203 	ld	hl, #0xc000
   00B9 E5            [11]  204 	push	hl
   00BA CDr00r00      [17]  205 	call	_cpct_getScreenPtr
                            206 ;src/main.c:106: cpct_drawStringM0("Welcome to you!", pvmem, 2, 0);
   00BD 01r54r01      [10]  207 	ld	bc, #___str_0+0
   00C0 11 02 00      [10]  208 	ld	de, #0x0002
   00C3 D5            [11]  209 	push	de
   00C4 E5            [11]  210 	push	hl
   00C5 C5            [11]  211 	push	bc
   00C6 CDr00r00      [17]  212 	call	_cpct_drawStringM0
   00C9 21 06 00      [10]  213 	ld	hl, #6
   00CC 39            [11]  214 	add	hl, sp
   00CD F9            [ 6]  215 	ld	sp, hl
                            216 ;src/main.c:109: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   00CE 21 09 4F      [10]  217 	ld	hl, #0x4f09
   00D1 E5            [11]  218 	push	hl
   00D2 21 00 C0      [10]  219 	ld	hl, #0xc000
   00D5 E5            [11]  220 	push	hl
   00D6 CDr00r00      [17]  221 	call	_cpct_getScreenPtr
                            222 ;src/main.c:110: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   00D9 01r00r00      [10]  223 	ld	bc, #_g_tile_schtroumpf+0
   00DC 11 10 20      [10]  224 	ld	de, #0x2010
   00DF D5            [11]  225 	push	de
   00E0 E5            [11]  226 	push	hl
   00E1 C5            [11]  227 	push	bc
   00E2 CDr00r00      [17]  228 	call	_cpct_drawSpriteMasked
                            229 ;src/main.c:112: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 10, 150);
   00E5 21 0A 96      [10]  230 	ld	hl, #0x960a
   00E8 E5            [11]  231 	push	hl
   00E9 21 00 C0      [10]  232 	ld	hl, #0xc000
   00EC E5            [11]  233 	push	hl
   00ED CDr00r00      [17]  234 	call	_cpct_getScreenPtr
                            235 ;src/main.c:113: cpct_drawStringM0("Press ENTER.", pvmem, 3, 2);
   00F0 01r64r01      [10]  236 	ld	bc, #___str_1+0
   00F3 11 03 02      [10]  237 	ld	de, #0x0203
   00F6 D5            [11]  238 	push	de
   00F7 E5            [11]  239 	push	hl
   00F8 C5            [11]  240 	push	bc
   00F9 CDr00r00      [17]  241 	call	_cpct_drawStringM0
   00FC 21 06 00      [10]  242 	ld	hl, #6
   00FF 39            [11]  243 	add	hl, sp
   0100 F9            [ 6]  244 	ld	sp, hl
                            245 ;src/main.c:115: cpct_srand(77);
   0101 21 4D 00      [10]  246 	ld	hl,#0x004d
   0104 11 00 00      [10]  247 	ld	de,#0x0000
   0107 CDr00r00      [17]  248 	call	_cpct_setSeed_mxor
   010A CDr00r00      [17]  249 	call	_cpct_restoreState_mxor_u8
                            250 ;src/main.c:122: cpct_scanKeyboard_f();
   010D CDr00r00      [17]  251 	call	_cpct_scanKeyboard_f
                            252 ;src/main.c:123: while (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return)){
   0110                     253 00102$:
   0110 21 00 40      [10]  254 	ld	hl, #0x4000
   0113 CDr00r00      [17]  255 	call	_cpct_isKeyPressed
   0116 7D            [ 4]  256 	ld	a, l
   0117 B7            [ 4]  257 	or	a, a
   0118 20 2F         [12]  258 	jr	NZ,00104$
   011A 21 02 04      [10]  259 	ld	hl, #0x0402
   011D CDr00r00      [17]  260 	call	_cpct_isKeyPressed
   0120 7D            [ 4]  261 	ld	a, l
   0121 B7            [ 4]  262 	or	a, a
   0122 20 25         [12]  263 	jr	NZ,00104$
                            264 ;src/main.c:124: p = cpct_getScreenPtr(CPCT_VMEM_START, 8-1, 94);
   0124 21 07 5E      [10]  265 	ld	hl, #0x5e07
   0127 E5            [11]  266 	push	hl
   0128 21 00 C0      [10]  267 	ld	hl, #0xc000
   012B E5            [11]  268 	push	hl
   012C CDr00r00      [17]  269 	call	_cpct_getScreenPtr
                            270 ;src/main.c:125: cpct_drawCharM0(p, 2,0, cpct_rand());
   012F E5            [11]  271 	push	hl
   0130 CDr00r00      [17]  272 	call	_cpct_getRandom_mxor_u8
   0133 55            [ 4]  273 	ld	d, l
   0134 E1            [10]  274 	pop	hl
   0135 4D            [ 4]  275 	ld	c, l
   0136 44            [ 4]  276 	ld	b, h
   0137 D5            [11]  277 	push	de
   0138 33            [ 6]  278 	inc	sp
   0139 21 02 00      [10]  279 	ld	hl, #0x0002
   013C E5            [11]  280 	push	hl
   013D C5            [11]  281 	push	bc
   013E CDr00r00      [17]  282 	call	_cpct_drawCharM0
   0141 F1            [10]  283 	pop	af
   0142 F1            [10]  284 	pop	af
   0143 33            [ 6]  285 	inc	sp
                            286 ;src/main.c:126: cpct_scanKeyboard_f();
   0144 CDr00r00      [17]  287 	call	_cpct_scanKeyboard_f
   0147 18 C7         [12]  288 	jr	00102$
   0149                     289 00104$:
                            290 ;src/main.c:128: calqueC000();
   0149 CDr00r00      [17]  291 	call	_calqueC000
                            292 ;src/main.c:129: cpct_setInterruptHandler(myInterruptHandler);
   014C 21r00r00      [10]  293 	ld	hl, #_myInterruptHandler
   014F CDr00r00      [17]  294 	call	_cpct_setInterruptHandler
                            295 ;src/main.c:130: while (1) {}
   0152                     296 00106$:
   0152 18 FE         [12]  297 	jr	00106$
   0154                     298 ___str_0:
   0154 57 65 6C 63 6F 6D   299 	.ascii "Welcome to you!"
        65 20 74 6F 20 79
        6F 75 21
   0163 00                  300 	.db 0x00
   0164                     301 ___str_1:
   0164 50 72 65 73 73 20   302 	.ascii "Press ENTER."
        45 4E 54 45 52 2E
   0170 00                  303 	.db 0x00
                            304 	.area _CODE
                            305 	.area _INITIALIZER
                            306 	.area _CABS (ABS)

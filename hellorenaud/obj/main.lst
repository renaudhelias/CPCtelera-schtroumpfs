                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _draw
                             13 	.globl _myInterruptHandler
                             14 	.globl _crtc
                             15 	.globl _wait_frame_flyback
                             16 	.globl _bank0123
                             17 	.globl _calque8000
                             18 	.globl _calqueC000
                             19 	.globl _rupture
                             20 	.globl _restoreVBL
                             21 	.globl _killVBL
                             22 	.globl _cpct_getScreenPtr
                             23 	.globl _cpct_setVideoMemoryOffset
                             24 	.globl _cpct_setPALColour
                             25 	.globl _cpct_setPalette
                             26 	.globl _cpct_setVideoMode
                             27 	.globl _cpct_hflipSpriteM0
                             28 	.globl _cpct_drawSolidBox
                             29 	.globl _cpct_drawSpriteMasked
                             30 	.globl _cpct_drawSprite
                             31 	.globl _cpct_px2byteM0
                             32 	.globl _cpct_setStackLocation
                             33 	.globl _cpct_memcpy
                             34 	.globl _cpct_memset_f64
                             35 	.globl _cpct_disableFirmware
                             36 	.globl _slow
                             37 	.globl _hOffset
                             38 	.globl _intCounter
                             39 	.globl _screen_plot_address
                             40 	.globl _screen_location
                             41 	.globl _g_items_0
                             42 ;--------------------------------------------------------
                             43 ; special function registers
                             44 ;--------------------------------------------------------
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _DATA
   0000                      49 _screen_location::
   0000                      50 	.ds 2
   0002                      51 _screen_plot_address::
   0002                      52 	.ds 2
                             53 ;--------------------------------------------------------
                             54 ; ram data
                             55 ;--------------------------------------------------------
                             56 	.area _INITIALIZED
   0000                      57 _intCounter::
   0000                      58 	.ds 1
   0001                      59 _hOffset::
   0001                      60 	.ds 2
   0003                      61 _slow::
   0003                      62 	.ds 1
                             63 ;--------------------------------------------------------
                             64 ; absolute external ram data
                             65 ;--------------------------------------------------------
                             66 	.area _DABS (ABS)
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _GSINIT
                             72 	.area _GSFINAL
                             73 	.area _GSINIT
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area _HOME
                             78 	.area _HOME
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area _CODE
                             83 ;src/main.c:67: void wait_frame_flyback() {
                             84 ;	---------------------------------
                             85 ; Function wait_frame_flyback
                             86 ; ---------------------------------
   0000                      87 _wait_frame_flyback::
                             88 ;src/main.c:73: __endasm;
   0000 06 F5         [ 7]   89 	ld	b,#0xf5 ;wait frame flyback
   0002                      90 	l1:
   0002 ED 78         [12]   91 	in a,(c)
   0004 1F            [ 4]   92 	rra
   0005 30 FB         [12]   93 	jr	nc,l1
   0007 C9            [10]   94 	ret
   0008                      95 _g_items_0:
   0008 05                   96 	.db #0x05	; 5
   0009 0F                   97 	.db #0x0f	; 15
   000A 0F                   98 	.db #0x0f	; 15
   000B 00                   99 	.db #0x00	; 0
   000C 0F                  100 	.db #0x0f	; 15
   000D 0F                  101 	.db #0x0f	; 15
   000E 0F                  102 	.db #0x0f	; 15
   000F 0A                  103 	.db #0x0a	; 10
   0010 0F                  104 	.db #0x0f	; 15
   0011 0A                  105 	.db #0x0a	; 10
   0012 05                  106 	.db #0x05	; 5
   0013 00                  107 	.db #0x00	; 0
   0014 0F                  108 	.db #0x0f	; 15
   0015 0A                  109 	.db #0x0a	; 10
   0016 05                  110 	.db #0x05	; 5
   0017 00                  111 	.db #0x00	; 0
   0018 05                  112 	.db #0x05	; 5
   0019 0F                  113 	.db #0x0f	; 15
   001A 0A                  114 	.db #0x0a	; 10
   001B 0A                  115 	.db #0x0a	; 10
   001C 00                  116 	.db #0x00	; 0
   001D 0F                  117 	.db #0x0f	; 15
   001E 0F                  118 	.db #0x0f	; 15
   001F 0A                  119 	.db #0x0a	; 10
   0020 00                  120 	.db #0x00	; 0
   0021 0A                  121 	.db #0x0a	; 10
   0022 0A                  122 	.db #0x0a	; 10
   0023 0A                  123 	.db #0x0a	; 10
   0024 00                  124 	.db #0x00	; 0
   0025 00                  125 	.db #0x00	; 0
   0026 00                  126 	.db #0x00	; 0
   0027 00                  127 	.db #0x00	; 0
                            128 ;src/main.c:76: void crtc(u8* R12R13) {
                            129 ;	---------------------------------
                            130 ; Function crtc
                            131 ; ---------------------------------
   0028                     132 _crtc::
                            133 ;src/main.c:93: __endasm;
   0028 DD E5         [15]  134 	push	ix
   002A DD 21 00 00   [14]  135 	ld	ix,#0
   002E DD 39         [15]  136 	add	ix,sp
   0030 DD 66 05      [19]  137 	ld	h, 5 (ix)
   0033 DD 6E 04      [19]  138 	ld	l, 4 (ix)
   0036 01 0C BC      [10]  139 	ld	bc,#0xbc00+12
   0039 ED 49         [12]  140 	out	(c),c
   003B 04            [ 4]  141 	inc	b
   003C ED 61         [12]  142 	out	(c),h
   003E 05            [ 4]  143 	dec	b
   003F 0C            [ 4]  144 	inc	c
   0040 ED 49         [12]  145 	out	(c),c
   0042 04            [ 4]  146 	inc	b
   0043 ED 69         [12]  147 	out	(c),l
   0045 DD E1         [14]  148 	pop	ix
   0047 C9            [10]  149 	ret
                            150 ;src/main.c:106: void myInterruptHandler() {
                            151 ;	---------------------------------
                            152 ; Function myInterruptHandler
                            153 ; ---------------------------------
   0048                     154 _myInterruptHandler::
                            155 ;src/main.c:109: intCounter=intCounter+1;
   0048 FD 21r00r00   [14]  156 	ld	iy, #_intCounter
   004C FD 34 00      [23]  157 	inc	0 (iy)
                            158 ;src/main.c:110: if (intCounter == 6) intCounter=0;
   004F FD 7E 00      [19]  159 	ld	a, 0 (iy)
   0052 D6 06         [ 7]  160 	sub	a, #0x06
   0054 20 04         [12]  161 	jr	NZ,00102$
   0056 FD 36 00 00   [19]  162 	ld	0 (iy), #0x00
   005A                     163 00102$:
                            164 ;src/main.c:112: if (intCounter == 2) {
   005A 3Ar00r00      [13]  165 	ld	a,(#_intCounter + 0)
   005D D6 02         [ 7]  166 	sub	a, #0x02
   005F 20 09         [12]  167 	jr	NZ,00104$
                            168 ;src/main.c:113: cpct_setBorder(2);
   0061 21 10 02      [10]  169 	ld	hl, #0x0210
   0064 E5            [11]  170 	push	hl
   0065 CDr00r00      [17]  171 	call	_cpct_setPALColour
   0068 18 07         [12]  172 	jr	00105$
   006A                     173 00104$:
                            174 ;src/main.c:115: cpct_setBorder(3);
   006A 21 10 03      [10]  175 	ld	hl, #0x0310
   006D E5            [11]  176 	push	hl
   006E CDr00r00      [17]  177 	call	_cpct_setPALColour
   0071                     178 00105$:
                            179 ;src/main.c:124: if (intCounter==5) {
   0071 FD 21r00r00   [14]  180 	ld	iy, #_intCounter
   0075 FD 7E 00      [19]  181 	ld	a, 0 (iy)
   0078 D6 05         [ 7]  182 	sub	a, #0x05
   007A 20 5B         [12]  183 	jr	NZ,00107$
                            184 ;src/main.c:154: __endasm;
   007C 01 06 BC      [10]  185 	ld	bc,#0xbc06
   007F ED 49         [12]  186 	out	(c),c
   0081 01 04 BD      [10]  187 	ld	bc,#0xbd04
   0084 ED 49         [12]  188 	out	(c),c
                            189 ;src/main.c:156: screen_location++;
   0086 FD 21r00r00   [14]  190 	ld	iy, #_screen_location
   008A FD 34 00      [23]  191 	inc	0 (iy)
   008D 20 03         [12]  192 	jr	NZ,00140$
   008F FD 34 01      [23]  193 	inc	1 (iy)
   0092                     194 00140$:
                            195 ;src/main.c:157: screen_location=(u8 *)(((unsigned int)screen_location) & 0x23FF);
   0092 2Ar00r00      [16]  196 	ld	hl, (_screen_location)
   0095 7C            [ 4]  197 	ld	a, h
   0096 E6 23         [ 7]  198 	and	a, #0x23
   0098 67            [ 4]  199 	ld	h, a
   0099 22r00r00      [16]  200 	ld	(_screen_location), hl
                            201 ;src/main.c:158: crtc(screen_location);
   009C 2Ar00r00      [16]  202 	ld	hl, (_screen_location)
   009F E5            [11]  203 	push	hl
   00A0 CDr28r00      [17]  204 	call	_crtc
   00A3 F1            [10]  205 	pop	af
                            206 ;src/main.c:160: screen_plot_address++;
   00A4 FD 21r02r00   [14]  207 	ld	iy, #_screen_plot_address
   00A8 FD 34 00      [23]  208 	inc	0 (iy)
   00AB 20 03         [12]  209 	jr	NZ,00141$
   00AD FD 34 01      [23]  210 	inc	1 (iy)
   00B0                     211 00141$:
                            212 ;src/main.c:161: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   00B0 2Ar02r00      [16]  213 	ld	hl, (_screen_plot_address)
   00B3 7C            [ 4]  214 	ld	a, h
   00B4 E6 87         [ 7]  215 	and	a, #0x87
   00B6 67            [ 4]  216 	ld	h, a
   00B7 22r02r00      [16]  217 	ld	(_screen_plot_address), hl
                            218 ;src/main.c:162: screen_plot_address++;
   00BA FD 34 00      [23]  219 	inc	0 (iy)
   00BD 20 03         [12]  220 	jr	NZ,00142$
   00BF FD 34 01      [23]  221 	inc	1 (iy)
   00C2                     222 00142$:
                            223 ;src/main.c:163: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   00C2 2Ar02r00      [16]  224 	ld	hl, (_screen_plot_address)
   00C5 7C            [ 4]  225 	ld	a, h
   00C6 E6 87         [ 7]  226 	and	a, #0x87
   00C8 67            [ 4]  227 	ld	h, a
   00C9 22r02r00      [16]  228 	ld	(_screen_plot_address), hl
                            229 ;src/main.c:166: killVBL();
   00CC CDr00r00      [17]  230 	call	_killVBL
                            231 ;src/main.c:167: rupture(19-1);
   00CF 3E 12         [ 7]  232 	ld	a, #0x12
   00D1 F5            [11]  233 	push	af
   00D2 33            [ 6]  234 	inc	sp
   00D3 CDr00r00      [17]  235 	call	_rupture
   00D6 33            [ 6]  236 	inc	sp
   00D7                     237 00107$:
                            238 ;src/main.c:172: if (intCounter==2) {
   00D7 FD 21r00r00   [14]  239 	ld	iy, #_intCounter
   00DB FD 7E 00      [19]  240 	ld	a, 0 (iy)
   00DE D6 02         [ 7]  241 	sub	a, #0x02
   00E0 20 1A         [12]  242 	jr	NZ,00109$
                            243 ;src/main.c:178: __endasm;
   00E2 01 06 BC      [10]  244 	ld	bc,#0xbc06
   00E5 ED 49         [12]  245 	out	(c),c
   00E7 01 19 BD      [10]  246 	ld	bc,#0xbd19
   00EA ED 49         [12]  247 	out	(c),c
                            248 ;src/main.c:179: calqueC000();
   00EC CDr00r00      [17]  249 	call	_calqueC000
                            250 ;src/main.c:180: cpct_setVideoMemoryOffset(0);
   00EF 2E 00         [ 7]  251 	ld	l, #0x00
   00F1 CDr00r00      [17]  252 	call	_cpct_setVideoMemoryOffset
                            253 ;src/main.c:181: rupture(7);
   00F4 3E 07         [ 7]  254 	ld	a, #0x07
   00F6 F5            [11]  255 	push	af
   00F7 33            [ 6]  256 	inc	sp
   00F8 CDr00r00      [17]  257 	call	_rupture
   00FB 33            [ 6]  258 	inc	sp
   00FC                     259 00109$:
                            260 ;src/main.c:184: if (intCounter==3) {
   00FC 3Ar00r00      [13]  261 	ld	a,(#_intCounter + 0)
   00FF D6 03         [ 7]  262 	sub	a, #0x03
   0101 C0            [11]  263 	ret	NZ
                            264 ;src/main.c:185: calqueC000();
   0102 CDr00r00      [17]  265 	call	_calqueC000
                            266 ;src/main.c:186: cpct_setVideoMemoryOffset(0);
   0105 2E 00         [ 7]  267 	ld	l, #0x00
   0107 CDr00r00      [17]  268 	call	_cpct_setVideoMemoryOffset
                            269 ;src/main.c:187: restoreVBL();
   010A CDr00r00      [17]  270 	call	_restoreVBL
                            271 ;src/main.c:188: rupture(39-19-7+1);
   010D 3E 0E         [ 7]  272 	ld	a, #0x0e
   010F F5            [11]  273 	push	af
   0110 33            [ 6]  274 	inc	sp
   0111 CDr00r00      [17]  275 	call	_rupture
   0114 33            [ 6]  276 	inc	sp
   0115 C9            [10]  277 	ret
                            278 ;src/main.c:193: void draw(char * texte, int texte_cur, int offset) {
                            279 ;	---------------------------------
                            280 ; Function draw
                            281 ; ---------------------------------
   0116                     282 _draw::
   0116 DD E5         [15]  283 	push	ix
   0118 DD 21 00 00   [14]  284 	ld	ix,#0
   011C DD 39         [15]  285 	add	ix,sp
                            286 ;src/main.c:194: u8* pointeur=(u16)g_tile_fontmap32x32plat_000;
   011E 01r00r00      [10]  287 	ld	bc, #_g_tile_fontmap32x32plat_000+0
                            288 ;src/main.c:195: pointeur = pointeur+(texte[texte_cur]-'A')*(32*2)+2*(32*2);
   0121 DD 7E 04      [19]  289 	ld	a, 4 (ix)
   0124 DD 86 06      [19]  290 	add	a, 6 (ix)
   0127 6F            [ 4]  291 	ld	l, a
   0128 DD 7E 05      [19]  292 	ld	a, 5 (ix)
   012B DD 8E 07      [19]  293 	adc	a, 7 (ix)
   012E 67            [ 4]  294 	ld	h, a
   012F 5E            [ 7]  295 	ld	e, (hl)
   0130 16 00         [ 7]  296 	ld	d, #0x00
   0132 7B            [ 4]  297 	ld	a, e
   0133 C6 BF         [ 7]  298 	add	a, #0xbf
   0135 6F            [ 4]  299 	ld	l, a
   0136 7A            [ 4]  300 	ld	a, d
   0137 CE FF         [ 7]  301 	adc	a, #0xff
   0139 67            [ 4]  302 	ld	h, a
   013A 29            [11]  303 	add	hl, hl
   013B 29            [11]  304 	add	hl, hl
   013C 29            [11]  305 	add	hl, hl
   013D 29            [11]  306 	add	hl, hl
   013E 29            [11]  307 	add	hl, hl
   013F 29            [11]  308 	add	hl, hl
   0140 09            [11]  309 	add	hl,bc
   0141 01 80 00      [10]  310 	ld	bc,#0x0080
   0144 09            [11]  311 	add	hl,bc
   0145 EB            [ 4]  312 	ex	de,hl
                            313 ;src/main.c:196: cpct_drawSprite(pointeur+offset*(32*2), screen_plot_address, G_TILE_FONTMAP32X32PLAT_000_W, G_TILE_FONTMAP32X32PLAT_000_H);
   0146 ED 4Br02r00   [20]  314 	ld	bc, (_screen_plot_address)
   014A DD 6E 08      [19]  315 	ld	l,8 (ix)
   014D DD 66 09      [19]  316 	ld	h,9 (ix)
   0150 29            [11]  317 	add	hl, hl
   0151 29            [11]  318 	add	hl, hl
   0152 29            [11]  319 	add	hl, hl
   0153 29            [11]  320 	add	hl, hl
   0154 29            [11]  321 	add	hl, hl
   0155 29            [11]  322 	add	hl, hl
   0156 19            [11]  323 	add	hl, de
   0157 11 02 20      [10]  324 	ld	de, #0x2002
   015A D5            [11]  325 	push	de
   015B C5            [11]  326 	push	bc
   015C E5            [11]  327 	push	hl
   015D CDr00r00      [17]  328 	call	_cpct_drawSprite
   0160 DD E1         [14]  329 	pop	ix
   0162 C9            [10]  330 	ret
                            331 ;src/main.c:199: void main(void) {
                            332 ;	---------------------------------
                            333 ; Function main
                            334 ; ---------------------------------
   0163                     335 _main::
   0163 DD E5         [15]  336 	push	ix
   0165 DD 21 00 00   [14]  337 	ld	ix,#0
   0169 DD 39         [15]  338 	add	ix,sp
   016B F5            [11]  339 	push	af
                            340 ;src/main.c:201: int s=0;
   016C 01 00 00      [10]  341 	ld	bc, #0x0000
                            342 ;src/main.c:203: u8* sprite=g_items_0;
                            343 ;src/main.c:206: int texte_cur=0;
   016F 21 00 00      [10]  344 	ld	hl, #0x0000
   0172 E3            [19]  345 	ex	(sp), hl
                            346 ;src/main.c:222: cpct_disableFirmware();
   0173 C5            [11]  347 	push	bc
   0174 CDr00r00      [17]  348 	call	_cpct_disableFirmware
   0177 21 00 10      [10]  349 	ld	hl, #0x1000
   017A E5            [11]  350 	push	hl
   017B 26 80         [ 7]  351 	ld	h, #0x80
   017D E5            [11]  352 	push	hl
   017E 26 70         [ 7]  353 	ld	h, #0x70
   0180 E5            [11]  354 	push	hl
   0181 CDr00r00      [17]  355 	call	_cpct_memcpy
   0184 21 00 70      [10]  356 	ld	hl, #0x7000
   0187 CDr00r00      [17]  357 	call	_cpct_setStackLocation
   018A 21 00 40      [10]  358 	ld	hl, #0x4000
   018D E5            [11]  359 	push	hl
   018E 26 00         [ 7]  360 	ld	h, #0x00
   0190 E5            [11]  361 	push	hl
   0191 26 80         [ 7]  362 	ld	h, #0x80
   0193 E5            [11]  363 	push	hl
   0194 CDr00r00      [17]  364 	call	_cpct_memset_f64
   0197 CDr00r00      [17]  365 	call	_bank0123
   019A 2E 00         [ 7]  366 	ld	l, #0x00
   019C CDr00r00      [17]  367 	call	_cpct_setVideoMode
   019F 21 10 14      [10]  368 	ld	hl, #0x1410
   01A2 E5            [11]  369 	push	hl
   01A3 CDr00r00      [17]  370 	call	_cpct_setPALColour
   01A6 21 06 00      [10]  371 	ld	hl, #0x0006
   01A9 E5            [11]  372 	push	hl
   01AA 21r00r00      [10]  373 	ld	hl, #_g_tile_palette
   01AD E5            [11]  374 	push	hl
   01AE CDr00r00      [17]  375 	call	_cpct_setPalette
   01B1 21 0F 0F      [10]  376 	ld	hl, #0x0f0f
   01B4 E5            [11]  377 	push	hl
   01B5 21 00 C0      [10]  378 	ld	hl, #0xc000
   01B8 E5            [11]  379 	push	hl
   01B9 CDr00r00      [17]  380 	call	_cpct_getScreenPtr
   01BC C1            [10]  381 	pop	bc
                            382 ;src/main.c:252: cpct_memset_f64(CPCT_VMEM_START, 0xFFFF, 0x2000);
   01BD E5            [11]  383 	push	hl
   01BE C5            [11]  384 	push	bc
   01BF 11 00 20      [10]  385 	ld	de, #0x2000
   01C2 D5            [11]  386 	push	de
   01C3 11 FF FF      [10]  387 	ld	de, #0xffff
   01C6 D5            [11]  388 	push	de
   01C7 11 00 C0      [10]  389 	ld	de, #0xc000
   01CA D5            [11]  390 	push	de
   01CB CDr00r00      [17]  391 	call	_cpct_memset_f64
   01CE 11r08r00      [10]  392 	ld	de, #_g_items_0
   01D1 D5            [11]  393 	push	de
   01D2 11 04 08      [10]  394 	ld	de, #0x0804
   01D5 D5            [11]  395 	push	de
   01D6 CDr00r00      [17]  396 	call	_cpct_hflipSpriteM0
   01D9 C1            [10]  397 	pop	bc
   01DA E1            [10]  398 	pop	hl
                            399 ;src/main.c:256: cpct_drawSprite(sprite, p, 4, 8);
   01DB C5            [11]  400 	push	bc
   01DC 11 04 08      [10]  401 	ld	de, #0x0804
   01DF D5            [11]  402 	push	de
   01E0 E5            [11]  403 	push	hl
   01E1 21r08r00      [10]  404 	ld	hl, #_g_items_0
   01E4 E5            [11]  405 	push	hl
   01E5 CDr00r00      [17]  406 	call	_cpct_drawSprite
   01E8 21 0F 1F      [10]  407 	ld	hl, #0x1f0f
   01EB E5            [11]  408 	push	hl
   01EC 21 00 C0      [10]  409 	ld	hl, #0xc000
   01EF E5            [11]  410 	push	hl
   01F0 CDr00r00      [17]  411 	call	_cpct_getScreenPtr
   01F3 C1            [10]  412 	pop	bc
                            413 ;src/main.c:260: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   01F4 E5            [11]  414 	push	hl
   01F5 C5            [11]  415 	push	bc
   01F6 11 02 03      [10]  416 	ld	de, #0x0302
   01F9 D5            [11]  417 	push	de
   01FA CDr00r00      [17]  418 	call	_cpct_px2byteM0
   01FD 55            [ 4]  419 	ld	d, l
   01FE C1            [10]  420 	pop	bc
   01FF FD E1         [14]  421 	pop	iy
   0201 C5            [11]  422 	push	bc
   0202 21 0A 14      [10]  423 	ld	hl, #0x140a
   0205 E5            [11]  424 	push	hl
   0206 D5            [11]  425 	push	de
   0207 33            [ 6]  426 	inc	sp
   0208 FD E5         [15]  427 	push	iy
   020A CDr00r00      [17]  428 	call	_cpct_drawSolidBox
   020D F1            [10]  429 	pop	af
   020E F1            [10]  430 	pop	af
   020F 33            [ 6]  431 	inc	sp
   0210 21 09 4F      [10]  432 	ld	hl, #0x4f09
   0213 E5            [11]  433 	push	hl
   0214 21 00 C0      [10]  434 	ld	hl, #0xc000
   0217 E5            [11]  435 	push	hl
   0218 CDr00r00      [17]  436 	call	_cpct_getScreenPtr
   021B EB            [ 4]  437 	ex	de,hl
   021C 21 10 20      [10]  438 	ld	hl, #0x2010
   021F E5            [11]  439 	push	hl
   0220 D5            [11]  440 	push	de
   0221 21r00r00      [10]  441 	ld	hl, #_g_tile_schtroumpf
   0224 E5            [11]  442 	push	hl
   0225 CDr00r00      [17]  443 	call	_cpct_drawSpriteMasked
   0228 CDr00r00      [17]  444 	call	_calqueC000
   022B CDr00r00      [17]  445 	call	_calque8000
   022E C1            [10]  446 	pop	bc
                            447 ;src/main.c:314: screen_location=(u8 *)(0x2000);
   022F 21 00 20      [10]  448 	ld	hl, #0x2000
   0232 22r00r00      [16]  449 	ld	(_screen_location), hl
                            450 ;src/main.c:315: screen_plot_address=(u8 *)(0x8000+80-2);
   0235 21 4E 80      [10]  451 	ld	hl, #0x804e
   0238 22r02r00      [16]  452 	ld	(_screen_plot_address), hl
                            453 ;src/main.c:317: while (1) {
   023B                     454 00108$:
                            455 ;src/main.c:320: wait_frame_flyback();
   023B C5            [11]  456 	push	bc
   023C CDr00r00      [17]  457 	call	_wait_frame_flyback
   023F C1            [10]  458 	pop	bc
                            459 ;src/main.c:324: screen_location++;
   0240 FD 21r00r00   [14]  460 	ld	iy, #_screen_location
   0244 FD 34 00      [23]  461 	inc	0 (iy)
   0247 20 03         [12]  462 	jr	NZ,00128$
   0249 FD 34 01      [23]  463 	inc	1 (iy)
   024C                     464 00128$:
                            465 ;src/main.c:325: screen_location=(u8 *)(((unsigned int)screen_location) & 0x23FF);
   024C 2Ar00r00      [16]  466 	ld	hl, (_screen_location)
   024F 7C            [ 4]  467 	ld	a, h
   0250 E6 23         [ 7]  468 	and	a, #0x23
   0252 67            [ 4]  469 	ld	h, a
   0253 22r00r00      [16]  470 	ld	(_screen_location), hl
                            471 ;src/main.c:326: crtc(screen_location);
   0256 C5            [11]  472 	push	bc
   0257 2Ar00r00      [16]  473 	ld	hl, (_screen_location)
   025A E5            [11]  474 	push	hl
   025B CDr28r00      [17]  475 	call	_crtc
   025E F1            [10]  476 	pop	af
   025F C1            [10]  477 	pop	bc
                            478 ;src/main.c:328: screen_plot_address++;
   0260 FD 21r02r00   [14]  479 	ld	iy, #_screen_plot_address
   0264 FD 34 00      [23]  480 	inc	0 (iy)
   0267 20 03         [12]  481 	jr	NZ,00129$
   0269 FD 34 01      [23]  482 	inc	1 (iy)
   026C                     483 00129$:
                            484 ;src/main.c:329: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   026C 2Ar02r00      [16]  485 	ld	hl, (_screen_plot_address)
   026F 7C            [ 4]  486 	ld	a, h
   0270 E6 87         [ 7]  487 	and	a, #0x87
   0272 67            [ 4]  488 	ld	h, a
   0273 22r02r00      [16]  489 	ld	(_screen_plot_address), hl
                            490 ;src/main.c:330: screen_plot_address++;
   0276 FD 34 00      [23]  491 	inc	0 (iy)
   0279 20 03         [12]  492 	jr	NZ,00130$
   027B FD 34 01      [23]  493 	inc	1 (iy)
   027E                     494 00130$:
                            495 ;src/main.c:331: screen_plot_address=(u8 *)(((unsigned int)screen_plot_address) & 0x87FF);
   027E 2Ar02r00      [16]  496 	ld	hl, (_screen_plot_address)
   0281 7C            [ 4]  497 	ld	a, h
   0282 E6 87         [ 7]  498 	and	a, #0x87
   0284 67            [ 4]  499 	ld	h, a
   0285 22r02r00      [16]  500 	ld	(_screen_plot_address), hl
                            501 ;src/main.c:335: s=s+1;
   0288 03            [ 6]  502 	inc	bc
                            503 ;src/main.c:336: if (s==8) {s=0;}
   0289 79            [ 4]  504 	ld	a, c
   028A D6 08         [ 7]  505 	sub	a, #0x08
   028C B0            [ 4]  506 	or	a, b
   028D 20 03         [12]  507 	jr	NZ,00102$
   028F 01 00 00      [10]  508 	ld	bc, #0x0000
   0292                     509 00102$:
                            510 ;src/main.c:337: if (s==0) {texte_cur=texte_cur+1; if (texte_cur==texte_length) {texte_cur=0;}}
   0292 78            [ 4]  511 	ld	a, b
   0293 B1            [ 4]  512 	or	a,c
   0294 20 16         [12]  513 	jr	NZ,00106$
   0296 DD 34 FE      [23]  514 	inc	-2 (ix)
   0299 20 03         [12]  515 	jr	NZ,00133$
   029B DD 34 FF      [23]  516 	inc	-1 (ix)
   029E                     517 00133$:
   029E DD 7E FE      [19]  518 	ld	a, -2 (ix)
   02A1 D6 10         [ 7]  519 	sub	a, #0x10
   02A3 DD B6 FF      [19]  520 	or	a, -1 (ix)
   02A6 20 04         [12]  521 	jr	NZ,00106$
   02A8 21 00 00      [10]  522 	ld	hl, #0x0000
   02AB E3            [19]  523 	ex	(sp), hl
   02AC                     524 00106$:
                            525 ;src/main.c:345: draw("HELLO@LES@AMIS@@",texte_cur,s);
   02AC C5            [11]  526 	push	bc
   02AD C5            [11]  527 	push	bc
   02AE DD 6E FE      [19]  528 	ld	l,-2 (ix)
   02B1 DD 66 FF      [19]  529 	ld	h,-1 (ix)
   02B4 E5            [11]  530 	push	hl
   02B5 21rC5r02      [10]  531 	ld	hl, #___str_0
   02B8 E5            [11]  532 	push	hl
   02B9 CDr16r01      [17]  533 	call	_draw
   02BC 21 06 00      [10]  534 	ld	hl, #6
   02BF 39            [11]  535 	add	hl, sp
   02C0 F9            [ 6]  536 	ld	sp, hl
   02C1 C1            [10]  537 	pop	bc
   02C2 C3r3Br02      [10]  538 	jp	00108$
   02C5                     539 ___str_0:
   02C5 48 45 4C 4C 4F 40   540 	.ascii "HELLO@LES@AMIS@@"
        4C 45 53 40 41 4D
        49 53 40 40
   02D5 00                  541 	.db 0x00
                            542 	.area _CODE
                            543 	.area _INITIALIZER
   0000                     544 __xinit__intCounter:
   0000 00                  545 	.db #0x00	; 0
   0001                     546 __xinit__hOffset:
   0001 00 00               547 	.dw #0x0000
   0003                     548 __xinit__slow:
   0003 00                  549 	.db #0x00	; 0
                            550 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _monterDerniereColonne
                             14 	.globl _bank4_4000
                             15 	.globl _bank0123
                             16 	.globl _calque4000
                             17 	.globl _calqueC000
                             18 	.globl _vsync
                             19 	.globl _rupture
                             20 	.globl _restoreVBL
                             21 	.globl _killVBL
                             22 	.globl _scroll
                             23 	.globl _cpct_restoreState_mxor_u8
                             24 	.globl _cpct_setSeed_mxor
                             25 	.globl _cpct_getScreenPtr
                             26 	.globl _cpct_setVideoMemoryOffset
                             27 	.globl _cpct_setPALColour
                             28 	.globl _cpct_setPalette
                             29 	.globl _cpct_setVideoMode
                             30 	.globl _cpct_hflipSpriteM0
                             31 	.globl _cpct_drawSolidBox
                             32 	.globl _cpct_drawSpriteMasked
                             33 	.globl _cpct_drawSprite
                             34 	.globl _cpct_px2byteM0
                             35 	.globl _cpct_isKeyPressed
                             36 	.globl _cpct_scanKeyboard_f
                             37 	.globl _cpct_memcpy
                             38 	.globl _cpct_memset_f64
                             39 	.globl _cpct_memset
                             40 	.globl _cpct_setInterruptHandler
                             41 	.globl _hScroll
                             42 	.globl _intCounter
                             43 	.globl _g_items_0
                             44 ;--------------------------------------------------------
                             45 ; special function registers
                             46 ;--------------------------------------------------------
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DATA
                             51 ;--------------------------------------------------------
                             52 ; ram data
                             53 ;--------------------------------------------------------
                             54 	.area _INITIALIZED
   0000                      55 _intCounter::
   0000                      56 	.ds 1
   0001                      57 _hScroll::
   0001                      58 	.ds 1
                             59 ;--------------------------------------------------------
                             60 ; absolute external ram data
                             61 ;--------------------------------------------------------
                             62 	.area _DABS (ABS)
                             63 ;--------------------------------------------------------
                             64 ; global & static initialisations
                             65 ;--------------------------------------------------------
                             66 	.area _HOME
                             67 	.area _GSINIT
                             68 	.area _GSFINAL
                             69 	.area _GSINIT
                             70 ;--------------------------------------------------------
                             71 ; Home
                             72 ;--------------------------------------------------------
                             73 	.area _HOME
                             74 	.area _HOME
                             75 ;--------------------------------------------------------
                             76 ; code
                             77 ;--------------------------------------------------------
                             78 	.area _CODE
                             79 ;src/main.c:49: void monterDerniereColonne() {
                             80 ;	---------------------------------
                             81 ; Function monterDerniereColonne
                             82 ; ---------------------------------
   0000                      83 _monterDerniereColonne::
   0000 DD E5         [15]   84 	push	ix
   0002 DD 21 00 00   [14]   85 	ld	ix,#0
   0006 DD 39         [15]   86 	add	ix,sp
   0008 F5            [11]   87 	push	af
                             88 ;src/main.c:55: for (c=0;c<4;c++) {// caractères hauteur
   0009 01 00 00      [10]   89 	ld	bc, #0x0000
                             90 ;src/main.c:56: for (l=0;l<8;l++) {
   000C                      91 00109$:
   000C 69            [ 4]   92 	ld	l, c
   000D 60            [ 4]   93 	ld	h, b
   000E 29            [11]   94 	add	hl, hl
   000F 29            [11]   95 	add	hl, hl
   0010 09            [11]   96 	add	hl, bc
   0011 29            [11]   97 	add	hl, hl
   0012 29            [11]   98 	add	hl, hl
   0013 29            [11]   99 	add	hl, hl
   0014 29            [11]  100 	add	hl, hl
   0015 11 4F 40      [10]  101 	ld	de, #0x404f
   0018 19            [11]  102 	add	hl, de
   0019 E3            [19]  103 	ex	(sp), hl
   001A 11 00 00      [10]  104 	ld	de, #0x0000
   001D                     105 00103$:
                            106 ;src/main.c:58: plot_column=0x4000 + l*0x800 + 80*c+79;
   001D 7B            [ 4]  107 	ld	a, e
   001E 07            [ 4]  108 	rlca
   001F 07            [ 4]  109 	rlca
   0020 07            [ 4]  110 	rlca
   0021 E6 F8         [ 7]  111 	and	a, #0xf8
   0023 67            [ 4]  112 	ld	h, a
   0024 2E 00         [ 7]  113 	ld	l, #0x00
   0026 DD 7E FE      [19]  114 	ld	a, -2 (ix)
   0029 85            [ 4]  115 	add	a, l
   002A 6F            [ 4]  116 	ld	l, a
   002B DD 7E FF      [19]  117 	ld	a, -1 (ix)
   002E 8C            [ 4]  118 	adc	a, h
   002F 67            [ 4]  119 	ld	h, a
                            120 ;src/main.c:59: cpct_memcpy(plot_column,plot_column,1);
   0030 E5            [11]  121 	push	hl
   0031 FD E1         [14]  122 	pop	iy
   0033 C5            [11]  123 	push	bc
   0034 D5            [11]  124 	push	de
   0035 21 01 00      [10]  125 	ld	hl, #0x0001
   0038 E5            [11]  126 	push	hl
   0039 FD E5         [15]  127 	push	iy
   003B FD E5         [15]  128 	push	iy
   003D CDr00r00      [17]  129 	call	_cpct_memcpy
   0040 D1            [10]  130 	pop	de
   0041 C1            [10]  131 	pop	bc
                            132 ;src/main.c:56: for (l=0;l<8;l++) {
   0042 13            [ 6]  133 	inc	de
   0043 7B            [ 4]  134 	ld	a, e
   0044 D6 08         [ 7]  135 	sub	a, #0x08
   0046 7A            [ 4]  136 	ld	a, d
   0047 DE 00         [ 7]  137 	sbc	a, #0x00
   0049 38 D2         [12]  138 	jr	C,00103$
                            139 ;src/main.c:55: for (c=0;c<4;c++) {// caractères hauteur
   004B 03            [ 6]  140 	inc	bc
   004C 79            [ 4]  141 	ld	a, c
   004D D6 04         [ 7]  142 	sub	a, #0x04
   004F 78            [ 4]  143 	ld	a, b
   0050 DE 00         [ 7]  144 	sbc	a, #0x00
   0052 38 B8         [12]  145 	jr	C,00109$
   0054 DD F9         [10]  146 	ld	sp, ix
   0056 DD E1         [14]  147 	pop	ix
   0058 C9            [10]  148 	ret
   0059                     149 _g_items_0:
   0059 05                  150 	.db #0x05	; 5
   005A 0F                  151 	.db #0x0f	; 15
   005B 0F                  152 	.db #0x0f	; 15
   005C 00                  153 	.db #0x00	; 0
   005D 0F                  154 	.db #0x0f	; 15
   005E 0F                  155 	.db #0x0f	; 15
   005F 0F                  156 	.db #0x0f	; 15
   0060 0A                  157 	.db #0x0a	; 10
   0061 0F                  158 	.db #0x0f	; 15
   0062 0A                  159 	.db #0x0a	; 10
   0063 05                  160 	.db #0x05	; 5
   0064 00                  161 	.db #0x00	; 0
   0065 0F                  162 	.db #0x0f	; 15
   0066 0A                  163 	.db #0x0a	; 10
   0067 05                  164 	.db #0x05	; 5
   0068 00                  165 	.db #0x00	; 0
   0069 05                  166 	.db #0x05	; 5
   006A 0F                  167 	.db #0x0f	; 15
   006B 0A                  168 	.db #0x0a	; 10
   006C 0A                  169 	.db #0x0a	; 10
   006D 00                  170 	.db #0x00	; 0
   006E 0F                  171 	.db #0x0f	; 15
   006F 0F                  172 	.db #0x0f	; 15
   0070 0A                  173 	.db #0x0a	; 10
   0071 00                  174 	.db #0x00	; 0
   0072 0A                  175 	.db #0x0a	; 10
   0073 0A                  176 	.db #0x0a	; 10
   0074 0A                  177 	.db #0x0a	; 10
   0075 00                  178 	.db #0x00	; 0
   0076 00                  179 	.db #0x00	; 0
   0077 00                  180 	.db #0x00	; 0
   0078 00                  181 	.db #0x00	; 0
                            182 ;src/main.c:67: void myInterruptHandler() {
                            183 ;	---------------------------------
                            184 ; Function myInterruptHandler
                            185 ; ---------------------------------
   0079                     186 _myInterruptHandler::
                            187 ;src/main.c:68: intCounter=intCounter+1;
   0079 FD 21r00r00   [14]  188 	ld	iy, #_intCounter
   007D FD 34 00      [23]  189 	inc	0 (iy)
                            190 ;src/main.c:69: if (intCounter == 6) intCounter=0;
   0080 FD 7E 00      [19]  191 	ld	a, 0 (iy)
   0083 D6 06         [ 7]  192 	sub	a, #0x06
   0085 20 04         [12]  193 	jr	NZ,00102$
   0087 FD 36 00 00   [19]  194 	ld	0 (iy), #0x00
   008B                     195 00102$:
                            196 ;src/main.c:71: if (intCounter == 2) {
   008B 3Ar00r00      [13]  197 	ld	a,(#_intCounter + 0)
   008E D6 02         [ 7]  198 	sub	a, #0x02
   0090 20 09         [12]  199 	jr	NZ,00104$
                            200 ;src/main.c:72: cpct_setBorder(2);
   0092 21 10 02      [10]  201 	ld	hl, #0x0210
   0095 E5            [11]  202 	push	hl
   0096 CDr00r00      [17]  203 	call	_cpct_setPALColour
   0099 18 07         [12]  204 	jr	00105$
   009B                     205 00104$:
                            206 ;src/main.c:74: cpct_setBorder(3);
   009B 21 10 03      [10]  207 	ld	hl, #0x0310
   009E E5            [11]  208 	push	hl
   009F CDr00r00      [17]  209 	call	_cpct_setPALColour
   00A2                     210 00105$:
                            211 ;src/main.c:83: if (intCounter==5) {
   00A2 3Ar00r00      [13]  212 	ld	a,(#_intCounter + 0)
   00A5 D6 05         [ 7]  213 	sub	a, #0x05
   00A7 20 2A         [12]  214 	jr	NZ,00109$
                            215 ;src/main.c:84: calque4000();
   00A9 CDr00r00      [17]  216 	call	_calque4000
                            217 ;src/main.c:86: hScroll+=1;
   00AC FD 21r01r00   [14]  218 	ld	iy, #_hScroll
   00B0 FD 34 00      [23]  219 	inc	0 (iy)
                            220 ;src/main.c:91: if (hScroll==240) {hScroll=0;}
   00B3 FD 7E 00      [19]  221 	ld	a, 0 (iy)
   00B6 D6 F0         [ 7]  222 	sub	a, #0xf0
   00B8 20 04         [12]  223 	jr	NZ,00107$
   00BA FD 36 00 00   [19]  224 	ld	0 (iy), #0x00
   00BE                     225 00107$:
                            226 ;src/main.c:93: cpct_setVideoMemoryOffset(hScroll);
   00BE FD 21r01r00   [14]  227 	ld	iy, #_hScroll
   00C2 FD 6E 00      [19]  228 	ld	l, 0 (iy)
   00C5 CDr00r00      [17]  229 	call	_cpct_setVideoMemoryOffset
                            230 ;src/main.c:94: killVBL();
   00C8 CDr00r00      [17]  231 	call	_killVBL
                            232 ;src/main.c:95: rupture(19-1);
   00CB 3E 12         [ 7]  233 	ld	a, #0x12
   00CD F5            [11]  234 	push	af
   00CE 33            [ 6]  235 	inc	sp
   00CF CDr00r00      [17]  236 	call	_rupture
   00D2 33            [ 6]  237 	inc	sp
   00D3                     238 00109$:
                            239 ;src/main.c:98: if (intCounter==2) {
   00D3 3Ar00r00      [13]  240 	ld	a,(#_intCounter + 0)
   00D6 D6 02         [ 7]  241 	sub	a, #0x02
   00D8 20 10         [12]  242 	jr	NZ,00111$
                            243 ;src/main.c:99: calqueC000();
   00DA CDr00r00      [17]  244 	call	_calqueC000
                            245 ;src/main.c:100: cpct_setVideoMemoryOffset(0);
   00DD 2E 00         [ 7]  246 	ld	l, #0x00
   00DF CDr00r00      [17]  247 	call	_cpct_setVideoMemoryOffset
                            248 ;src/main.c:101: rupture(7);
   00E2 3E 07         [ 7]  249 	ld	a, #0x07
   00E4 F5            [11]  250 	push	af
   00E5 33            [ 6]  251 	inc	sp
   00E6 CDr00r00      [17]  252 	call	_rupture
   00E9 33            [ 6]  253 	inc	sp
   00EA                     254 00111$:
                            255 ;src/main.c:104: if (intCounter==3) {
   00EA 3Ar00r00      [13]  256 	ld	a,(#_intCounter + 0)
   00ED D6 03         [ 7]  257 	sub	a, #0x03
   00EF C0            [11]  258 	ret	NZ
                            259 ;src/main.c:105: calqueC000();
   00F0 CDr00r00      [17]  260 	call	_calqueC000
                            261 ;src/main.c:106: cpct_setVideoMemoryOffset(0);
   00F3 2E 00         [ 7]  262 	ld	l, #0x00
   00F5 CDr00r00      [17]  263 	call	_cpct_setVideoMemoryOffset
                            264 ;src/main.c:107: restoreVBL();
   00F8 CDr00r00      [17]  265 	call	_restoreVBL
                            266 ;src/main.c:108: rupture(39-19-7+1);
   00FB 3E 0E         [ 7]  267 	ld	a, #0x0e
   00FD F5            [11]  268 	push	af
   00FE 33            [ 6]  269 	inc	sp
   00FF CDr00r00      [17]  270 	call	_rupture
   0102 33            [ 6]  271 	inc	sp
   0103 C9            [10]  272 	ret
                            273 ;src/main.c:113: void main(void) {
                            274 ;	---------------------------------
                            275 ; Function main
                            276 ; ---------------------------------
   0104                     277 _main::
                            278 ;src/main.c:116: u8* sprite=g_items_0;
                            279 ;src/main.c:132: cpct_setInterruptHandler(myInterruptHandler);
   0104 21r79r00      [10]  280 	ld	hl, #_myInterruptHandler
   0107 CDr00r00      [17]  281 	call	_cpct_setInterruptHandler
                            282 ;src/main.c:136: bank4_4000();
   010A CDr00r00      [17]  283 	call	_bank4_4000
                            284 ;src/main.c:137: bank0123();
   010D CDr00r00      [17]  285 	call	_bank0123
                            286 ;src/main.c:138: calqueC000();
   0110 CDr00r00      [17]  287 	call	_calqueC000
                            288 ;src/main.c:141: cpct_setVideoMode(0);
   0113 2E 00         [ 7]  289 	ld	l, #0x00
   0115 CDr00r00      [17]  290 	call	_cpct_setVideoMode
                            291 ;src/main.c:144: cpct_setBorder(HW_BLACK);
   0118 21 10 14      [10]  292 	ld	hl, #0x1410
   011B E5            [11]  293 	push	hl
   011C CDr00r00      [17]  294 	call	_cpct_setPALColour
                            295 ;src/main.c:145: cpct_setPalette(g_tile_palette, 6);
   011F 21 06 00      [10]  296 	ld	hl, #0x0006
   0122 E5            [11]  297 	push	hl
   0123 21r00r00      [10]  298 	ld	hl, #_g_tile_palette
   0126 E5            [11]  299 	push	hl
   0127 CDr00r00      [17]  300 	call	_cpct_setPalette
                            301 ;src/main.c:146: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   012A 21 00 40      [10]  302 	ld	hl, #0x4000
   012D E5            [11]  303 	push	hl
   012E AF            [ 4]  304 	xor	a, a
   012F F5            [11]  305 	push	af
   0130 33            [ 6]  306 	inc	sp
   0131 26 C0         [ 7]  307 	ld	h, #0xc0
   0133 E5            [11]  308 	push	hl
   0134 CDr00r00      [17]  309 	call	_cpct_memset
                            310 ;src/main.c:151: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   0137 21 0F 0F      [10]  311 	ld	hl, #0x0f0f
   013A E5            [11]  312 	push	hl
   013B 21 00 C0      [10]  313 	ld	hl, #0xc000
   013E E5            [11]  314 	push	hl
   013F CDr00r00      [17]  315 	call	_cpct_getScreenPtr
                            316 ;src/main.c:152: cpct_drawSprite(sprite, p, 4, 8);
   0142 E5            [11]  317 	push	hl
   0143 01 04 08      [10]  318 	ld	bc, #0x0804
   0146 C5            [11]  319 	push	bc
   0147 E5            [11]  320 	push	hl
   0148 01r59r00      [10]  321 	ld	bc, #_g_items_0
   014B C5            [11]  322 	push	bc
   014C CDr00r00      [17]  323 	call	_cpct_drawSprite
   014F 01 00 20      [10]  324 	ld	bc, #0x2000
   0152 C5            [11]  325 	push	bc
   0153 01 FF FF      [10]  326 	ld	bc, #0xffff
   0156 C5            [11]  327 	push	bc
   0157 01 00 C0      [10]  328 	ld	bc, #0xc000
   015A C5            [11]  329 	push	bc
   015B CDr00r00      [17]  330 	call	_cpct_memset_f64
   015E 01r59r00      [10]  331 	ld	bc, #_g_items_0
   0161 C5            [11]  332 	push	bc
   0162 01 04 08      [10]  333 	ld	bc, #0x0804
   0165 C5            [11]  334 	push	bc
   0166 CDr00r00      [17]  335 	call	_cpct_hflipSpriteM0
   0169 E1            [10]  336 	pop	hl
                            337 ;src/main.c:160: cpct_drawSprite(sprite, p, 4, 8);
   016A 01 04 08      [10]  338 	ld	bc, #0x0804
   016D C5            [11]  339 	push	bc
   016E E5            [11]  340 	push	hl
   016F 21r59r00      [10]  341 	ld	hl, #_g_items_0
   0172 E5            [11]  342 	push	hl
   0173 CDr00r00      [17]  343 	call	_cpct_drawSprite
                            344 ;src/main.c:162: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   0176 21 0F 1F      [10]  345 	ld	hl, #0x1f0f
   0179 E5            [11]  346 	push	hl
   017A 21 00 C0      [10]  347 	ld	hl, #0xc000
   017D E5            [11]  348 	push	hl
   017E CDr00r00      [17]  349 	call	_cpct_getScreenPtr
                            350 ;src/main.c:164: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   0181 E5            [11]  351 	push	hl
   0182 21 02 03      [10]  352 	ld	hl, #0x0302
   0185 E5            [11]  353 	push	hl
   0186 CDr00r00      [17]  354 	call	_cpct_px2byteM0
   0189 55            [ 4]  355 	ld	d, l
   018A C1            [10]  356 	pop	bc
   018B 21 0A 14      [10]  357 	ld	hl, #0x140a
   018E E5            [11]  358 	push	hl
   018F D5            [11]  359 	push	de
   0190 33            [ 6]  360 	inc	sp
   0191 C5            [11]  361 	push	bc
   0192 CDr00r00      [17]  362 	call	_cpct_drawSolidBox
   0195 F1            [10]  363 	pop	af
                            364 ;src/main.c:167: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   0196 33            [ 6]  365 	inc	sp
   0197 21 09 4F      [10]  366 	ld	hl,#0x4f09
   019A E3            [19]  367 	ex	(sp),hl
   019B 21 00 C0      [10]  368 	ld	hl, #0xc000
   019E E5            [11]  369 	push	hl
   019F CDr00r00      [17]  370 	call	_cpct_getScreenPtr
                            371 ;src/main.c:168: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   01A2 01r00r00      [10]  372 	ld	bc, #_g_tile_schtroumpf+0
   01A5 11 10 20      [10]  373 	ld	de, #0x2010
   01A8 D5            [11]  374 	push	de
   01A9 E5            [11]  375 	push	hl
   01AA C5            [11]  376 	push	bc
   01AB CDr00r00      [17]  377 	call	_cpct_drawSpriteMasked
                            378 ;src/main.c:182: cpct_srand(77);
   01AE 21 4D 00      [10]  379 	ld	hl,#0x004d
   01B1 11 00 00      [10]  380 	ld	de,#0x0000
   01B4 CDr00r00      [17]  381 	call	_cpct_setSeed_mxor
   01B7 CDr00r00      [17]  382 	call	_cpct_restoreState_mxor_u8
                            383 ;src/main.c:186: cpct_scanKeyboard_f();
   01BA CDr00r00      [17]  384 	call	_cpct_scanKeyboard_f
                            385 ;src/main.c:187: t=0;
   01BD 01 00 00      [10]  386 	ld	bc, #0x0000
                            387 ;src/main.c:188: while (t%128!=0 || (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return))){
   01C0                     388 00107$:
   01C0 C5            [11]  389 	push	bc
   01C1 21 80 00      [10]  390 	ld	hl, #0x0080
   01C4 E5            [11]  391 	push	hl
   01C5 C5            [11]  392 	push	bc
   01C6 CDr00r00      [17]  393 	call	__modsint
   01C9 F1            [10]  394 	pop	af
   01CA F1            [10]  395 	pop	af
   01CB C1            [10]  396 	pop	bc
   01CC 7C            [ 4]  397 	ld	a, h
   01CD B5            [ 4]  398 	or	a,l
   01CE 20 18         [12]  399 	jr	NZ,00108$
   01D0 C5            [11]  400 	push	bc
   01D1 21 00 40      [10]  401 	ld	hl, #0x4000
   01D4 CDr00r00      [17]  402 	call	_cpct_isKeyPressed
   01D7 C1            [10]  403 	pop	bc
   01D8 7D            [ 4]  404 	ld	a, l
   01D9 B7            [ 4]  405 	or	a, a
   01DA 20 48         [12]  406 	jr	NZ,00109$
   01DC C5            [11]  407 	push	bc
   01DD 21 02 04      [10]  408 	ld	hl, #0x0402
   01E0 CDr00r00      [17]  409 	call	_cpct_isKeyPressed
   01E3 C1            [10]  410 	pop	bc
   01E4 7D            [ 4]  411 	ld	a, l
   01E5 B7            [ 4]  412 	or	a, a
   01E6 20 3C         [12]  413 	jr	NZ,00109$
   01E8                     414 00108$:
                            415 ;src/main.c:189: scroll("WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR", 110, t);
   01E8 C5            [11]  416 	push	bc
   01E9 C5            [11]  417 	push	bc
   01EA 21 6E 00      [10]  418 	ld	hl, #0x006e
   01ED E5            [11]  419 	push	hl
   01EE 21r31r02      [10]  420 	ld	hl, #___str_0
   01F1 E5            [11]  421 	push	hl
   01F2 CDr00r00      [17]  422 	call	_scroll
   01F5 21 06 00      [10]  423 	ld	hl, #6
   01F8 39            [11]  424 	add	hl, sp
   01F9 F9            [ 6]  425 	ld	sp, hl
   01FA C1            [10]  426 	pop	bc
                            427 ;src/main.c:190: t=t+1;
   01FB 03            [ 6]  428 	inc	bc
                            429 ;src/main.c:191: if (t>110*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   01FC 3E EC         [ 7]  430 	ld	a, #0xec
   01FE B9            [ 4]  431 	cp	a, c
   01FF 3E 04         [ 7]  432 	ld	a, #0x04
   0201 98            [ 4]  433 	sbc	a, b
   0202 E2r07r02      [10]  434 	jp	PO, 00139$
   0205 EE 80         [ 7]  435 	xor	a, #0x80
   0207                     436 00139$:
   0207 F2r0Dr02      [10]  437 	jp	P, 00102$
   020A 01 00 00      [10]  438 	ld	bc, #0x0000
   020D                     439 00102$:
                            440 ;src/main.c:192: if (t%128==0) {
   020D C5            [11]  441 	push	bc
   020E 21 80 00      [10]  442 	ld	hl, #0x0080
   0211 E5            [11]  443 	push	hl
   0212 C5            [11]  444 	push	bc
   0213 CDr00r00      [17]  445 	call	__modsint
   0216 F1            [10]  446 	pop	af
   0217 F1            [10]  447 	pop	af
   0218 C1            [10]  448 	pop	bc
   0219 7C            [ 4]  449 	ld	a, h
   021A B5            [ 4]  450 	or	a,l
   021B 20 A3         [12]  451 	jr	NZ,00107$
                            452 ;src/main.c:193: cpct_scanKeyboard_f();
   021D C5            [11]  453 	push	bc
   021E CDr00r00      [17]  454 	call	_cpct_scanKeyboard_f
   0221 C1            [10]  455 	pop	bc
   0222 18 9C         [12]  456 	jr	00107$
   0224                     457 00109$:
                            458 ;src/main.c:199: cpct_setVideoMemoryOffset(0);
   0224 2E 00         [ 7]  459 	ld	l, #0x00
   0226 CDr00r00      [17]  460 	call	_cpct_setVideoMemoryOffset
                            461 ;src/main.c:200: calque4000();
   0229 CDr00r00      [17]  462 	call	_calque4000
                            463 ;src/main.c:202: while (1) {
   022C                     464 00111$:
                            465 ;src/main.c:203: vsync();
   022C CDr00r00      [17]  466 	call	_vsync
   022F 18 FB         [12]  467 	jr	00111$
   0231                     468 ___str_0:
   0231 57 45 20 57 49 53   469 	.ascii "WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS "
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        57 45 20 57 49 53
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
   026D 57 45 20 57 49 53   470 	.ascii "WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR"
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        41 4E 44 20 41 20
        48 41 50 50 59 20
        4E 45 57 20 59 45
        41 52
   029F 00                  471 	.db 0x00
                            472 	.area _CODE
                            473 	.area _INITIALIZER
   0000                     474 __xinit__intCounter:
   0000 00                  475 	.db #0x00	; 0
   0001                     476 __xinit__hScroll:
   0001 00                  477 	.db #0x00	; 0
                            478 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _crtc
                             14 	.globl _monter
                             15 	.globl _bank4_4000
                             16 	.globl _bank0123
                             17 	.globl _calqueC000
                             18 	.globl _vsync
                             19 	.globl _cpct_restoreState_mxor_u8
                             20 	.globl _cpct_setSeed_mxor
                             21 	.globl _cpct_getScreenPtr
                             22 	.globl _cpct_setPALColour
                             23 	.globl _cpct_setPalette
                             24 	.globl _cpct_setVideoMode
                             25 	.globl _cpct_hflipSpriteM0
                             26 	.globl _cpct_drawSolidBox
                             27 	.globl _cpct_drawSpriteMasked
                             28 	.globl _cpct_drawSprite
                             29 	.globl _cpct_px2byteM0
                             30 	.globl _cpct_memset_f64
                             31 	.globl _cpct_memset
                             32 	.globl _cpct_setInterruptHandler
                             33 	.globl _screen_plot_address
                             34 	.globl _screen_location
                             35 	.globl _slow
                             36 	.globl _hOffset
                             37 	.globl _intCounter
                             38 	.globl _g_items_0
                             39 ;--------------------------------------------------------
                             40 ; special function registers
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ; ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DATA
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _INITIALIZED
   0000                      50 _intCounter::
   0000                      51 	.ds 1
   0001                      52 _hOffset::
   0001                      53 	.ds 2
   0003                      54 _slow::
   0003                      55 	.ds 1
   0004                      56 _screen_location::
   0004                      57 	.ds 2
   0006                      58 _screen_plot_address::
   0006                      59 	.ds 2
                             60 ;--------------------------------------------------------
                             61 ; absolute external ram data
                             62 ;--------------------------------------------------------
                             63 	.area _DABS (ABS)
                             64 ;--------------------------------------------------------
                             65 ; global & static initialisations
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _GSINIT
                             69 	.area _GSFINAL
                             70 	.area _GSINIT
                             71 ;--------------------------------------------------------
                             72 ; Home
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _HOME
                             76 ;--------------------------------------------------------
                             77 ; code
                             78 ;--------------------------------------------------------
                             79 	.area _CODE
                             80 ;src/main.c:53: void monter(unsigned int c,u16 hScroll) {
                             81 ;	---------------------------------
                             82 ; Function monter
                             83 ; ---------------------------------
   0000                      84 _monter::
   0000 DD E5         [15]   85 	push	ix
   0002 DD 21 00 00   [14]   86 	ld	ix,#0
   0006 DD 39         [15]   87 	add	ix,sp
   0008 F5            [11]   88 	push	af
   0009 F5            [11]   89 	push	af
                             90 ;src/main.c:56: for (l=0;l<8;l++) {
   000A DD 4E 04      [19]   91 	ld	c,4 (ix)
   000D DD 46 05      [19]   92 	ld	b,5 (ix)
   0010 69            [ 4]   93 	ld	l, c
   0011 60            [ 4]   94 	ld	h, b
   0012 29            [11]   95 	add	hl, hl
   0013 29            [11]   96 	add	hl, hl
   0014 09            [11]   97 	add	hl, bc
   0015 29            [11]   98 	add	hl, hl
   0016 29            [11]   99 	add	hl, hl
   0017 29            [11]  100 	add	hl, hl
   0018 29            [11]  101 	add	hl, hl
   0019 DD 75 FE      [19]  102 	ld	-2 (ix), l
   001C DD 74 FF      [19]  103 	ld	-1 (ix), h
   001F 21 50 00      [10]  104 	ld	hl, #0x0050
   0022 E5            [11]  105 	push	hl
   0023 DD 6E 06      [19]  106 	ld	l,6 (ix)
   0026 DD 66 07      [19]  107 	ld	h,7 (ix)
   0029 E5            [11]  108 	push	hl
   002A CDr00r00      [17]  109 	call	__moduint
   002D F1            [10]  110 	pop	af
   002E F1            [10]  111 	pop	af
   002F DD 74 FD      [19]  112 	ld	-3 (ix), h
   0032 DD 75 FC      [19]  113 	ld	-4 (ix), l
   0035 01 00 00      [10]  114 	ld	bc, #0x0000
   0038                     115 00102$:
                            116 ;src/main.c:58: plot_column=(u8 *)(0x4000 + l*0x800 + 80*c + hScroll%80);
   0038 79            [ 4]  117 	ld	a, c
   0039 07            [ 4]  118 	rlca
   003A 07            [ 4]  119 	rlca
   003B 07            [ 4]  120 	rlca
   003C E6 F8         [ 7]  121 	and	a, #0xf8
   003E 57            [ 4]  122 	ld	d, a
   003F 1E 00         [ 7]  123 	ld	e, #0x00
   0041 21 00 40      [10]  124 	ld	hl, #0x4000
   0044 19            [11]  125 	add	hl, de
   0045 DD 5E FE      [19]  126 	ld	e,-2 (ix)
   0048 DD 56 FF      [19]  127 	ld	d,-1 (ix)
   004B 19            [11]  128 	add	hl, de
   004C D1            [10]  129 	pop	de
   004D D5            [11]  130 	push	de
   004E 19            [11]  131 	add	hl, de
   004F EB            [ 4]  132 	ex	de,hl
                            133 ;src/main.c:60: *plot_column=*plot_column+0X33;
   0050 1A            [ 7]  134 	ld	a, (de)
   0051 C6 33         [ 7]  135 	add	a, #0x33
   0053 12            [ 7]  136 	ld	(de), a
                            137 ;src/main.c:62: plot_column=plot_column-1;
   0054 1B            [ 6]  138 	dec	de
                            139 ;src/main.c:63: *plot_column=*plot_column+0X33;
   0055 1A            [ 7]  140 	ld	a, (de)
   0056 C6 33         [ 7]  141 	add	a, #0x33
   0058 12            [ 7]  142 	ld	(de), a
                            143 ;src/main.c:56: for (l=0;l<8;l++) {
   0059 03            [ 6]  144 	inc	bc
   005A 79            [ 4]  145 	ld	a, c
   005B D6 08         [ 7]  146 	sub	a, #0x08
   005D 78            [ 4]  147 	ld	a, b
   005E DE 00         [ 7]  148 	sbc	a, #0x00
   0060 38 D6         [12]  149 	jr	C,00102$
   0062 DD F9         [10]  150 	ld	sp, ix
   0064 DD E1         [14]  151 	pop	ix
   0066 C9            [10]  152 	ret
   0067                     153 _g_items_0:
   0067 05                  154 	.db #0x05	; 5
   0068 0F                  155 	.db #0x0f	; 15
   0069 0F                  156 	.db #0x0f	; 15
   006A 00                  157 	.db #0x00	; 0
   006B 0F                  158 	.db #0x0f	; 15
   006C 0F                  159 	.db #0x0f	; 15
   006D 0F                  160 	.db #0x0f	; 15
   006E 0A                  161 	.db #0x0a	; 10
   006F 0F                  162 	.db #0x0f	; 15
   0070 0A                  163 	.db #0x0a	; 10
   0071 05                  164 	.db #0x05	; 5
   0072 00                  165 	.db #0x00	; 0
   0073 0F                  166 	.db #0x0f	; 15
   0074 0A                  167 	.db #0x0a	; 10
   0075 05                  168 	.db #0x05	; 5
   0076 00                  169 	.db #0x00	; 0
   0077 05                  170 	.db #0x05	; 5
   0078 0F                  171 	.db #0x0f	; 15
   0079 0A                  172 	.db #0x0a	; 10
   007A 0A                  173 	.db #0x0a	; 10
   007B 00                  174 	.db #0x00	; 0
   007C 0F                  175 	.db #0x0f	; 15
   007D 0F                  176 	.db #0x0f	; 15
   007E 0A                  177 	.db #0x0a	; 10
   007F 00                  178 	.db #0x00	; 0
   0080 0A                  179 	.db #0x0a	; 10
   0081 0A                  180 	.db #0x0a	; 10
   0082 0A                  181 	.db #0x0a	; 10
   0083 00                  182 	.db #0x00	; 0
   0084 00                  183 	.db #0x00	; 0
   0085 00                  184 	.db #0x00	; 0
   0086 00                  185 	.db #0x00	; 0
                            186 ;src/main.c:73: void crtc(u16 R12R13) {
                            187 ;	---------------------------------
                            188 ; Function crtc
                            189 ; ---------------------------------
   0087                     190 _crtc::
                            191 ;src/main.c:90: __endasm;
   0087 DD E5         [15]  192 	push	ix
   0089 DD 21 00 00   [14]  193 	ld	ix,#0
   008D DD 39         [15]  194 	add	ix,sp
   008F DD 66 05      [19]  195 	ld	h, 5 (ix)
   0092 DD 6E 04      [19]  196 	ld	l, 4 (ix)
   0095 01 0C BC      [10]  197 	ld	bc,#0xbc00+12
   0098 ED 49         [12]  198 	out	(c),c
   009A 04            [ 4]  199 	inc	b
   009B ED 61         [12]  200 	out	(c),h
   009D 05            [ 4]  201 	dec	b
   009E 0C            [ 4]  202 	inc	c
   009F ED 49         [12]  203 	out	(c),c
   00A1 04            [ 4]  204 	inc	b
   00A2 ED 69         [12]  205 	out	(c),l
   00A4 DD E1         [14]  206 	pop	ix
   00A6 C9            [10]  207 	ret
                            208 ;src/main.c:94: void myInterruptHandler() {
                            209 ;	---------------------------------
                            210 ; Function myInterruptHandler
                            211 ; ---------------------------------
   00A7                     212 _myInterruptHandler::
                            213 ;src/main.c:97: intCounter=intCounter+1;
   00A7 FD 21r00r00   [14]  214 	ld	iy, #_intCounter
   00AB FD 34 00      [23]  215 	inc	0 (iy)
                            216 ;src/main.c:98: if (intCounter == 6) intCounter=0;
   00AE FD 7E 00      [19]  217 	ld	a, 0 (iy)
   00B1 D6 06         [ 7]  218 	sub	a, #0x06
   00B3 20 04         [12]  219 	jr	NZ,00102$
   00B5 FD 36 00 00   [19]  220 	ld	0 (iy), #0x00
   00B9                     221 00102$:
                            222 ;src/main.c:100: if (intCounter == 2) {
   00B9 3Ar00r00      [13]  223 	ld	a,(#_intCounter + 0)
   00BC D6 02         [ 7]  224 	sub	a, #0x02
   00BE 20 08         [12]  225 	jr	NZ,00104$
                            226 ;src/main.c:101: cpct_setBorder(2);
   00C0 21 10 02      [10]  227 	ld	hl, #0x0210
   00C3 E5            [11]  228 	push	hl
   00C4 CDr00r00      [17]  229 	call	_cpct_setPALColour
   00C7 C9            [10]  230 	ret
   00C8                     231 00104$:
                            232 ;src/main.c:103: cpct_setBorder(3);
   00C8 21 10 03      [10]  233 	ld	hl, #0x0310
   00CB E5            [11]  234 	push	hl
   00CC CDr00r00      [17]  235 	call	_cpct_setPALColour
                            236 ;src/main.c:150: if (intCounter==3) {
   00CF C9            [10]  237 	ret
                            238 ;src/main.c:159: void main(void) {
                            239 ;	---------------------------------
                            240 ; Function main
                            241 ; ---------------------------------
   00D0                     242 _main::
   00D0 DD E5         [15]  243 	push	ix
   00D2 F5            [11]  244 	push	af
                            245 ;src/main.c:161: int s=0;
   00D3 21 00 00      [10]  246 	ld	hl, #0x0000
   00D6 E3            [19]  247 	ex	(sp), hl
                            248 ;src/main.c:163: u8* sprite=g_items_0;
                            249 ;src/main.c:179: cpct_setInterruptHandler(myInterruptHandler);
   00D7 21rA7r00      [10]  250 	ld	hl, #_myInterruptHandler
   00DA CDr00r00      [17]  251 	call	_cpct_setInterruptHandler
                            252 ;src/main.c:183: bank4_4000();
   00DD CDr00r00      [17]  253 	call	_bank4_4000
                            254 ;src/main.c:184: bank0123();
   00E0 CDr00r00      [17]  255 	call	_bank0123
                            256 ;src/main.c:185: calqueC000();
   00E3 CDr00r00      [17]  257 	call	_calqueC000
                            258 ;src/main.c:188: cpct_setVideoMode(0);
   00E6 2E 00         [ 7]  259 	ld	l, #0x00
   00E8 CDr00r00      [17]  260 	call	_cpct_setVideoMode
                            261 ;src/main.c:191: cpct_setBorder(HW_BLACK);
   00EB 21 10 14      [10]  262 	ld	hl, #0x1410
   00EE E5            [11]  263 	push	hl
   00EF CDr00r00      [17]  264 	call	_cpct_setPALColour
                            265 ;src/main.c:192: cpct_setPalette(g_tile_palette, 6);
   00F2 21 06 00      [10]  266 	ld	hl, #0x0006
   00F5 E5            [11]  267 	push	hl
   00F6 21r00r00      [10]  268 	ld	hl, #_g_tile_palette
   00F9 E5            [11]  269 	push	hl
   00FA CDr00r00      [17]  270 	call	_cpct_setPalette
                            271 ;src/main.c:193: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   00FD 21 00 40      [10]  272 	ld	hl, #0x4000
   0100 E5            [11]  273 	push	hl
   0101 AF            [ 4]  274 	xor	a, a
   0102 F5            [11]  275 	push	af
   0103 33            [ 6]  276 	inc	sp
   0104 26 C0         [ 7]  277 	ld	h, #0xc0
   0106 E5            [11]  278 	push	hl
   0107 CDr00r00      [17]  279 	call	_cpct_memset
                            280 ;src/main.c:198: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   010A 21 0F 0F      [10]  281 	ld	hl, #0x0f0f
   010D E5            [11]  282 	push	hl
   010E 21 00 C0      [10]  283 	ld	hl, #0xc000
   0111 E5            [11]  284 	push	hl
   0112 CDr00r00      [17]  285 	call	_cpct_getScreenPtr
                            286 ;src/main.c:199: cpct_drawSprite(sprite, p, 4, 8);
   0115 E5            [11]  287 	push	hl
   0116 01 04 08      [10]  288 	ld	bc, #0x0804
   0119 C5            [11]  289 	push	bc
   011A E5            [11]  290 	push	hl
   011B 01r67r00      [10]  291 	ld	bc, #_g_items_0
   011E C5            [11]  292 	push	bc
   011F CDr00r00      [17]  293 	call	_cpct_drawSprite
   0122 01 00 20      [10]  294 	ld	bc, #0x2000
   0125 C5            [11]  295 	push	bc
   0126 01 FF FF      [10]  296 	ld	bc, #0xffff
   0129 C5            [11]  297 	push	bc
   012A 01 00 C0      [10]  298 	ld	bc, #0xc000
   012D C5            [11]  299 	push	bc
   012E CDr00r00      [17]  300 	call	_cpct_memset_f64
   0131 01r67r00      [10]  301 	ld	bc, #_g_items_0
   0134 C5            [11]  302 	push	bc
   0135 01 04 08      [10]  303 	ld	bc, #0x0804
   0138 C5            [11]  304 	push	bc
   0139 CDr00r00      [17]  305 	call	_cpct_hflipSpriteM0
   013C E1            [10]  306 	pop	hl
                            307 ;src/main.c:207: cpct_drawSprite(sprite, p, 4, 8);
   013D 01 04 08      [10]  308 	ld	bc, #0x0804
   0140 C5            [11]  309 	push	bc
   0141 E5            [11]  310 	push	hl
   0142 21r67r00      [10]  311 	ld	hl, #_g_items_0
   0145 E5            [11]  312 	push	hl
   0146 CDr00r00      [17]  313 	call	_cpct_drawSprite
                            314 ;src/main.c:209: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   0149 21 0F 1F      [10]  315 	ld	hl, #0x1f0f
   014C E5            [11]  316 	push	hl
   014D 21 00 C0      [10]  317 	ld	hl, #0xc000
   0150 E5            [11]  318 	push	hl
   0151 CDr00r00      [17]  319 	call	_cpct_getScreenPtr
                            320 ;src/main.c:211: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   0154 E5            [11]  321 	push	hl
   0155 21 02 03      [10]  322 	ld	hl, #0x0302
   0158 E5            [11]  323 	push	hl
   0159 CDr00r00      [17]  324 	call	_cpct_px2byteM0
   015C 55            [ 4]  325 	ld	d, l
   015D C1            [10]  326 	pop	bc
   015E 21 0A 14      [10]  327 	ld	hl, #0x140a
   0161 E5            [11]  328 	push	hl
   0162 D5            [11]  329 	push	de
   0163 33            [ 6]  330 	inc	sp
   0164 C5            [11]  331 	push	bc
   0165 CDr00r00      [17]  332 	call	_cpct_drawSolidBox
   0168 F1            [10]  333 	pop	af
                            334 ;src/main.c:214: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   0169 33            [ 6]  335 	inc	sp
   016A 21 09 4F      [10]  336 	ld	hl,#0x4f09
   016D E3            [19]  337 	ex	(sp),hl
   016E 21 00 C0      [10]  338 	ld	hl, #0xc000
   0171 E5            [11]  339 	push	hl
   0172 CDr00r00      [17]  340 	call	_cpct_getScreenPtr
                            341 ;src/main.c:215: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   0175 01r00r00      [10]  342 	ld	bc, #_g_tile_schtroumpf+0
   0178 11 10 20      [10]  343 	ld	de, #0x2010
   017B D5            [11]  344 	push	de
   017C E5            [11]  345 	push	hl
   017D C5            [11]  346 	push	bc
   017E CDr00r00      [17]  347 	call	_cpct_drawSpriteMasked
                            348 ;src/main.c:229: cpct_srand(77);
   0181 21 4D 00      [10]  349 	ld	hl,#0x004d
   0184 11 00 00      [10]  350 	ld	de,#0x0000
   0187 CDr00r00      [17]  351 	call	_cpct_setSeed_mxor
   018A CDr00r00      [17]  352 	call	_cpct_restoreState_mxor_u8
                            353 ;src/main.c:252: while (1) {
   018D                     354 00102$:
                            355 ;src/main.c:253: vsync();
   018D CDr00r00      [17]  356 	call	_vsync
                            357 ;src/main.c:255: screen_location++;
   0190 FD 21r04r00   [14]  358 	ld	iy, #_screen_location
   0194 FD 34 00      [23]  359 	inc	0 (iy)
   0197 20 03         [12]  360 	jr	NZ,00110$
   0199 FD 34 01      [23]  361 	inc	1 (iy)
   019C                     362 00110$:
                            363 ;src/main.c:256: screen_location=((unsigned int)screen_location) & 0x13FF;
   019C 2Ar04r00      [16]  364 	ld	hl, (_screen_location)
   019F 7C            [ 4]  365 	ld	a, h
   01A0 E6 13         [ 7]  366 	and	a, #0x13
   01A2 67            [ 4]  367 	ld	h, a
   01A3 22r04r00      [16]  368 	ld	(_screen_location), hl
                            369 ;src/main.c:257: crtc((u16)screen_location);
   01A6 2Ar04r00      [16]  370 	ld	hl, (_screen_location)
   01A9 E5            [11]  371 	push	hl
   01AA CDr87r00      [17]  372 	call	_crtc
   01AD F1            [10]  373 	pop	af
                            374 ;src/main.c:259: screen_plot_address++;
   01AE FD 21r06r00   [14]  375 	ld	iy, #_screen_plot_address
   01B2 FD 34 00      [23]  376 	inc	0 (iy)
   01B5 20 03         [12]  377 	jr	NZ,00111$
   01B7 FD 34 01      [23]  378 	inc	1 (iy)
   01BA                     379 00111$:
                            380 ;src/main.c:260: screen_plot_address++;
   01BA FD 34 00      [23]  381 	inc	0 (iy)
   01BD 20 03         [12]  382 	jr	NZ,00112$
   01BF FD 34 01      [23]  383 	inc	1 (iy)
   01C2                     384 00112$:
                            385 ;src/main.c:261: screen_plot_address=((unsigned int)screen_plot_address) & 0x47FF;
   01C2 2Ar06r00      [16]  386 	ld	hl, (_screen_plot_address)
   01C5 7C            [ 4]  387 	ld	a, h
   01C6 E6 47         [ 7]  388 	and	a, #0x47
   01C8 67            [ 4]  389 	ld	h, a
   01C9 22r06r00      [16]  390 	ld	(_screen_plot_address), hl
                            391 ;src/main.c:263: p = cpct_getScreenPtr(screen_plot_address, 0,0);
   01CC 2Ar06r00      [16]  392 	ld	hl, (_screen_plot_address)
   01CF 01 00 00      [10]  393 	ld	bc, #0x0000
   01D2 C5            [11]  394 	push	bc
   01D3 E5            [11]  395 	push	hl
   01D4 CDr00r00      [17]  396 	call	_cpct_getScreenPtr
                            397 ;src/main.c:264: s=(s+1)%32;
   01D7 C1            [10]  398 	pop	bc
   01D8 C5            [11]  399 	push	bc
   01D9 03            [ 6]  400 	inc	bc
   01DA 21 20 00      [10]  401 	ld	hl, #0x0020
   01DD E5            [11]  402 	push	hl
   01DE C5            [11]  403 	push	bc
   01DF CDr00r00      [17]  404 	call	__modsint
   01E2 F1            [10]  405 	pop	af
   01E3 F1            [10]  406 	pop	af
   01E4 33            [ 6]  407 	inc	sp
   01E5 33            [ 6]  408 	inc	sp
   01E6 E5            [11]  409 	push	hl
                            410 ;src/main.c:266: cpct_drawSprite(g_tile_schtroumpf4x32_tileset[s], screen_plot_address, G_TILE_SCHTROUMPF4X32_00_W, G_TILE_SCHTROUMPF4X32_00_H);
   01E7 ED 5Br06r00   [20]  411 	ld	de, (_screen_plot_address)
   01EB 01r00r00      [10]  412 	ld	bc, #_g_tile_schtroumpf4x32_tileset+0
   01EE E1            [10]  413 	pop	hl
   01EF E5            [11]  414 	push	hl
   01F0 29            [11]  415 	add	hl, hl
   01F1 09            [11]  416 	add	hl, bc
   01F2 4E            [ 7]  417 	ld	c, (hl)
   01F3 23            [ 6]  418 	inc	hl
   01F4 46            [ 7]  419 	ld	b, (hl)
   01F5 21 02 08      [10]  420 	ld	hl, #0x0802
   01F8 E5            [11]  421 	push	hl
   01F9 D5            [11]  422 	push	de
   01FA C5            [11]  423 	push	bc
   01FB CDr00r00      [17]  424 	call	_cpct_drawSprite
   01FE 18 8D         [12]  425 	jr	00102$
                            426 	.area _CODE
                            427 	.area _INITIALIZER
   0000                     428 __xinit__intCounter:
   0000 00                  429 	.db #0x00	; 0
   0001                     430 __xinit__hOffset:
   0001 00 00               431 	.dw #0x0000
   0003                     432 __xinit__slow:
   0003 00                  433 	.db #0x00	; 0
   0004                     434 __xinit__screen_location:
   0004 00 10               435 	.dw #0x1000
   0006                     436 __xinit__screen_plot_address:
   0006 4E 40               437 	.dw #0x404e
                            438 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _myInterruptHandler
                             13 	.globl _bank4_4000
                             14 	.globl _bank0123
                             15 	.globl _calque4000
                             16 	.globl _calqueC000
                             17 	.globl _vsync
                             18 	.globl _akp_musicPlay
                             19 	.globl _akp_musicInit
                             20 	.globl _rupture
                             21 	.globl _restoreVBL
                             22 	.globl _killVBL
                             23 	.globl _scroll
                             24 	.globl _cpct_restoreState_mxor_u8
                             25 	.globl _cpct_setSeed_mxor
                             26 	.globl _cpct_getScreenPtr
                             27 	.globl _cpct_setVideoMemoryOffset
                             28 	.globl _cpct_setPALColour
                             29 	.globl _cpct_setPalette
                             30 	.globl _cpct_setVideoMode
                             31 	.globl _cpct_hflipSpriteM0
                             32 	.globl _cpct_drawSolidBox
                             33 	.globl _cpct_drawSpriteMasked
                             34 	.globl _cpct_drawSprite
                             35 	.globl _cpct_px2byteM0
                             36 	.globl _cpct_isKeyPressed
                             37 	.globl _cpct_scanKeyboard_f
                             38 	.globl _cpct_memset_f64
                             39 	.globl _cpct_memset
                             40 	.globl _cpct_setInterruptHandler
                             41 	.globl _intCounter
                             42 	.globl _g_items_0
                             43 ;--------------------------------------------------------
                             44 ; special function registers
                             45 ;--------------------------------------------------------
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DATA
                             50 ;--------------------------------------------------------
                             51 ; ram data
                             52 ;--------------------------------------------------------
                             53 	.area _INITIALIZED
   0000                      54 _intCounter::
   0000                      55 	.ds 1
                             56 ;--------------------------------------------------------
                             57 ; absolute external ram data
                             58 ;--------------------------------------------------------
                             59 	.area _DABS (ABS)
                             60 ;--------------------------------------------------------
                             61 ; global & static initialisations
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _GSINIT
                             65 	.area _GSFINAL
                             66 	.area _GSINIT
                             67 ;--------------------------------------------------------
                             68 ; Home
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _HOME
                             72 ;--------------------------------------------------------
                             73 ; code
                             74 ;--------------------------------------------------------
                             75 	.area _CODE
                             76 ;src/main.c:45: void myInterruptHandler() {
                             77 ;	---------------------------------
                             78 ; Function myInterruptHandler
                             79 ; ---------------------------------
   0000                      80 _myInterruptHandler::
                             81 ;src/main.c:46: intCounter=intCounter+1;
   0000 FD 21r00r00   [14]   82 	ld	iy, #_intCounter
   0004 FD 34 00      [23]   83 	inc	0 (iy)
                             84 ;src/main.c:47: if (intCounter == 6) intCounter=0;
   0007 FD 7E 00      [19]   85 	ld	a, 0 (iy)
   000A D6 06         [ 7]   86 	sub	a, #0x06
   000C 20 04         [12]   87 	jr	NZ,00102$
   000E FD 36 00 00   [19]   88 	ld	0 (iy), #0x00
   0012                      89 00102$:
                             90 ;src/main.c:49: if (intCounter == 2) {
   0012 3Ar00r00      [13]   91 	ld	a,(#_intCounter + 0)
   0015 D6 02         [ 7]   92 	sub	a, #0x02
   0017 20 09         [12]   93 	jr	NZ,00104$
                             94 ;src/main.c:50: cpct_setBorder(2);
   0019 21 10 02      [10]   95 	ld	hl, #0x0210
   001C E5            [11]   96 	push	hl
   001D CDr00r00      [17]   97 	call	_cpct_setPALColour
   0020 18 07         [12]   98 	jr	00105$
   0022                      99 00104$:
                            100 ;src/main.c:52: cpct_setBorder(3);
   0022 21 10 03      [10]  101 	ld	hl, #0x0310
   0025 E5            [11]  102 	push	hl
   0026 CDr00r00      [17]  103 	call	_cpct_setPALColour
   0029                     104 00105$:
                            105 ;src/main.c:56: if (intCounter==2) {
   0029 3Ar00r00      [13]  106 	ld	a,(#_intCounter + 0)
   002C D6 02         [ 7]  107 	sub	a, #0x02
   002E 20 03         [12]  108 	jr	NZ,00107$
                            109 ;src/main.c:57: akp_musicPlay();
   0030 CDr00r00      [17]  110 	call	_akp_musicPlay
   0033                     111 00107$:
                            112 ;src/main.c:61: if (intCounter==5) {
   0033 3Ar00r00      [13]  113 	ld	a,(#_intCounter + 0)
   0036 D6 05         [ 7]  114 	sub	a, #0x05
   0038 20 0E         [12]  115 	jr	NZ,00109$
                            116 ;src/main.c:62: calqueC000();
   003A CDr00r00      [17]  117 	call	_calqueC000
                            118 ;src/main.c:63: killVBL();
   003D CDr00r00      [17]  119 	call	_killVBL
                            120 ;src/main.c:64: rupture(19-1);
   0040 3E 12         [ 7]  121 	ld	a, #0x12
   0042 F5            [11]  122 	push	af
   0043 33            [ 6]  123 	inc	sp
   0044 CDr00r00      [17]  124 	call	_rupture
   0047 33            [ 6]  125 	inc	sp
   0048                     126 00109$:
                            127 ;src/main.c:67: if (intCounter==2) {
   0048 3Ar00r00      [13]  128 	ld	a,(#_intCounter + 0)
   004B D6 02         [ 7]  129 	sub	a, #0x02
   004D C0            [11]  130 	ret	NZ
                            131 ;src/main.c:68: calque4000();
   004E CDr00r00      [17]  132 	call	_calque4000
                            133 ;src/main.c:69: restoreVBL();
   0051 CDr00r00      [17]  134 	call	_restoreVBL
                            135 ;src/main.c:70: rupture(39-19+1);
   0054 3E 15         [ 7]  136 	ld	a, #0x15
   0056 F5            [11]  137 	push	af
   0057 33            [ 6]  138 	inc	sp
   0058 CDr00r00      [17]  139 	call	_rupture
   005B 33            [ 6]  140 	inc	sp
   005C C9            [10]  141 	ret
   005D                     142 _g_items_0:
   005D 05                  143 	.db #0x05	; 5
   005E 0F                  144 	.db #0x0f	; 15
   005F 0F                  145 	.db #0x0f	; 15
   0060 00                  146 	.db #0x00	; 0
   0061 0F                  147 	.db #0x0f	; 15
   0062 0F                  148 	.db #0x0f	; 15
   0063 0F                  149 	.db #0x0f	; 15
   0064 0A                  150 	.db #0x0a	; 10
   0065 0F                  151 	.db #0x0f	; 15
   0066 0A                  152 	.db #0x0a	; 10
   0067 05                  153 	.db #0x05	; 5
   0068 00                  154 	.db #0x00	; 0
   0069 0F                  155 	.db #0x0f	; 15
   006A 0A                  156 	.db #0x0a	; 10
   006B 05                  157 	.db #0x05	; 5
   006C 00                  158 	.db #0x00	; 0
   006D 05                  159 	.db #0x05	; 5
   006E 0F                  160 	.db #0x0f	; 15
   006F 0A                  161 	.db #0x0a	; 10
   0070 0A                  162 	.db #0x0a	; 10
   0071 00                  163 	.db #0x00	; 0
   0072 0F                  164 	.db #0x0f	; 15
   0073 0F                  165 	.db #0x0f	; 15
   0074 0A                  166 	.db #0x0a	; 10
   0075 00                  167 	.db #0x00	; 0
   0076 0A                  168 	.db #0x0a	; 10
   0077 0A                  169 	.db #0x0a	; 10
   0078 0A                  170 	.db #0x0a	; 10
   0079 00                  171 	.db #0x00	; 0
   007A 00                  172 	.db #0x00	; 0
   007B 00                  173 	.db #0x00	; 0
   007C 00                  174 	.db #0x00	; 0
                            175 ;src/main.c:75: void main(void) {
                            176 ;	---------------------------------
                            177 ; Function main
                            178 ; ---------------------------------
   007D                     179 _main::
                            180 ;src/main.c:78: u8* sprite=g_items_0;
                            181 ;src/main.c:89: akp_musicInit();
   007D CDr00r00      [17]  182 	call	_akp_musicInit
                            183 ;src/main.c:94: cpct_setInterruptHandler(myInterruptHandler);
   0080 21r00r00      [10]  184 	ld	hl, #_myInterruptHandler
   0083 CDr00r00      [17]  185 	call	_cpct_setInterruptHandler
                            186 ;src/main.c:98: bank4_4000();
   0086 CDr00r00      [17]  187 	call	_bank4_4000
                            188 ;src/main.c:99: bank0123();
   0089 CDr00r00      [17]  189 	call	_bank0123
                            190 ;src/main.c:100: calqueC000();
   008C CDr00r00      [17]  191 	call	_calqueC000
                            192 ;src/main.c:103: cpct_setVideoMode(0);
   008F 2E 00         [ 7]  193 	ld	l, #0x00
   0091 CDr00r00      [17]  194 	call	_cpct_setVideoMode
                            195 ;src/main.c:106: cpct_setBorder(HW_BLACK);
   0094 21 10 14      [10]  196 	ld	hl, #0x1410
   0097 E5            [11]  197 	push	hl
   0098 CDr00r00      [17]  198 	call	_cpct_setPALColour
                            199 ;src/main.c:107: cpct_setPalette(g_tile_palette, 6);
   009B 21 06 00      [10]  200 	ld	hl, #0x0006
   009E E5            [11]  201 	push	hl
   009F 21r00r00      [10]  202 	ld	hl, #_g_tile_palette
   00A2 E5            [11]  203 	push	hl
   00A3 CDr00r00      [17]  204 	call	_cpct_setPalette
                            205 ;src/main.c:108: cpct_memset(CPCT_VMEM_START, 0, 0x4000);
   00A6 21 00 40      [10]  206 	ld	hl, #0x4000
   00A9 E5            [11]  207 	push	hl
   00AA AF            [ 4]  208 	xor	a, a
   00AB F5            [11]  209 	push	af
   00AC 33            [ 6]  210 	inc	sp
   00AD 26 C0         [ 7]  211 	ld	h, #0xc0
   00AF E5            [11]  212 	push	hl
   00B0 CDr00r00      [17]  213 	call	_cpct_memset
                            214 ;src/main.c:114: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,16-1);
   00B3 21 0F 0F      [10]  215 	ld	hl, #0x0f0f
   00B6 E5            [11]  216 	push	hl
   00B7 21 00 C0      [10]  217 	ld	hl, #0xc000
   00BA E5            [11]  218 	push	hl
   00BB CDr00r00      [17]  219 	call	_cpct_getScreenPtr
                            220 ;src/main.c:115: cpct_drawSprite(sprite, p, 4, 8);
   00BE E5            [11]  221 	push	hl
   00BF 01 04 08      [10]  222 	ld	bc, #0x0804
   00C2 C5            [11]  223 	push	bc
   00C3 E5            [11]  224 	push	hl
   00C4 01r5Dr00      [10]  225 	ld	bc, #_g_items_0
   00C7 C5            [11]  226 	push	bc
   00C8 CDr00r00      [17]  227 	call	_cpct_drawSprite
   00CB 01 00 20      [10]  228 	ld	bc, #0x2000
   00CE C5            [11]  229 	push	bc
   00CF 01 FF FF      [10]  230 	ld	bc, #0xffff
   00D2 C5            [11]  231 	push	bc
   00D3 01 00 C0      [10]  232 	ld	bc, #0xc000
   00D6 C5            [11]  233 	push	bc
   00D7 CDr00r00      [17]  234 	call	_cpct_memset_f64
   00DA 01r5Dr00      [10]  235 	ld	bc, #_g_items_0
   00DD C5            [11]  236 	push	bc
   00DE 01 04 08      [10]  237 	ld	bc, #0x0804
   00E1 C5            [11]  238 	push	bc
   00E2 CDr00r00      [17]  239 	call	_cpct_hflipSpriteM0
   00E5 E1            [10]  240 	pop	hl
                            241 ;src/main.c:123: cpct_drawSprite(sprite, p, 4, 8);
   00E6 01 04 08      [10]  242 	ld	bc, #0x0804
   00E9 C5            [11]  243 	push	bc
   00EA E5            [11]  244 	push	hl
   00EB 21r5Dr00      [10]  245 	ld	hl, #_g_items_0
   00EE E5            [11]  246 	push	hl
   00EF CDr00r00      [17]  247 	call	_cpct_drawSprite
                            248 ;src/main.c:125: p = cpct_getScreenPtr(CPCT_VMEM_START, 16-1,32-1);
   00F2 21 0F 1F      [10]  249 	ld	hl, #0x1f0f
   00F5 E5            [11]  250 	push	hl
   00F6 21 00 C0      [10]  251 	ld	hl, #0xc000
   00F9 E5            [11]  252 	push	hl
   00FA CDr00r00      [17]  253 	call	_cpct_getScreenPtr
                            254 ;src/main.c:127: cpct_drawSolidBox(p, cpct_px2byteM0(2, 3), 10, 20);
   00FD E5            [11]  255 	push	hl
   00FE 21 02 03      [10]  256 	ld	hl, #0x0302
   0101 E5            [11]  257 	push	hl
   0102 CDr00r00      [17]  258 	call	_cpct_px2byteM0
   0105 55            [ 4]  259 	ld	d, l
   0106 C1            [10]  260 	pop	bc
   0107 21 0A 14      [10]  261 	ld	hl, #0x140a
   010A E5            [11]  262 	push	hl
   010B D5            [11]  263 	push	de
   010C 33            [ 6]  264 	inc	sp
   010D C5            [11]  265 	push	bc
   010E CDr00r00      [17]  266 	call	_cpct_drawSolidBox
   0111 F1            [10]  267 	pop	af
                            268 ;src/main.c:130: p = cpct_getScreenPtr(CPCT_VMEM_START, 10-1,80-1);
   0112 33            [ 6]  269 	inc	sp
   0113 21 09 4F      [10]  270 	ld	hl,#0x4f09
   0116 E3            [19]  271 	ex	(sp),hl
   0117 21 00 C0      [10]  272 	ld	hl, #0xc000
   011A E5            [11]  273 	push	hl
   011B CDr00r00      [17]  274 	call	_cpct_getScreenPtr
                            275 ;src/main.c:131: cpct_drawSpriteMasked(g_tile_schtroumpf, p, G_TILE_SCHTROUMPF_W, G_TILE_SCHTROUMPF_H);
   011E 01r00r00      [10]  276 	ld	bc, #_g_tile_schtroumpf+0
   0121 11 10 20      [10]  277 	ld	de, #0x2010
   0124 D5            [11]  278 	push	de
   0125 E5            [11]  279 	push	hl
   0126 C5            [11]  280 	push	bc
   0127 CDr00r00      [17]  281 	call	_cpct_drawSpriteMasked
                            282 ;src/main.c:145: cpct_srand(77);
   012A 21 4D 00      [10]  283 	ld	hl,#0x004d
   012D 11 00 00      [10]  284 	ld	de,#0x0000
   0130 CDr00r00      [17]  285 	call	_cpct_setSeed_mxor
   0133 CDr00r00      [17]  286 	call	_cpct_restoreState_mxor_u8
                            287 ;src/main.c:149: cpct_scanKeyboard_f();
   0136 CDr00r00      [17]  288 	call	_cpct_scanKeyboard_f
                            289 ;src/main.c:150: t=0;
   0139 01 00 00      [10]  290 	ld	bc, #0x0000
                            291 ;src/main.c:151: while (t%128!=0 || (!cpct_isKeyPressed(Key_Enter) && !cpct_isKeyPressed(Key_Return))){
   013C                     292 00107$:
   013C C5            [11]  293 	push	bc
   013D 21 80 00      [10]  294 	ld	hl, #0x0080
   0140 E5            [11]  295 	push	hl
   0141 C5            [11]  296 	push	bc
   0142 CDr00r00      [17]  297 	call	__modsint
   0145 F1            [10]  298 	pop	af
   0146 F1            [10]  299 	pop	af
   0147 C1            [10]  300 	pop	bc
   0148 7C            [ 4]  301 	ld	a, h
   0149 B5            [ 4]  302 	or	a,l
   014A 20 18         [12]  303 	jr	NZ,00108$
   014C C5            [11]  304 	push	bc
   014D 21 00 40      [10]  305 	ld	hl, #0x4000
   0150 CDr00r00      [17]  306 	call	_cpct_isKeyPressed
   0153 C1            [10]  307 	pop	bc
   0154 7D            [ 4]  308 	ld	a, l
   0155 B7            [ 4]  309 	or	a, a
   0156 20 48         [12]  310 	jr	NZ,00109$
   0158 C5            [11]  311 	push	bc
   0159 21 02 04      [10]  312 	ld	hl, #0x0402
   015C CDr00r00      [17]  313 	call	_cpct_isKeyPressed
   015F C1            [10]  314 	pop	bc
   0160 7D            [ 4]  315 	ld	a, l
   0161 B7            [ 4]  316 	or	a, a
   0162 20 3C         [12]  317 	jr	NZ,00109$
   0164                     318 00108$:
                            319 ;src/main.c:152: scroll("WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR", 110, t);
   0164 C5            [11]  320 	push	bc
   0165 C5            [11]  321 	push	bc
   0166 21 6E 00      [10]  322 	ld	hl, #0x006e
   0169 E5            [11]  323 	push	hl
   016A 21rB2r01      [10]  324 	ld	hl, #___str_0
   016D E5            [11]  325 	push	hl
   016E CDr00r00      [17]  326 	call	_scroll
   0171 21 06 00      [10]  327 	ld	hl, #6
   0174 39            [11]  328 	add	hl, sp
   0175 F9            [ 6]  329 	ld	sp, hl
   0176 C1            [10]  330 	pop	bc
                            331 ;src/main.c:153: t=t+1;
   0177 03            [ 6]  332 	inc	bc
                            333 ;src/main.c:154: if (t>110*G_TILE_FONTMAP20X22_00_W+160) {t=0;}
   0178 3E EC         [ 7]  334 	ld	a, #0xec
   017A B9            [ 4]  335 	cp	a, c
   017B 3E 04         [ 7]  336 	ld	a, #0x04
   017D 98            [ 4]  337 	sbc	a, b
   017E E2r83r01      [10]  338 	jp	PO, 00139$
   0181 EE 80         [ 7]  339 	xor	a, #0x80
   0183                     340 00139$:
   0183 F2r89r01      [10]  341 	jp	P, 00102$
   0186 01 00 00      [10]  342 	ld	bc, #0x0000
   0189                     343 00102$:
                            344 ;src/main.c:155: if (t%128==0) {
   0189 C5            [11]  345 	push	bc
   018A 21 80 00      [10]  346 	ld	hl, #0x0080
   018D E5            [11]  347 	push	hl
   018E C5            [11]  348 	push	bc
   018F CDr00r00      [17]  349 	call	__modsint
   0192 F1            [10]  350 	pop	af
   0193 F1            [10]  351 	pop	af
   0194 C1            [10]  352 	pop	bc
   0195 7C            [ 4]  353 	ld	a, h
   0196 B5            [ 4]  354 	or	a,l
   0197 20 A3         [12]  355 	jr	NZ,00107$
                            356 ;src/main.c:156: cpct_scanKeyboard_f();
   0199 C5            [11]  357 	push	bc
   019A CDr00r00      [17]  358 	call	_cpct_scanKeyboard_f
   019D C1            [10]  359 	pop	bc
   019E 18 9C         [12]  360 	jr	00107$
   01A0                     361 00109$:
                            362 ;src/main.c:162: cpct_setVideoMemoryOffset(0);
   01A0 2E 00         [ 7]  363 	ld	l, #0x00
   01A2 CDr00r00      [17]  364 	call	_cpct_setVideoMemoryOffset
                            365 ;src/main.c:163: calque4000();
   01A5 CDr00r00      [17]  366 	call	_calque4000
                            367 ;src/main.c:165: while (1) {
   01A8                     368 00111$:
                            369 ;src/main.c:166: vsync();
   01A8 CDr00r00      [17]  370 	call	_vsync
                            371 ;src/main.c:167: intCounter=0;
   01AB 21r00r00      [10]  372 	ld	hl,#_intCounter + 0
   01AE 36 00         [10]  373 	ld	(hl), #0x00
   01B0 18 F6         [12]  374 	jr	00111$
   01B2                     375 ___str_0:
   01B2 57 45 20 57 49 53   376 	.ascii "WE WISH YOU A MERRY CHRISTMAS WE WISH YOU A MERRY CHRISTMAS "
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        57 45 20 57 49 53
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
   01EE 57 45 20 57 49 53   377 	.ascii "WE WISH YOU A MERRY CHRISTMAS AND A HAPPY NEW YEAR"
        48 20 59 4F 55 20
        41 20 4D 45 52 52
        59 20 43 48 52 49
        53 54 4D 41 53 20
        41 4E 44 20 41 20
        48 41 50 50 59 20
        4E 45 57 20 59 45
        41 52
   0220 00                  378 	.db 0x00
                            379 	.area _CODE
                            380 	.area _INITIALIZER
   0000                     381 __xinit__intCounter:
   0000 00                  382 	.db #0x00	; 0
                            383 	.area _CABS (ABS)
